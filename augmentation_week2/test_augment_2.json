[
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "question": "Can you provide the names and ids of all artists who have three or more albums, sorted alphabetically?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "question": "Show me the artist names and their ids who have at least three albums, in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "question": "I need the names and ids of all artists with three or more albums, arranged in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "question": "Could you list the names and ids of artists who have a minimum of three albums, in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "question": "Display the names and ids of all artists having at least three albums, alphabetically sorted.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum degree program ID for each semester description?",
        "gold_parse": "",
        "query": "SELECT semester_description, MAX(degree_program_id) FROM Semesters JOIN Degree_Programs ON Semesters.semester_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What's the highest degree program ID for each semester description?",
        "gold_parse": "",
        "query": "SELECT semester_description, MAX(degree_program_id) FROM Semesters JOIN Degree_Programs ON Semesters.semester_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Can you tell me the maximum degree program ID for every semester description?",
        "gold_parse": "",
        "query": "SELECT semester_description, MAX(degree_program_id) FROM Semesters JOIN Degree_Programs ON Semesters.semester_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the top degree program ID for each semester description?",
        "gold_parse": "",
        "query": "SELECT semester_description, MAX(degree_program_id) FROM Semesters JOIN Degree_Programs ON Semesters.semester_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Could you find the maximum degree program ID for each semester description?",
        "gold_parse": "",
        "query": "SELECT semester_description, MAX(degree_program_id) FROM Semesters JOIN Degree_Programs ON Semesters.semester_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "I want to know the maximum degree program ID for each semester description.",
        "gold_parse": "",
        "query": "SELECT semester_description, MAX(degree_program_id) FROM Semesters JOIN Degree_Programs ON Semesters.semester_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "election",
        "query": "SELECT * FROM election",
        "question": "Show all the information about election.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM election"
    },
    {
        "db_id": "election",
        "query": "SELECT * FROM election",
        "question": "Display all the data related to the election.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM election"
    },
    {
        "db_id": "election",
        "query": "SELECT * FROM election",
        "question": "Can you provide all the details about the election?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM election"
    },
    {
        "db_id": "election",
        "query": "SELECT * FROM election",
        "question": "I want to see all the information regarding the election.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM election"
    },
    {
        "db_id": "election",
        "query": "SELECT * FROM election",
        "question": "Show me everything about the election.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM election"
    },
    {
        "db_id": "election",
        "query": "SELECT * FROM election",
        "question": "What is all the information available about the election?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM election"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
        "question": "List the average room count of the properties with gardens.",
        "correctness": 1,
        "gold_parse": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
        "question": "What is the average number of rooms for properties that have gardens?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
        "question": "Can you provide the mean room count for properties featuring gardens?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
        "question": "What's the average room count for properties with gardens?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
        "question": "Could you list the average number of rooms in properties with gardens?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
        "question": "Show the average room count for properties that include gardens.",
        "correctness": 1,
        "gold_parse": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"",
        "question": "Which apartments have type code \"Flat\"? Give me their apartment numbers.",
        "correctness": 1,
        "gold_parse": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"",
        "question": "Can you provide the apartment numbers for the apartments that are classified as 'Flat'?",
        "correctness": 1,
        "gold_parse": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"",
        "question": "What are the apartment numbers for the apartments with the type code 'Flat'?",
        "correctness": 1,
        "gold_parse": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"",
        "question": "I'm looking for the apartment numbers of the 'Flat' type apartments. Can you provide them?",
        "correctness": 1,
        "gold_parse": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"",
        "question": "Could you list the apartment numbers for all 'Flat' type apartments?",
        "correctness": 1,
        "gold_parse": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"",
        "question": "I need the apartment numbers for all apartments that have a type code of 'Flat'. Can you give me that?",
        "correctness": 1,
        "gold_parse": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\""
    },
    {
        "db_id": "formula_1",
        "question": "Find the names of all races held in 2017.",
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017",
        "query": "SELECT country FROM circuits WHERE circuitRef = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of races that took place in 2017?",
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017",
        "query": "SELECT country FROM circuits WHERE circuitRef = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Can you list the races that were held in 2017?",
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017",
        "query": "SELECT country FROM circuits WHERE circuitRef = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Show me the races that occurred in 2017.",
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017",
        "query": "SELECT country FROM circuits WHERE circuitRef = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "I want to know the races that happened in 2017.",
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017",
        "query": "SELECT country FROM circuits WHERE circuitRef = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Which races were conducted in 2017?",
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017",
        "query": "SELECT country FROM circuits WHERE circuitRef = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
        "question": "Count the number of financial transactions that the account with the name 337 has.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\""
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
        "question": "How many financial transactions does the account named 337 have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\""
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
        "question": "What is the total number of financial transactions for the account 337?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\""
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
        "question": "Can you count the financial transactions for the account with the name 337?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\""
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
        "question": "What's the count of financial transactions for the account labeled 337?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\""
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
        "question": "Determine the number of financial transactions for the account named 337.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT count(*) ,  food FROM goods GROUP BY food",
        "question": "Count the number of goods for each food type.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  food FROM goods GROUP BY food"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT count(*) ,  food FROM goods GROUP BY food",
        "question": "How many goods are there for each type of food?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  food FROM goods GROUP BY food"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT count(*) ,  food FROM goods GROUP BY food",
        "question": "Can you tally the number of goods per food type?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  food FROM goods GROUP BY food"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT count(*) ,  food FROM goods GROUP BY food",
        "question": "What is the quantity of goods for each food category?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  food FROM goods GROUP BY food"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT count(*) ,  food FROM goods GROUP BY food",
        "question": "Determine the count of goods for every food type.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  food FROM goods GROUP BY food"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT count(*) ,  food FROM goods GROUP BY food",
        "question": "What's the total number of goods for each kind of food?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  food FROM goods GROUP BY food"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE nationality = 'Australian';",
        "question": "What are the names of Australian actors?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM actor WHERE nationality = 'Australian';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE nationality = 'Australian';",
        "question": "Can you list the names of actors from Australia?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM actor WHERE nationality = 'Australian';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE nationality = 'Australian';",
        "question": "Who are some actors that are from Australia?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM actor WHERE nationality = 'Australian';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE nationality = 'Australian';",
        "question": "Could you tell me the names of Australian actors?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM actor WHERE nationality = 'Australian';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE nationality = 'Australian';",
        "question": "I'd like to know the names of actors who are Australian.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM actor WHERE nationality = 'Australian';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE nationality = 'Australian';",
        "question": "Who are the actors hailing from Australia?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM actor WHERE nationality = 'Australian';"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "Which states have an area greater than 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "In which states is the area more than 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "Can you list the states with an area exceeding 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "What are the states that have an area larger than 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "Which states possess an area greater than 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "Identify the states where the area is over 50,000 square kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "student_1",
        "question": "Which classrooms are used by grade 4?",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "query": "SELECT Classroom FROM list WHERE Grade = value ORDER BY Classroom Asc",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What classrooms are occupied by the fourth grade?",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "query": "SELECT Classroom FROM list WHERE Grade = value ORDER BY Classroom Asc",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Can you tell me which classrooms are being used by grade 4?",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "query": "SELECT Classroom FROM list WHERE Grade = value ORDER BY Classroom Asc",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which classrooms are allocated to the fourth grade?",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "query": "SELECT Classroom FROM list WHERE Grade = value ORDER BY Classroom Asc",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Do you know the classrooms that are used by grade 4?",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "query": "SELECT Classroom FROM list WHERE Grade = value ORDER BY Classroom Asc",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the classrooms that grade 4 uses?",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "query": "SELECT Classroom FROM list WHERE Grade = value ORDER BY Classroom Asc",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
        "question": "Find the titles of all movies directed by steven spielberg.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
        "question": "What are the names of all films directed by Steven Spielberg?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
        "question": "Can you list all the movies that Steven Spielberg directed?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
        "question": "Show me all the movie titles that were directed by Steven Spielberg.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
        "question": "What are all the films Steven Spielberg has directed?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
        "question": "Provide the titles of all movies that have been directed by Steven Spielberg.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
    },
    {
        "db_id": "farm",
        "question": "What are the statuses and average populations of each city?",
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "query": "SELECT City_ID , Avg ( Population ) FROM city GROUP BY City_ID",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Can you tell me the statuses and average populations for all cities?",
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "query": "SELECT City_ID , Avg ( Population ) FROM city GROUP BY City_ID",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the status and average population of every city?",
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "query": "SELECT City_ID , Avg ( Population ) FROM city GROUP BY City_ID",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Could you provide the statuses and average populations of each city?",
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "query": "SELECT City_ID , Avg ( Population ) FROM city GROUP BY City_ID",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "I'd like to know the status and average population of all cities.",
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "query": "SELECT City_ID , Avg ( Population ) FROM city GROUP BY City_ID",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What are the average populations and statuses of each city?",
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "query": "SELECT City_ID , Avg ( Population ) FROM city GROUP BY City_ID",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name and college of students whose decisions are yes in the tryout.",
        "gold_parse": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "query": "SELECT T1.cName , T1.enr FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Identify the students with a 'yes' decision in the tryout, along with their college names.",
        "gold_parse": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "query": "SELECT T1.cName , T1.enr FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Can you provide the names and colleges of students who got a 'yes' in the tryout?",
        "gold_parse": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "query": "SELECT T1.cName , T1.enr FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Who are the students that received a 'yes' in the tryout and what colleges do they attend?",
        "gold_parse": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "query": "SELECT T1.cName , T1.enr FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "I need to know the students who got a 'yes' in the tryout and their respective colleges.",
        "gold_parse": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "query": "SELECT T1.cName , T1.enr FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Show me the students and their colleges who have a 'yes' decision in the tryout.",
        "gold_parse": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "query": "SELECT T1.cName , T1.enr FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT * FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Which official native languages include the term 'English'?",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT * FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Can you list the official native languages that have 'English' in them?",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT * FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official languages that have 'English' as part of their name?",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT * FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Identify the official native languages that incorporate the word 'English'.",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT * FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show me the official native languages where 'English' appears in the name.",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT * FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT title FROM papers WHERE title LIKE \"%Database%\"",
        "question": "Which papers have the substring \"Database\" in their titles? Show the titles of the papers.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM papers WHERE title LIKE \"%Database%\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT title FROM papers WHERE title LIKE \"%Database%\"",
        "question": "Can you list the titles of papers that include 'Database' in their titles?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM papers WHERE title LIKE \"%Database%\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT title FROM papers WHERE title LIKE \"%Database%\"",
        "question": "What are the titles of papers that contain 'Database' in them?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM papers WHERE title LIKE \"%Database%\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT title FROM papers WHERE title LIKE \"%Database%\"",
        "question": "Show me the paper titles that have 'Database' as a substring.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM papers WHERE title LIKE \"%Database%\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT title FROM papers WHERE title LIKE \"%Database%\"",
        "question": "I want to see the titles of papers that have 'Database' in their titles.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM papers WHERE title LIKE \"%Database%\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT title FROM papers WHERE title LIKE \"%Database%\"",
        "question": "Which paper titles include the word 'Database'?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM papers WHERE title LIKE \"%Database%\""
    },
    {
        "db_id": "flight_4",
        "question": "How many airports are there per city in the United States? Order the cities by decreasing number of airports.",
        "gold_parse": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "query": "SELECT city , Count ( * ) FROM airports GROUP BY city ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the count of airports in each city in the US, sorted by the cities with the most airports?",
        "gold_parse": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "query": "SELECT city , Count ( * ) FROM airports GROUP BY city ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Can you list the cities in the United States by the number of airports they have, in descending order?",
        "gold_parse": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "query": "SELECT city , Count ( * ) FROM airports GROUP BY city ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "In the United States, which cities have the most airports? List them in descending order.",
        "gold_parse": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "query": "SELECT city , Count ( * ) FROM airports GROUP BY city ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Provide a list of US cities, ordered by the number of airports they have, from most to least.",
        "gold_parse": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "query": "SELECT city , Count ( * ) FROM airports GROUP BY city ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "How many airports does each city in the United States have? Arrange the cities from the one with the most airports to the least.",
        "gold_parse": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "query": "SELECT city , Count ( * ) FROM airports GROUP BY city ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "course_teach",
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "gold_parse": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "query": "SELECT Name FROM teacher EXCEPT SELECT Name FROM teacher",
        "correctness": 0
    },
    {
        "db_id": "course_teach",
        "question": "Can you list the teachers whose courses are yet to be scheduled?",
        "gold_parse": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "query": "SELECT Name FROM teacher EXCEPT SELECT Name FROM teacher",
        "correctness": 0
    },
    {
        "db_id": "course_teach",
        "question": "Who are the teachers with courses that haven't been arranged?",
        "gold_parse": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "query": "SELECT Name FROM teacher EXCEPT SELECT Name FROM teacher",
        "correctness": 0
    },
    {
        "db_id": "course_teach",
        "question": "What are the names of the instructors whose classes are not yet scheduled?",
        "gold_parse": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "query": "SELECT Name FROM teacher EXCEPT SELECT Name FROM teacher",
        "correctness": 0
    },
    {
        "db_id": "course_teach",
        "question": "Could you tell me the teachers whose courses are still not arranged?",
        "gold_parse": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "query": "SELECT Name FROM teacher EXCEPT SELECT Name FROM teacher",
        "correctness": 0
    },
    {
        "db_id": "course_teach",
        "question": "Identify the teachers whose courses have not been planned yet.",
        "gold_parse": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "query": "SELECT Name FROM teacher EXCEPT SELECT Name FROM teacher",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Show the country names and their continent IDs for those with continent IDs greater than 2.",
        "gold_parse": "",
        "query": "SELECT T1.CountryName, T2.Continent FROM countries AS T1 JOIN continents AS T2 ON T1.Continent = T2.ContId WHERE T2.Continent > 2;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Display the names of countries and their associated continent IDs where the continent ID is more than 2.",
        "gold_parse": "",
        "query": "SELECT T1.CountryName, T2.Continent FROM countries AS T1 JOIN continents AS T2 ON T1.Continent = T2.ContId WHERE T2.Continent > 2;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Can you list the countries and their continent IDs where the continent ID exceeds 2?",
        "gold_parse": "",
        "query": "SELECT T1.CountryName, T2.Continent FROM countries AS T1 JOIN continents AS T2 ON T1.Continent = T2.ContId WHERE T2.Continent > 2;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Provide the country names and their continent IDs for those having continent IDs above 2.",
        "gold_parse": "",
        "query": "SELECT T1.CountryName, T2.Continent FROM countries AS T1 JOIN continents AS T2 ON T1.Continent = T2.ContId WHERE T2.Continent > 2;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "I want to see the country names and their continent IDs where the continent ID is greater than 2.",
        "gold_parse": "",
        "query": "SELECT T1.CountryName, T2.Continent FROM countries AS T1 JOIN continents AS T2 ON T1.Continent = T2.ContId WHERE T2.Continent > 2;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Could you show me the countries and their continent IDs if the continent ID is over 2?",
        "gold_parse": "",
        "query": "SELECT T1.CountryName, T2.Continent FROM countries AS T1 JOIN continents AS T2 ON T1.Continent = T2.ContId WHERE T2.Continent > 2;",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "How many order items correspond to each order id?",
        "gold_parse": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",
        "query": "SELECT order_id , Count ( * ) FROM Orders GROUP BY order_id",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "What is the count of order items for each order id?",
        "gold_parse": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",
        "query": "SELECT order_id , Count ( * ) FROM Orders GROUP BY order_id",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Can you tell me the number of order items for every order id?",
        "gold_parse": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",
        "query": "SELECT order_id , Count ( * ) FROM Orders GROUP BY order_id",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "What's the total number of order items per order id?",
        "gold_parse": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",
        "query": "SELECT order_id , Count ( * ) FROM Orders GROUP BY order_id",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "How many items are there in each order based on order id?",
        "gold_parse": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",
        "query": "SELECT order_id , Count ( * ) FROM Orders GROUP BY order_id",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "For each order id, how many order items are there?",
        "gold_parse": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",
        "query": "SELECT order_id , Count ( * ) FROM Orders GROUP BY order_id",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the first names and last names of the students that minor in the department with DNO 140.",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Can you provide the first and last names of students who have a minor in the department numbered 140?",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Who are the students, by first and last name, minoring in the department with DNO 140?",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "I need to know the first names and last names of students minoring in the department with DNO 140.",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Could you list the first and last names of students who minor in the department with the DNO 140?",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What's the first and last names of students who have chosen to minor in the department with DNO 140?",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT * FROM warehouses",
        "question": "Select all details of all warehouses.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM warehouses"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT * FROM warehouses",
        "question": "Retrieve all information about every warehouse",
        "correctness": 1,
        "gold_parse": "SELECT * FROM warehouses"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT * FROM warehouses",
        "question": "Show me all the details of all warehouses",
        "correctness": 1,
        "gold_parse": "SELECT * FROM warehouses"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT * FROM warehouses",
        "question": "Can you provide all the details for each warehouse?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM warehouses"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT * FROM warehouses",
        "question": "I need all the information on all warehouses",
        "correctness": 1,
        "gold_parse": "SELECT * FROM warehouses"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT * FROM warehouses",
        "question": "Display all the warehouse details",
        "correctness": 1,
        "gold_parse": "SELECT * FROM warehouses"
    },
    {
        "db_id": "loan_1",
        "question": "Find the state, account type, and credit score of the customer whose number of loan is 0.",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "query": "SELECT state , acc_type , no_of_loans FROM customer WHERE cust_name = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Identify the state, account type, and credit score for the customer with no loans.",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "query": "SELECT state , acc_type , no_of_loans FROM customer WHERE cust_name = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the state, account type, and credit score of the customer who has not taken any loans?",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "query": "SELECT state , acc_type , no_of_loans FROM customer WHERE cust_name = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Can you provide the state, account type, and credit score of the customer who has zero loans?",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "query": "SELECT state , acc_type , no_of_loans FROM customer WHERE cust_name = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Show the state, account type, and credit score of the customer who doesn't have any loans.",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "query": "SELECT state , acc_type , no_of_loans FROM customer WHERE cust_name = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Retrieve the state, account type, and credit score of the customer with no loan records.",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "query": "SELECT state , acc_type , no_of_loans FROM customer WHERE cust_name = value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Name mountains with peak altitudes above 3000 meters.",
        "gold_parse": "",
        "query": "SELECT mountain_name, MAX(mountain_altitude) FROM mountain GROUP BY mountain_name HAVING MAX(mountain_altitude) < 3000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List all mountains that have peak altitudes over 3000 meters.",
        "gold_parse": "",
        "query": "SELECT mountain_name, MAX(mountain_altitude) FROM mountain GROUP BY mountain_name HAVING MAX(mountain_altitude) < 3000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which mountains have a peak altitude greater than 3000 meters?",
        "gold_parse": "",
        "query": "SELECT mountain_name, MAX(mountain_altitude) FROM mountain GROUP BY mountain_name HAVING MAX(mountain_altitude) < 3000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Can you name the mountains with peaks higher than 3000 meters?",
        "gold_parse": "",
        "query": "SELECT mountain_name, MAX(mountain_altitude) FROM mountain GROUP BY mountain_name HAVING MAX(mountain_altitude) < 3000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Identify mountains with peak altitudes exceeding 3000 meters.",
        "gold_parse": "",
        "query": "SELECT mountain_name, MAX(mountain_altitude) FROM mountain GROUP BY mountain_name HAVING MAX(mountain_altitude) < 3000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Show me mountains that have peak altitudes above 3000 meters.",
        "gold_parse": "",
        "query": "SELECT mountain_name, MAX(mountain_altitude) FROM mountain GROUP BY mountain_name HAVING MAX(mountain_altitude) < 3000;",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the name of dorms which have TV Lounge but no Study Room as amenity.",
        "gold_parse": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "query": "SELECT T1.dorm_name FROM Dorm AS T1 EXCEPT SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Identify the dormitories that offer a TV Lounge but lack a Study Room.",
        "gold_parse": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "query": "SELECT T1.dorm_name FROM Dorm AS T1 EXCEPT SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the names of the dorms that have a TV Lounge but do not have a Study Room?",
        "gold_parse": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "query": "SELECT T1.dorm_name FROM Dorm AS T1 EXCEPT SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Can you list the dorms that provide a TV Lounge but no Study Room?",
        "gold_parse": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "query": "SELECT T1.dorm_name FROM Dorm AS T1 EXCEPT SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Which dorms have a TV Lounge but are missing a Study Room?",
        "gold_parse": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "query": "SELECT T1.dorm_name FROM Dorm AS T1 EXCEPT SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Show me the dorms that come with a TV Lounge but without a Study Room.",
        "gold_parse": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "query": "SELECT T1.dorm_name FROM Dorm AS T1 EXCEPT SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name = value",
        "correctness": 0
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
        "question": "What are the average and maximum values for each type of content in boxes?",
        "correctness": 1,
        "gold_parse": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
        "question": "What are the mean and peak values for each content category in boxes?",
        "correctness": 1,
        "gold_parse": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
        "question": "Can you tell me the average and highest values for each kind of content in boxes?",
        "correctness": 1,
        "gold_parse": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
        "question": "What's the average and maximum values for each content type in boxes?",
        "correctness": 1,
        "gold_parse": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
        "question": "Could you provide the average and maximum values for each type of content in boxes?",
        "correctness": 1,
        "gold_parse": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
        "question": "I'd like to know the average and top values for each type of content in boxes.",
        "correctness": 1,
        "gold_parse": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS"
    },
    {
        "db_id": "singer",
        "question": "Count the number of songs that reached the highest position for each singer.",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(Song_ID) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position = 1;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "How many songs of each singer have reached the top position?",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(Song_ID) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position = 1;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "For each singer, count their songs that have hit the number one spot.",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(Song_ID) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position = 1;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What is the count of songs that have achieved the highest rank for each singer?",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(Song_ID) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position = 1;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Determine the number of songs that each singer has had at the number one position.",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(Song_ID) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position = 1;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "For every singer, how many of their songs have reached the peak position?",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(Song_ID) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position = 1;",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards",
        "question": "Show the number of customer cards.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards",
        "question": "Display the count of customer cards.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards",
        "question": "How many customer cards are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards",
        "question": "Can you count the number of customer cards?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards",
        "question": "What is the total number of customer cards?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards",
        "question": "Provide the total count of customer cards.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards"
    },
    {
        "db_id": "dorm_1",
        "question": "Find the average age and number of male students (with sex M) from each city.",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "query": "SELECT Avg ( Age ) , city_code FROM Student WHERE Sex = value GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the average age and total count of male students in each city?",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "query": "SELECT Avg ( Age ) , city_code FROM Student WHERE Sex = value GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Can you provide the mean age and total number of male students from every city?",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "query": "SELECT Avg ( Age ) , city_code FROM Student WHERE Sex = value GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What's the mean age and the total of male students per city?",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "query": "SELECT Avg ( Age ) , city_code FROM Student WHERE Sex = value GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Could you tell me the average age and the number of male students in each city?",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "query": "SELECT Avg ( Age ) , city_code FROM Student WHERE Sex = value GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "I want to know the average age and the number of male students from each city.",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "query": "SELECT Avg ( Age ) , city_code FROM Student WHERE Sex = value GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
        "question": "What are the classes of races that have two or more corresponding races?",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2"
    },
    {
        "db_id": "race_track",
        "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
        "question": "Can you list the classes of races that have at least two corresponding races?",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2"
    },
    {
        "db_id": "race_track",
        "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
        "question": "Which race classes have more than one corresponding race?",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2"
    },
    {
        "db_id": "race_track",
        "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
        "question": "What are the race classes that correspond to two or more races?",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2"
    },
    {
        "db_id": "race_track",
        "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
        "question": "Could you tell me the classes of races that have two or more associated races?",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2"
    },
    {
        "db_id": "race_track",
        "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
        "question": "Identify the classes of races that have a minimum of two corresponding races.",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year > 2015;",
        "question": "What are the titles of papers published after 2015?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year > 2015;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year > 2015;",
        "question": "Can you list the titles of papers that were published post 2015?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year > 2015;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year > 2015;",
        "question": "What are the names of papers that have been published since 2015?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year > 2015;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year > 2015;",
        "question": "Could you provide the titles of papers published subsequent to 2015?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year > 2015;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year > 2015;",
        "question": "Show me the titles of papers that came out after 2015.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year > 2015;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year > 2015;",
        "question": "I'd like to know the titles of papers published after the year 2015.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year > 2015;"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
        "question": "What is the name of the least popular plane?",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
        "question": "Which plane has the least popularity?",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
        "question": "Can you tell me the name of the plane that is least popular?",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
        "question": "What's the name of the plane with the lowest popularity?",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
        "question": "Identify the least popular plane by name.",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
        "question": "What is the least favored plane's name?",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "question": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.",
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "query": "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Can you display the departure and arrival dates for all flights traveling from Los Angeles to Honolulu?",
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "query": "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the departure and arrival dates for all flights going from Los Angeles to Honolulu?",
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "query": "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "I'd like to see the departure and arrival dates for all flights from Los Angeles to Honolulu.",
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "query": "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Could you list the departure and arrival dates for all flights from Los Angeles to Honolulu?",
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "query": "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Provide the departure and arrival dates for all flights that are from Los Angeles to Honolulu.",
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "query": "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "book_review",
        "query": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\"",
        "question": "What is the average number of readers for books of type \"Novel\"?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\""
    },
    {
        "db_id": "book_review",
        "query": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\"",
        "question": "What's the mean count of readers for 'Novel' type books?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\""
    },
    {
        "db_id": "book_review",
        "query": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\"",
        "question": "Can you tell me the average reader count for books categorized as 'Novel'?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\""
    },
    {
        "db_id": "book_review",
        "query": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\"",
        "question": "What is the mean number of readers for novels?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\""
    },
    {
        "db_id": "book_review",
        "query": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\"",
        "question": "How many readers, on average, do novels have?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\""
    },
    {
        "db_id": "book_review",
        "query": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\"",
        "question": "What is the average readership for books classified as 'Novel'?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\""
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM club ORDER BY Name ASC",
        "question": "List the name of clubs in ascending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM club ORDER BY Name ASC"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM club ORDER BY Name ASC",
        "question": "Can you show me the names of clubs in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM club ORDER BY Name ASC"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM club ORDER BY Name ASC",
        "question": "Display the club names in ascending order alphabetically.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM club ORDER BY Name ASC"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM club ORDER BY Name ASC",
        "question": "I need to see the club names listed in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM club ORDER BY Name ASC"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM club ORDER BY Name ASC",
        "question": "Could you provide the names of clubs in an ascending alphabetical sequence?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM club ORDER BY Name ASC"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM club ORDER BY Name ASC",
        "question": "Please list the names of all clubs in ascending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM club ORDER BY Name ASC"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT count(*) FROM technician",
        "question": "What is the number of technicians?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM technician"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT count(*) FROM technician",
        "question": "How many technicians are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM technician"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT count(*) FROM technician",
        "question": "Can you tell me the total count of technicians?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM technician"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT count(*) FROM technician",
        "question": "What's the total number of technicians?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM technician"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT count(*) FROM technician",
        "question": "Could you provide the count of technicians?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM technician"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT count(*) FROM technician",
        "question": "What's the count of technicians?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM technician"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
        "question": "Return the names and ids of all platforms with the download rank of 1.",
        "correctness": 1,
        "gold_parse": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
        "question": "Show me the names and ids of all platforms that have a download rank of 1.",
        "correctness": 1,
        "gold_parse": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
        "question": "Can you provide the names and ids of all platforms with a download rank of 1?",
        "correctness": 1,
        "gold_parse": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
        "question": "I want to see the names and ids of all platforms that have a download rank of 1.",
        "correctness": 1,
        "gold_parse": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
        "question": "Could you list the names and ids of all platforms with a download rank of 1?",
        "correctness": 1,
        "gold_parse": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
        "question": "Display the names and ids of all platforms that have a download rank of 1.",
        "correctness": 1,
        "gold_parse": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';",
        "question": "Find the names of all modern rooms with a base price below $160 and two beds.",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';",
        "question": "Can you list the names of all modern rooms that have two beds and a base price less than $160?",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';",
        "question": "What are the names of modern rooms that cost less than $160 and have two beds?",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';",
        "question": "Could you provide the names of all modern rooms with two beds that are priced below $160?",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';",
        "question": "I'm looking for the names of modern rooms with a base price under $160 and two beds, can you find them?",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';",
        "question": "Identify the modern rooms with two beds and a base price less than $160.",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';"
    },
    {
        "db_id": "college_2",
        "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?",
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "query": "SELECT Count ( * ) FROM classroom WHERE capacity > value AND building = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the count of rooms in the Lamberton building that can accommodate less than 50 people?",
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "query": "SELECT Count ( * ) FROM classroom WHERE capacity > value AND building = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many rooms in the Lamberton building have a capacity of less than 50?",
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "query": "SELECT Count ( * ) FROM classroom WHERE capacity > value AND building = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Can you tell me the number of rooms in the Lamberton building that hold fewer than 50 people?",
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "query": "SELECT Count ( * ) FROM classroom WHERE capacity > value AND building = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What's the total number of rooms in the Lamberton building with a capacity under 50?",
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "query": "SELECT Count ( * ) FROM classroom WHERE capacity > value AND building = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "In the Lamberton building, how many rooms are there that can hold less than 50 people?",
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "query": "SELECT Count ( * ) FROM classroom WHERE capacity > value AND building = value",
        "correctness": 0
    },
    {
        "db_id": "car_racing",
        "query": "SELECT max(Points) ,  min(Points) FROM driver",
        "question": "What are the maximum and minimum points of drivers.",
        "correctness": 1,
        "gold_parse": "SELECT max(Points) ,  min(Points) FROM driver"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT max(Points) ,  min(Points) FROM driver",
        "question": "What are the highest and lowest points scored by drivers?",
        "correctness": 1,
        "gold_parse": "SELECT max(Points) ,  min(Points) FROM driver"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT max(Points) ,  min(Points) FROM driver",
        "question": "Can you tell me the maximum and minimum points drivers have?",
        "correctness": 1,
        "gold_parse": "SELECT max(Points) ,  min(Points) FROM driver"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT max(Points) ,  min(Points) FROM driver",
        "question": "What's the range of points for drivers, from highest to lowest?",
        "correctness": 1,
        "gold_parse": "SELECT max(Points) ,  min(Points) FROM driver"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT max(Points) ,  min(Points) FROM driver",
        "question": "Could you provide the maximum and minimum points of drivers?",
        "correctness": 1,
        "gold_parse": "SELECT max(Points) ,  min(Points) FROM driver"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT max(Points) ,  min(Points) FROM driver",
        "question": "What are the peak and bottom points of drivers?",
        "correctness": 1,
        "gold_parse": "SELECT max(Points) ,  min(Points) FROM driver"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
        "question": "Show all staff names who have been both speaker and sponsor in some conference.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
        "question": "Display the names of all staff members who have served as both a speaker and a sponsor at a conference.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
        "question": "Can you list all the staff who have been a speaker and also a sponsor at any conference?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
        "question": "Who are all the staff members that have been both a speaker and a sponsor in a conference?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
        "question": "Identify all staff who have taken on the roles of both speaker and sponsor in a conference.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
        "question": "Provide the names of all staff who have acted as both a speaker and a sponsor in any conference.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "question": "Return the founded year for the school with the largest enrollment.",
        "correctness": 1,
        "gold_parse": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "question": "What is the year of establishment for the school with the highest number of students?",
        "correctness": 1,
        "gold_parse": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "question": "Can you tell me the year when the school with the most students was founded?",
        "correctness": 1,
        "gold_parse": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "question": "What year was the school with the most enrollments established?",
        "correctness": 1,
        "gold_parse": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "question": "In what year was the school with the largest student body founded?",
        "correctness": 1,
        "gold_parse": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "question": "Find the year of foundation for the school with the highest enrollment.",
        "correctness": 1,
        "gold_parse": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
    },
    {
        "db_id": "network_2",
        "question": "How many friends does Dan have?",
        "gold_parse": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "query": "SELECT Count ( * ) FROM PersonFriend WHERE friend = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the total number of friends that Dan has?",
        "gold_parse": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "query": "SELECT Count ( * ) FROM PersonFriend WHERE friend = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Can you tell me how many friends Dan has?",
        "gold_parse": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "query": "SELECT Count ( * ) FROM PersonFriend WHERE friend = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What's the count of Dan's friends?",
        "gold_parse": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "query": "SELECT Count ( * ) FROM PersonFriend WHERE friend = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Do you know the number of friends Dan has?",
        "gold_parse": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "query": "SELECT Count ( * ) FROM PersonFriend WHERE friend = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Could you tell me the quantity of Dan's friends?",
        "gold_parse": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "query": "SELECT Count ( * ) FROM PersonFriend WHERE friend = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of all people who are friends with Alice for the shortest amount of time?",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age = ( SELECT Min ( T2.year ) FROM PersonFriend AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who are the individuals that have the shortest friendship duration with Alice?",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age = ( SELECT Min ( T2.year ) FROM PersonFriend AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Can you list the people who have been friends with Alice for the least amount of time?",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age = ( SELECT Min ( T2.year ) FROM PersonFriend AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who has the shortest friendship span with Alice?",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age = ( SELECT Min ( T2.year ) FROM PersonFriend AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who has been Alice's friend for the shortest period?",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age = ( SELECT Min ( T2.year ) FROM PersonFriend AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who are the people that Alice has been friends with for the least duration?",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age = ( SELECT Min ( T2.year ) FROM PersonFriend AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code FROM weather WHERE min_temperature_f > value OR min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "In which zip codes can we find a station where the maximum temperature has reached 80 or more and on what date did this occur?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code FROM weather WHERE min_temperature_f > value OR min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Can you tell me the zip codes where a station recorded a maximum temperature of 80 or above and the date it happened?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code FROM weather WHERE min_temperature_f > value OR min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the zip codes of the stations where the temperature has gone up to at least 80 and the date of this event?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code FROM weather WHERE min_temperature_f > value OR min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Identify the zip codes where a station has reported a maximum temperature of 80 or higher and the date it was recorded.",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code FROM weather WHERE min_temperature_f > value OR min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Which zip codes have stations that have recorded a maximum temperature of at least 80 and when was this recorded?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code FROM weather WHERE min_temperature_f > value OR min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the mountain names and their altitudes in India?",
        "gold_parse": "",
        "query": "SELECT mountain_name, country_name FROM mountain WHERE country_name = 'IND';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Can you list the names and altitudes of mountains in India?",
        "gold_parse": "",
        "query": "SELECT mountain_name, country_name FROM mountain WHERE country_name = 'IND';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the names and heights of Indian mountains?",
        "gold_parse": "",
        "query": "SELECT mountain_name, country_name FROM mountain WHERE country_name = 'IND';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Could you tell me the names and altitudes of mountains located in India?",
        "gold_parse": "",
        "query": "SELECT mountain_name, country_name FROM mountain WHERE country_name = 'IND';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "I want to know the names and altitudes of mountains in India. Can you provide this information?",
        "gold_parse": "",
        "query": "SELECT mountain_name, country_name FROM mountain WHERE country_name = 'IND';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the names of mountains in India and how high are they?",
        "gold_parse": "",
        "query": "SELECT mountain_name, country_name FROM mountain WHERE country_name = 'IND';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Name all rivers longer than 500 kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "List all rivers that are more than 500 kilometers long.",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Can you show me all rivers with a length greater than 500 kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Which rivers have a length exceeding 500 kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Identify all rivers that stretch more than 500 kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "What are the rivers that are longer than 500 kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of customers with an order status of Pending, sorted by customer id?",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "query": "SELECT DISTINCT customer_name FROM Customers ORDER BY customer_id Asc",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Can you list the unique names of customers who have a pending order status, ordered by their customer id?",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "query": "SELECT DISTINCT customer_name FROM Customers ORDER BY customer_id Asc",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the different customer names with a pending order status, arranged by customer id?",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "query": "SELECT DISTINCT customer_name FROM Customers ORDER BY customer_id Asc",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Could you provide the distinct customer names with an order status of Pending, sorted according to customer id?",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "query": "SELECT DISTINCT customer_name FROM Customers ORDER BY customer_id Asc",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Show me the unique customer names who have their order status as Pending, sorted by customer id.",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "query": "SELECT DISTINCT customer_name FROM Customers ORDER BY customer_id Asc",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the individual customer names with a Pending order status, sorted in the order of customer id?",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "query": "SELECT DISTINCT customer_name FROM Customers ORDER BY customer_id Asc",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
        "question": "Find the list of attribute data types possessed by more than 3 attribute definitions.",
        "correctness": 1,
        "gold_parse": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
        "question": "Identify the attribute data types that are used by more than three attribute definitions.",
        "correctness": 1,
        "gold_parse": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
        "question": "Can you show me the attribute data types that are associated with over three attribute definitions?",
        "correctness": 1,
        "gold_parse": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
        "question": "What are the attribute data types that are linked to more than three attribute definitions?",
        "correctness": 1,
        "gold_parse": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
        "question": "Which attribute data types are connected to more than three attribute definitions?",
        "correctness": 1,
        "gold_parse": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
        "question": "Provide a list of attribute data types that are related to more than three attribute definitions.",
        "correctness": 1,
        "gold_parse": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;",
        "question": "How many concerts are there for each concert name?",
        "correctness": 1,
        "gold_parse": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;",
        "question": "What is the count of concerts for each concert name?",
        "correctness": 1,
        "gold_parse": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;",
        "question": "Can you tell me the number of concerts for each concert name?",
        "correctness": 1,
        "gold_parse": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;",
        "question": "What's the total number of concerts per concert name?",
        "correctness": 1,
        "gold_parse": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;",
        "question": "Could you provide the count of concerts by concert name?",
        "correctness": 1,
        "gold_parse": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;",
        "question": "How many concerts are organized for each concert name?",
        "correctness": 1,
        "gold_parse": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;"
    },
    {
        "db_id": "music_4",
        "question": "What are the famous titles of artists who do not have any volumes?",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
        "query": "SELECT Famous_Title FROM artist EXCEPT SELECT Famous_Title FROM artist",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Can you list the popular titles of artists who have no volumes?",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
        "query": "SELECT Famous_Title FROM artist EXCEPT SELECT Famous_Title FROM artist",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the renowned titles of artists without any volumes?",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
        "query": "SELECT Famous_Title FROM artist EXCEPT SELECT Famous_Title FROM artist",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Could you tell me the well-known titles of artists who don't have any volumes?",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
        "query": "SELECT Famous_Title FROM artist EXCEPT SELECT Famous_Title FROM artist",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the notable titles of artists who have zero volumes?",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
        "query": "SELECT Famous_Title FROM artist EXCEPT SELECT Famous_Title FROM artist",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Can you name the celebrated titles of artists who lack volumes?",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
        "query": "SELECT Famous_Title FROM artist EXCEPT SELECT Famous_Title FROM artist",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the completion dates of all the tests that have result \"Fail\"?",
        "gold_parse": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id WHERE T3.test_result = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Can you list the dates when all the tests with a 'Fail' result were completed?",
        "gold_parse": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id WHERE T3.test_result = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the dates of completion for all tests that resulted in 'Fail'?",
        "gold_parse": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id WHERE T3.test_result = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Could you tell me the completion dates for all tests that have 'Fail' as a result?",
        "gold_parse": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id WHERE T3.test_result = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "I'd like to know the completion dates for all tests that failed.",
        "gold_parse": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id WHERE T3.test_result = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "When were all the tests that have a 'Fail' result completed?",
        "gold_parse": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id WHERE T3.test_result = value",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');",
        "question": "What are the names of singers who are the same age as Hank?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');",
        "question": "Can you list the singers who have the same age as Hank?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');",
        "question": "Who are the singers that are the same age as Hank?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');",
        "question": "Could you tell me the names of singers who are as old as Hank?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');",
        "question": "I'd like to know the singers who are the same age as Hank.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');",
        "question": "Which singers have the same age as Hank?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
        "question": "How many models do not have the wifi function?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
        "question": "What is the count of models without wifi capability?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
        "question": "Can you tell me the number of models that lack wifi functionality?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
        "question": "How many models are there that don't support wifi?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
        "question": "What's the total number of models that don't have wifi?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
        "question": "Can you count the models that don't come with wifi?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'"
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_pounds ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What is the mean and lowest cost (in Euro) of all items?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_pounds ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Can you tell me the average and minimum cost (in Euro) of all goods?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_pounds ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What's the average and least price (in Euro) for all products?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_pounds ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Could you provide the average and minimum pricing (in Euro) of all products?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_pounds ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the mean and lowest value (in Euro) of all items?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_pounds ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "gold_parse": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "query": "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Can you tell me the semesters where no students are enrolled?",
        "gold_parse": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "query": "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Which semesters have zero student enrollment?",
        "gold_parse": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "query": "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Identify the semesters with no student registrations.",
        "gold_parse": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "query": "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the semesters with no students enrolled?",
        "gold_parse": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "query": "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "List the semesters that have no student enrollments.",
        "gold_parse": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "query": "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
        "question": "List the manufacturers that are associated with more than one club.",
        "correctness": 1,
        "gold_parse": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
        "question": "Show the manufacturers that are linked with more than one club.",
        "correctness": 1,
        "gold_parse": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
        "question": "Can you provide the manufacturers that are connected to more than one club?",
        "correctness": 1,
        "gold_parse": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
        "question": "Which manufacturers are associated with more than a single club?",
        "correctness": 1,
        "gold_parse": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
        "question": "Identify the manufacturers that have associations with more than one club.",
        "correctness": 1,
        "gold_parse": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
        "question": "Display the manufacturers that have links with multiple clubs.",
        "correctness": 1,
        "gold_parse": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "question": "Which destination has least number of flights?",
        "correctness": 1,
        "gold_parse": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "question": "What destination is served by the fewest flights?",
        "correctness": 1,
        "gold_parse": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "question": "Which location has the smallest number of flights?",
        "correctness": 1,
        "gold_parse": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "question": "What is the destination with the minimum number of flights?",
        "correctness": 1,
        "gold_parse": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "question": "Which destination is least frequented by flights?",
        "correctness": 1,
        "gold_parse": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "question": "What destination has the lowest flight count?",
        "correctness": 1,
        "gold_parse": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "twitter_1",
        "question": "Find the name and partition id for users who tweeted less than twice.",
        "gold_parse": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "query": "SELECT T2.name , T2.partitionid FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Retrieve the name and partition id of users who have tweeted fewer than two times.",
        "gold_parse": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "query": "SELECT T2.name , T2.partitionid FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Can you show me the name and partition id for users with less than two tweets?",
        "gold_parse": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "query": "SELECT T2.name , T2.partitionid FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "I need the name and partition id for users who have not tweeted more than once.",
        "gold_parse": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "query": "SELECT T2.name , T2.partitionid FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "What are the names and partition ids of users who tweeted less than twice?",
        "gold_parse": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "query": "SELECT T2.name , T2.partitionid FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Could you find the name and partition id for users who have tweeted one time or not at all?",
        "gold_parse": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "query": "SELECT T2.name , T2.partitionid FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Return the last name, id and phone number of the customer who has made the greatest number of orders.",
        "gold_parse": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT customer_last_name , phone_number , customer_id FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Who is the customer with the highest number of orders? Provide their last name, id, and phone number.",
        "gold_parse": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT customer_last_name , phone_number , customer_id FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Can you show me the last name, id, and phone number of the customer who has placed the most orders?",
        "gold_parse": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT customer_last_name , phone_number , customer_id FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "I need the last name, id, and phone number of the customer who has the most orders.",
        "gold_parse": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT customer_last_name , phone_number , customer_id FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Who has made the most orders? I need their last name, id, and phone number.",
        "gold_parse": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT customer_last_name , phone_number , customer_id FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Provide the last name, id, and phone number of the customer with the maximum number of orders.",
        "gold_parse": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT customer_last_name , phone_number , customer_id FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location codes with at least 3 documents.",
        "gold_parse": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3",
        "query": "SELECT T2.Location_Code FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T1.Location_Code HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Display the location codes that have a minimum of 3 documents.",
        "gold_parse": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3",
        "query": "SELECT T2.Location_Code FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T1.Location_Code HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Can you list the location codes where the document count is three or more?",
        "gold_parse": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3",
        "query": "SELECT T2.Location_Code FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T1.Location_Code HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "I want to see the location codes that are associated with at least three documents.",
        "gold_parse": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3",
        "query": "SELECT T2.Location_Code FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T1.Location_Code HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show me the location codes that have three or more documents.",
        "gold_parse": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3",
        "query": "SELECT T2.Location_Code FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T1.Location_Code HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the location codes that have at least three documents?",
        "gold_parse": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3",
        "query": "SELECT T2.Location_Code FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T1.Location_Code HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "question": "How many students are affected by cat allergies?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "question": "What is the count of students suffering from cat allergies?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "question": "Can you tell me the number of students who have cat allergies?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "question": "What's the total number of students with cat allergies?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "question": "How many students have been diagnosed with allergies to cats?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "question": "What is the total count of students who are allergic to cats?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"",
        "question": "Find the titles of papers whose first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"?",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"",
        "question": "What are the titles of papers where the first author's last name is 'Ohori' and their institution is based in Japan?",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"",
        "question": "Can you list the titles of papers that have 'Ohori' as the first author and are affiliated with a Japanese institution?",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"",
        "question": "Show me the titles of papers where the first author, with the last name 'Ohori', is associated with an institution in Japan.",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"",
        "question": "I'm looking for the titles of papers where the first author's surname is 'Ohori' and they are affiliated with a Japanese institution.",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"",
        "question": "Could you provide the titles of papers where the first author is 'Ohori' and their institution is located in Japan?",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\""
    },
    {
        "db_id": "match_season",
        "question": "What are the draft pick numbers and draft classes for players who play the Defender position?",
        "gold_parse": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "query": "SELECT Draft_Pick_Number , Season FROM match_season WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Can you list the draft pick numbers and draft classes for individuals playing in the Defender position?",
        "gold_parse": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "query": "SELECT Draft_Pick_Number , Season FROM match_season WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the draft classes and pick numbers for players in the Defender role?",
        "gold_parse": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "query": "SELECT Draft_Pick_Number , Season FROM match_season WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Could you provide the draft pick numbers and draft classes for players who are Defenders?",
        "gold_parse": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "query": "SELECT Draft_Pick_Number , Season FROM match_season WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "I'd like to know the draft pick numbers and draft classes for players in the Defender position.",
        "gold_parse": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "query": "SELECT Draft_Pick_Number , Season FROM match_season WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Can I get the draft classes and pick numbers for those who play as Defenders?",
        "gold_parse": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "query": "SELECT Draft_Pick_Number , Season FROM match_season WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "art_1",
        "query": "SELECT medium FROM paintings WHERE paintingID  =  80",
        "question": "What are the medium types of the painting with id = 80",
        "correctness": 1,
        "gold_parse": "SELECT medium FROM paintings WHERE paintingID  =  80"
    },
    {
        "db_id": "art_1",
        "query": "SELECT medium FROM paintings WHERE paintingID  =  80",
        "question": "What medium was used for the painting with an id of 80?",
        "correctness": 1,
        "gold_parse": "SELECT medium FROM paintings WHERE paintingID  =  80"
    },
    {
        "db_id": "art_1",
        "query": "SELECT medium FROM paintings WHERE paintingID  =  80",
        "question": "Can you tell me the medium types of the painting that has an id of 80?",
        "correctness": 1,
        "gold_parse": "SELECT medium FROM paintings WHERE paintingID  =  80"
    },
    {
        "db_id": "art_1",
        "query": "SELECT medium FROM paintings WHERE paintingID  =  80",
        "question": "What are the types of medium used in the painting with id 80?",
        "correctness": 1,
        "gold_parse": "SELECT medium FROM paintings WHERE paintingID  =  80"
    },
    {
        "db_id": "art_1",
        "query": "SELECT medium FROM paintings WHERE paintingID  =  80",
        "question": "What kind of medium was used in the painting with the id 80?",
        "correctness": 1,
        "gold_parse": "SELECT medium FROM paintings WHERE paintingID  =  80"
    },
    {
        "db_id": "art_1",
        "query": "SELECT medium FROM paintings WHERE paintingID  =  80",
        "question": "Could you tell me the medium types for the painting with id 80?",
        "correctness": 1,
        "gold_parse": "SELECT medium FROM paintings WHERE paintingID  =  80"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "What are the names of the youngest singers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "Who are the most junior singers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "Can you list the names of the youngest vocalists?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "Who are the singers with the least age?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "Identify the youngest individuals in the singing profession.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "Who are the least aged singers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "student_assessment",
        "question": "How many students attend course English?",
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "query": "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What is the total number of students enrolled in the English course?",
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "query": "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Can you tell me the count of students taking the English course?",
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "query": "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What's the student count for the English course?",
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "query": "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "How many students are there in the English course?",
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "query": "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What is the enrollment number for the English course?",
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "query": "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of paragraphs.",
        "gold_parse": "SELECT count(*) FROM Paragraphs",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many paragraphs are there?",
        "gold_parse": "SELECT count(*) FROM Paragraphs",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Can you tell me the total number of paragraphs?",
        "gold_parse": "SELECT count(*) FROM Paragraphs",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the count of paragraphs?",
        "gold_parse": "SELECT count(*) FROM Paragraphs",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Determine the number of paragraphs.",
        "gold_parse": "SELECT count(*) FROM Paragraphs",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What's the total count of paragraphs?",
        "gold_parse": "SELECT count(*) FROM Paragraphs",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the lowest population density in states larger than 500 square kilometers?",
        "gold_parse": "",
        "query": "SELECT AVG(density) FROM state WHERE area > 500;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What's the smallest population density in states with an area greater than 500 square kilometers?",
        "gold_parse": "",
        "query": "SELECT AVG(density) FROM state WHERE area > 500;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Can you find the minimum population density in states that are over 500 square kilometers?",
        "gold_parse": "",
        "query": "SELECT AVG(density) FROM state WHERE area > 500;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the least population density in states exceeding 500 square kilometers in size?",
        "gold_parse": "",
        "query": "SELECT AVG(density) FROM state WHERE area > 500;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Identify the lowest population density in states larger than 500 square kilometers.",
        "gold_parse": "",
        "query": "SELECT AVG(density) FROM state WHERE area > 500;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the minimum population density in states that have an area more than 500 square kilometers?",
        "gold_parse": "",
        "query": "SELECT AVG(density) FROM state WHERE area > 500;",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "question": "Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.",
        "correctness": 1,
        "gold_parse": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "question": "What is the title and id of the movie that is rented for 0.99 and has less than 3 copies in stock?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "question": "Can you provide the film title and id for the movie that costs 0.99 to rent and has an inventory of less than 3?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "question": "Identify the movie that has a rental fee of 0.99 and less than 3 items in the inventory. Provide the film title and id.",
        "correctness": 1,
        "gold_parse": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "question": "Which movie, with a rental price of 0.99 and less than 3 in stock, can you give me the title and id for?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "question": "What's the title and id of the film that is available for rent at 0.99 and has less than 3 copies left?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee WHERE salary  >  100000",
        "question": "Show ids for all employees with at least 100000 salary.",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee WHERE salary  >  100000",
        "question": "Display the ids of all employees earning a salary of 100000 or more.",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee WHERE salary  >  100000",
        "question": "Can you list the ids of all employees who have a salary of at least 100000?",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee WHERE salary  >  100000",
        "question": "Provide the ids for all employees whose salary is 100000 or above.",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee WHERE salary  >  100000",
        "question": "I want to see the ids of all employees with a salary that's not less than 100000.",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee WHERE salary  >  100000",
        "question": "Show me the employee ids for those earning 100000 or more in salary.",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000"
    },
    {
        "db_id": "student_1",
        "question": "For each classroom, report the classroom number and the number of grades using it.",
        "gold_parse": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Can you provide the classroom number and the count of grades using each classroom?",
        "gold_parse": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "I need to know the classroom number and how many grades are using it for each classroom.",
        "gold_parse": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "For every classroom, could you tell me the classroom number and the number of grades using it?",
        "gold_parse": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What is the classroom number and the number of grades using it for each classroom?",
        "gold_parse": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Could you list the classroom number and the number of grades using it for all classrooms?",
        "gold_parse": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
        "question": "What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?",
        "correctness": 1,
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
        "question": "Which zip codes have a mean humidity less than 70 and have experienced a minimum of 100 trips?",
        "correctness": 1,
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
        "question": "Can you list the zip codes where the average humidity is under 70 and more than 100 trips have been made?",
        "correctness": 1,
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
        "question": "What are the zip codes where the average humidity is less than 70 and the number of trips is not less than 100?",
        "correctness": 1,
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
        "question": "Could you tell me the zip codes that have an average humidity of less than 70 and have had at least 100 trips?",
        "correctness": 1,
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
        "question": "Identify the zip codes with an average humidity below 70 and a trip count of at least 100.",
        "correctness": 1,
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
        "question": "Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?",
        "correctness": 1,
        "gold_parse": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
        "question": "Can you provide the dates and names of the exams that are not related to the subject code 'Database'?",
        "correctness": 1,
        "gold_parse": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
        "question": "What are the names and dates of the exams that don't have the subject code 'Database'?",
        "correctness": 1,
        "gold_parse": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
        "question": "Could you list the exam names and dates for exams not associated with the 'Database' subject code?",
        "correctness": 1,
        "gold_parse": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
        "question": "I need to know the dates and names of exams that aren't for the subject code 'Database'.",
        "correctness": 1,
        "gold_parse": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
        "question": "Show me the exam names and dates for exams that don't have 'Database' as their subject code.",
        "correctness": 1,
        "gold_parse": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
        "question": "Count the number of different customers who have bought a Monitor Product.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
        "question": "How many unique customers have purchased a Monitor Product?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
        "question": "What is the total number of distinct customers who have bought a Monitor Product?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
        "question": "Can you tell me the count of different customers who have acquired a Monitor Product?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
        "question": "Determine the number of individual customers who have bought a Monitor Product.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
        "question": "What's the count of unique customers who have purchased a Monitor Product?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\""
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)",
        "question": "What is the process name for the next process of the process with id 9?",
        "correctness": 1,
        "gold_parse": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)",
        "question": "Can you tell me the name of the process that follows the process with id 9?",
        "correctness": 1,
        "gold_parse": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)",
        "question": "What's the name of the process that comes after the process with id 9?",
        "correctness": 1,
        "gold_parse": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)",
        "question": "What do we call the process that is next in line after the process with id 9?",
        "correctness": 1,
        "gold_parse": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)",
        "question": "What is the subsequent process name for the process with id 9?",
        "correctness": 1,
        "gold_parse": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)",
        "question": "What is the name of the process that is next to the process with id 9?",
        "correctness": 1,
        "gold_parse": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "question": "On what dates were employees without the letter M in their first names hired?",
        "correctness": 1,
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "question": "Can you tell me the hiring dates for employees whose first names do not contain the letter M?",
        "correctness": 1,
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "question": "What are the hire dates for employees with no M in their first names?",
        "correctness": 1,
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "question": "Could you provide the dates of hiring for employees whose first names do not have the letter M?",
        "correctness": 1,
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "question": "I'd like to know the dates employees were hired whose first names do not include the letter M.",
        "correctness": 1,
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "question": "What are the dates when employees, whose first names do not have an M, were hired?",
        "correctness": 1,
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "question": "What are the names of teams that do no have match season record?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "question": "Can you list the teams that don't have a match season record?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "question": "Which teams lack a match season record?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "question": "Could you tell me the names of teams without a match season record?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "question": "I'm looking for teams that have no match season record, can you name them?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "question": "What teams are missing a match season record?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)"
    },
    {
        "db_id": "geography",
        "question": "What are the highest points in each state?",
        "gold_parse": "",
        "query": "SELECT state_name FROM highlow WHERE lowest_point = 'Death Valley';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What's the peak elevation in every state?",
        "gold_parse": "",
        "query": "SELECT state_name FROM highlow WHERE lowest_point = 'Death Valley';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Can you list the maximum elevations for all states?",
        "gold_parse": "",
        "query": "SELECT state_name FROM highlow WHERE lowest_point = 'Death Valley';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the tallest points in each state?",
        "gold_parse": "",
        "query": "SELECT state_name FROM highlow WHERE lowest_point = 'Death Valley';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the peak heights in every state?",
        "gold_parse": "",
        "query": "SELECT state_name FROM highlow WHERE lowest_point = 'Death Valley';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Can you tell me the highest elevations in all states?",
        "gold_parse": "",
        "query": "SELECT state_name FROM highlow WHERE lowest_point = 'Death Valley';",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "List the name, origin and owner of each program.",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "query": "SELECT T2.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Provide the name, origin, and owner of each program.",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "query": "SELECT T2.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Can you show the name, origin, and owner for every program?",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "query": "SELECT T2.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "I want to see the name, origin, and owner of all programs.",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "query": "SELECT T2.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Display the name, origin, and owner of each program.",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "query": "SELECT T2.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Could you list the program's name, its origin, and its owner?",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "query": "SELECT T2.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the names of the members that have never registered at any branch?",
        "gold_parse": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "query": "SELECT Name FROM member EXCEPT SELECT Name FROM member",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Can you list the members who have not registered at any branch?",
        "gold_parse": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "query": "SELECT Name FROM member EXCEPT SELECT Name FROM member",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Who are the members that have no registration at any branch?",
        "gold_parse": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "query": "SELECT Name FROM member EXCEPT SELECT Name FROM member",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Could you tell me the names of the members who haven't registered at any branch?",
        "gold_parse": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "query": "SELECT Name FROM member EXCEPT SELECT Name FROM member",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Identify the members who have never registered at any branch.",
        "gold_parse": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "query": "SELECT Name FROM member EXCEPT SELECT Name FROM member",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Which members have never registered at any branch?",
        "gold_parse": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "query": "SELECT Name FROM member EXCEPT SELECT Name FROM member",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the names of counties that have at least two delegates.",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "query": "SELECT County_name FROM county GROUP BY County_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Display the names of counties with two or more delegates.",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "query": "SELECT County_name FROM county GROUP BY County_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Can you list the counties that have two or more delegates?",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "query": "SELECT County_name FROM county GROUP BY County_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which counties have at least two delegates?",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "query": "SELECT County_name FROM county GROUP BY County_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Identify the counties that have a minimum of two delegates.",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "query": "SELECT County_name FROM county GROUP BY County_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "What are the names of the counties that have two delegates or more?",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "query": "SELECT County_name FROM county GROUP BY County_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "In which zip codes can we find a station where the maximum temperature has reached or exceeded 80 and on what date did this occur?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Can you tell me the zip codes where a station recorded a maximum temperature of 80 or more and the date it happened?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the zip codes of the stations where the temperature has gone up to at least 80 and the date when this happened?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Identify the zip codes where a station has reported a maximum temperature of 80 or above and the date of this occurrence.",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Which zip codes have stations that recorded a maximum temperature of at least 80 and when was this recorded?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T1.catalog_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Can you list the names and capacities of catalog contents priced over 700 dollars?",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T1.catalog_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the names and capacities of the catalog contents that cost more than 700 dollars?",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T1.catalog_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Could you show me the catalog entries with a price higher than 700 dollars along with their capacities?",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T1.catalog_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "I'd like to see the catalog contents that are priced above 700 dollars. Can you display their names and capacities?",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T1.catalog_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which items in the catalog that are priced over 700 dollars can you show me, along with their capacities?",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T1.catalog_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the average rating and resolution of songs that are in Bangla?",
        "gold_parse": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "query": "SELECT Avg ( rating ) , Avg ( resolution ) FROM song",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the mean rating and resolution for songs in the Bangla language?",
        "gold_parse": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "query": "SELECT Avg ( rating ) , Avg ( resolution ) FROM song",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Can you tell me the average rating and resolution for Bangla songs?",
        "gold_parse": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "query": "SELECT Avg ( rating ) , Avg ( resolution ) FROM song",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What's the average rating and resolution of Bangla music tracks?",
        "gold_parse": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "query": "SELECT Avg ( rating ) , Avg ( resolution ) FROM song",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Could you provide the average rating and resolution of songs sung in Bangla?",
        "gold_parse": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "query": "SELECT Avg ( rating ) , Avg ( resolution ) FROM song",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "I'd like to know the average rating and resolution of songs that are in the Bangla language.",
        "gold_parse": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "query": "SELECT Avg ( rating ) , Avg ( resolution ) FROM song",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "When did the staff member named Janessa Sawayn join the company?",
        "gold_parse": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"",
        "query": "SELECT date_left_staff FROM Staff WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "What is the joining date of the employee named Janessa Sawayn?",
        "gold_parse": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"",
        "query": "SELECT date_left_staff FROM Staff WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "Can you tell me when Janessa Sawayn started working at the company?",
        "gold_parse": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"",
        "query": "SELECT date_left_staff FROM Staff WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "When was Janessa Sawayn's first day at the company?",
        "gold_parse": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"",
        "query": "SELECT date_left_staff FROM Staff WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "What was the date when Janessa Sawayn was hired?",
        "gold_parse": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"",
        "query": "SELECT date_left_staff FROM Staff WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "When did Janessa Sawayn become a part of the company?",
        "gold_parse": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"",
        "query": "SELECT date_left_staff FROM Staff WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Show the three highest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the top three support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "List the three greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Can you provide the top three support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Display the three largest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
        "question": "What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
        "question": "Can you provide the first and last names of artists who have created artworks using both oil and lithographic mediums?",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
        "question": "Who are the artists, by first and last name, that have paintings in both oil and lithographic mediums?",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
        "question": "I need the first and last names of artists who have used both oil and lithographic mediums in their paintings.",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
        "question": "Could you list the artists with both oil and lithographic medium paintings by their first and last names?",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
        "question": "What are the names of the artists who have paintings in both oil and lithographic mediums?",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\""
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');",
        "question": "What are the names of conductors that have the same name as 'Emma'?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');",
        "question": "Can you list the conductors who are named 'Emma'?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');",
        "question": "Who are the conductors with the name 'Emma'?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');",
        "question": "Could you tell me the conductors that go by the name 'Emma'?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');",
        "question": "I'm looking for conductors named 'Emma', can you help?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');",
        "question": "Which conductors have 'Emma' as their name?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');"
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Show the job title and the difference between the lowest and highest salaries for jobs with a maximum salary between 12000 and 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you provide the job title and the salary range for jobs where the maximum salary is between 12000 and 18000?",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "I want to see the job title and the gap between the minimum and maximum salaries for jobs that have a maximum salary within 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Display the job title and the salary difference for jobs where the maximum salary falls between 12000 and 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Could you list the job title and the difference between the minimum and maximum salaries for jobs with a maximum salary in the range of 12000 to 18000?",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the most common type of Status across cities.",
        "correctness": 1,
        "gold_parse": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most frequent Status type in different cities?",
        "correctness": 1,
        "gold_parse": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Can you show me the most prevalent Status type across various cities?",
        "correctness": 1,
        "gold_parse": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What type of Status is most common in all cities?",
        "correctness": 1,
        "gold_parse": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Identify the most common type of Status in each city.",
        "correctness": 1,
        "gold_parse": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which Status type is most frequently seen across cities?",
        "correctness": 1,
        "gold_parse": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
        "question": "Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
        "question": "What are the names of the campuses located in Northridge, Los Angeles or San Francisco, San Francisco?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
        "question": "Can you list the campuses that are in Northridge, Los Angeles or San Francisco, San Francisco?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
        "question": "Identify the campuses situated in Northridge, Los Angeles or San Francisco, San Francisco.",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
        "question": "Which campuses are in Northridge, Los Angeles or San Francisco, San Francisco?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
        "question": "Provide the names of the campuses in Northridge, Los Angeles or San Francisco, San Francisco.",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
        "question": "What is the product id and product name for the cheapest Hardware type product?",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
        "question": "Can you tell me the product id and product name of the least expensive Hardware type product?",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
        "question": "What are the product id and product name of the Hardware type product with the lowest price?",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
        "question": "Could you provide the product id and product name for the most affordable Hardware type product?",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
        "question": "I need the product id and product name for the Hardware type product that costs the least.",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
        "question": "What's the product id and product name for the Hardware type product that is priced the lowest?",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "What is the product name and the color of the ordered items which have been shipped?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "Can you tell me the name and color of the products that have been shipped?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "What are the names and colors of the items that have been dispatched?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "Could you provide the product name and color of the items that have been sent?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "I'd like to know the name and color of the products that have been shipped.",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "What's the name and color of the shipped items?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the average order quantity per order.",
        "gold_parse": "SELECT avg(order_quantity) FROM order_items",
        "query": "SELECT Avg ( payment_method ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the mean quantity of each order?",
        "gold_parse": "SELECT avg(order_quantity) FROM order_items",
        "query": "SELECT Avg ( payment_method ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Can you calculate the average quantity for each order?",
        "gold_parse": "SELECT avg(order_quantity) FROM order_items",
        "query": "SELECT Avg ( payment_method ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What's the average number of items per order?",
        "gold_parse": "SELECT avg(order_quantity) FROM order_items",
        "query": "SELECT Avg ( payment_method ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Determine the average amount of items in each order.",
        "gold_parse": "SELECT avg(order_quantity) FROM order_items",
        "query": "SELECT Avg ( payment_method ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Could you find out the average quantity in every order?",
        "gold_parse": "SELECT avg(order_quantity) FROM order_items",
        "query": "SELECT Avg ( payment_method ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "question": "How many products were not included in any order?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "question": "What is the count of products that have never been ordered?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "question": "Can you tell me the number of products that were never part of an order?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "question": "What's the total number of products that haven't been included in any orders?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "question": "How many products have never been included in any orders?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "question": "What is the quantity of products that were never ordered?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
        "question": "What is the name of the county with the greatest population?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
        "question": "Which county has the highest population?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
        "question": "Can you tell me the name of the county with the most population?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
        "question": "What's the name of the most populated county?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
        "question": "Identify the county with the maximum population.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
        "question": "Which is the most populous county?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "program_share",
        "question": "Count the number of distinct channel owners.",
        "gold_parse": "SELECT count(DISTINCT OWNER) FROM channel",
        "query": "SELECT Count ( * ) FROM program",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "How many unique channel owners are there?",
        "gold_parse": "SELECT count(DISTINCT OWNER) FROM channel",
        "query": "SELECT Count ( * ) FROM program",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "What is the total number of different channel owners?",
        "gold_parse": "SELECT count(DISTINCT OWNER) FROM channel",
        "query": "SELECT Count ( * ) FROM program",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Can you tell me the count of distinct channel owners?",
        "gold_parse": "SELECT count(DISTINCT OWNER) FROM channel",
        "query": "SELECT Count ( * ) FROM program",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "What's the count of unique channel owners?",
        "gold_parse": "SELECT count(DISTINCT OWNER) FROM channel",
        "query": "SELECT Count ( * ) FROM program",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Determine the number of distinct channel owners.",
        "gold_parse": "SELECT count(DISTINCT OWNER) FROM channel",
        "query": "SELECT Count ( * ) FROM program",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "List the names, color descriptions and product descriptions of products with category \"Herbs\".",
        "gold_parse": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
        "query": "SELECT T2.product_name , T1.other_characteristic_details , T2.product_description FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_category_code = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Show the names, color descriptions, and product descriptions for items in the 'Herbs' category.",
        "gold_parse": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
        "query": "SELECT T2.product_name , T1.other_characteristic_details , T2.product_description FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_category_code = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Can you provide the names, color details, and product descriptions for products categorized as 'Herbs'?",
        "gold_parse": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
        "query": "SELECT T2.product_name , T1.other_characteristic_details , T2.product_description FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_category_code = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "I need the names, color descriptions, and product descriptions of all 'Herbs' category products.",
        "gold_parse": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
        "query": "SELECT T2.product_name , T1.other_characteristic_details , T2.product_description FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_category_code = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, color descriptions, and product descriptions of products in the 'Herbs' category?",
        "gold_parse": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
        "query": "SELECT T2.product_name , T1.other_characteristic_details , T2.product_description FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_category_code = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Display the names, color descriptions, and product descriptions of products under the 'Herbs' category.",
        "gold_parse": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
        "query": "SELECT T2.product_name , T1.other_characteristic_details , T2.product_description FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_category_code = value",
        "correctness": 0
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
        "question": "Show names for all cities where at least three students live.",
        "correctness": 1,
        "gold_parse": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
        "question": "Display the names of all cities where the number of students living is three or more.",
        "correctness": 1,
        "gold_parse": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
        "question": "Can you list the cities where the student population is at least three?",
        "correctness": 1,
        "gold_parse": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
        "question": "What are the names of cities where three or more students reside?",
        "correctness": 1,
        "gold_parse": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
        "question": "Identify all cities where the count of students is not less than three.",
        "correctness": 1,
        "gold_parse": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
        "question": "Provide the names of all cities that have a minimum of three students living in them.",
        "correctness": 1,
        "gold_parse": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
        "question": "Which store has the headphones in stock? Give me the store name and the total quantity.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
        "question": "Can you tell me which store currently has headphones available and their total quantity?",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
        "question": "What is the name of the store that has headphones in stock and how many do they have?",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
        "question": "Which store is carrying headphones and what is the total quantity?",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
        "question": "I'd like to know the store that has headphones in stock and the total quantity they have.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
        "question": "Could you provide the name of the store with headphones in stock and the total quantity?",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1"
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many feature types does each property have?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_id = Ref_Feature_Types.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the count of feature types for each property?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_id = Ref_Feature_Types.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Can you tell me the number of feature types each property possesses?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_id = Ref_Feature_Types.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What's the total number of feature types per property?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_id = Ref_Feature_Types.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many different types of features does each property have?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_id = Ref_Feature_Types.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the quantity of feature types that each property has?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_id = Ref_Feature_Types.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Show the details of all trucks in the order of their license number.",
        "gold_parse": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
        "query": "SELECT truck_details FROM Trucks ORDER BY truck_details Asc",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Display all truck details sorted by their license number.",
        "gold_parse": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
        "query": "SELECT truck_details FROM Trucks ORDER BY truck_details Asc",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Can you list all the trucks in the order of their license number?",
        "gold_parse": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
        "query": "SELECT truck_details FROM Trucks ORDER BY truck_details Asc",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "I want to see all truck information arranged by license number.",
        "gold_parse": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
        "query": "SELECT truck_details FROM Trucks ORDER BY truck_details Asc",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Provide all truck details in ascending order of their license numbers.",
        "gold_parse": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
        "query": "SELECT truck_details FROM Trucks ORDER BY truck_details Asc",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Show me all the trucks, ordered by their license number.",
        "gold_parse": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
        "query": "SELECT truck_details FROM Trucks ORDER BY truck_details Asc",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average duration of songs that have mp3 format and resolution below 800?",
        "gold_parse": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "query": "SELECT Avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What's the mean length of songs in mp3 format with a resolution less than 800?",
        "gold_parse": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "query": "SELECT Avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Can you tell me the average length of mp3 songs with a resolution under 800?",
        "gold_parse": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "query": "SELECT Avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the mean duration of mp3 songs that have a resolution lower than 800?",
        "gold_parse": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "query": "SELECT Avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Could you find the average time of songs in mp3 format with a resolution below 800?",
        "gold_parse": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "query": "SELECT Avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average time span of songs that are in mp3 format and have a resolution less than 800?",
        "gold_parse": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "query": "SELECT Avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;",
        "question": "What are the titles of papers and their associated keyphrases?",
        "correctness": 1,
        "gold_parse": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;",
        "question": "Can you list the titles of papers along with their keyphrases?",
        "correctness": 1,
        "gold_parse": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;",
        "question": "What are the keyphrases associated with each paper title?",
        "correctness": 1,
        "gold_parse": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;",
        "question": "Could you provide the titles of papers and their corresponding keyphrases?",
        "correctness": 1,
        "gold_parse": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;",
        "question": "I need to know the titles of papers and their related keyphrases.",
        "correctness": 1,
        "gold_parse": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;",
        "question": "Show me the titles of papers and their respective keyphrases.",
        "correctness": 1,
        "gold_parse": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "Find the contents that are stored in both Chicago and New York.",
        "correctness": 1,
        "gold_parse": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "Identify the contents that are present in both Chicago and New York.",
        "correctness": 1,
        "gold_parse": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "What are the contents stored in both New York and Chicago?",
        "correctness": 1,
        "gold_parse": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "Can you show me the contents that are in both New York and Chicago?",
        "correctness": 1,
        "gold_parse": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "What contents are found in both Chicago and New York?",
        "correctness": 1,
        "gold_parse": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "Could you find the contents that are stored in both Chicago and New York?",
        "correctness": 1,
        "gold_parse": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year < 2010;",
        "question": "What are the titles of papers published before 2010?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year < 2010;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year < 2010;",
        "question": "Can you list the titles of papers that were published prior to 2010?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year < 2010;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year < 2010;",
        "question": "What are the names of papers that came out before 2010?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year < 2010;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year < 2010;",
        "question": "Could you provide the titles of papers published earlier than 2010?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year < 2010;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year < 2010;",
        "question": "I'm interested in the titles of papers published before the year 2010. Can you provide them?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year < 2010;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year < 2010;",
        "question": "What are the paper titles that were published before the year 2010?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year < 2010;"
    },
    {
        "db_id": "twitter_1",
        "question": "Find the name and email of the user followed by the least number of people.",
        "gold_parse": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
        "query": "SELECT T2.name , T2.email FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.text ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Who is the user with the least number of followers, and what is their email?",
        "gold_parse": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
        "query": "SELECT T2.name , T2.email FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.text ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Can you provide the name and email of the user who has the fewest followers?",
        "gold_parse": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
        "query": "SELECT T2.name , T2.email FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.text ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "What is the name and email of the user who is followed by the smallest number of people?",
        "gold_parse": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
        "query": "SELECT T2.name , T2.email FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.text ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Identify the user with the least followers and provide their name and email.",
        "gold_parse": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
        "query": "SELECT T2.name , T2.email FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.text ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Who is the least followed user and what is their email address?",
        "gold_parse": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
        "query": "SELECT T2.name , T2.email FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.text ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT start_station_id FROM trip WHERE duration > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Can you provide the ids for all trips that occurred in a zip code area where the average mean temperature exceeded 60?",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT start_station_id FROM trip WHERE duration > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids for all the trips in zip code areas with an average mean temperature over 60?",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT start_station_id FROM trip WHERE duration > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "I need the ids for all trips in zip code areas where the average mean temperature is above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT start_station_id FROM trip WHERE duration > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Could you list the ids for all trips that happened in zip code areas with an average mean temperature greater than 60?",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT start_station_id FROM trip WHERE duration > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Show me the ids for all trips that were in zip code areas with an average mean temperature higher than 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT start_station_id FROM trip WHERE duration > value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are all the dates of enrollment and completion in record?",
        "gold_parse": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",
        "query": "SELECT T1.date_of_enrolment , T2.test_result FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Can you list all the enrollment and completion dates in the record?",
        "gold_parse": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",
        "query": "SELECT T1.date_of_enrolment , T2.test_result FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the dates of enrollment and completion recorded?",
        "gold_parse": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",
        "query": "SELECT T1.date_of_enrolment , T2.test_result FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Could you show me all the dates of enrollment and completion in the record?",
        "gold_parse": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",
        "query": "SELECT T1.date_of_enrolment , T2.test_result FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the recorded dates of enrollment and completion?",
        "gold_parse": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",
        "query": "SELECT T1.date_of_enrolment , T2.test_result FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Can I see all the dates of enrollment and completion in the record?",
        "gold_parse": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",
        "query": "SELECT T1.date_of_enrolment , T2.test_result FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",
        "question": "Show different teams in eliminations and the number of eliminations from each team.",
        "correctness": 1,
        "gold_parse": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",
        "question": "Display the various teams in the eliminations and their respective elimination counts",
        "correctness": 1,
        "gold_parse": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",
        "question": "Can you list the different teams in eliminations and how many eliminations each team has?",
        "correctness": 1,
        "gold_parse": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",
        "question": "Show me the distinct teams in eliminations and the total number of eliminations per team",
        "correctness": 1,
        "gold_parse": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",
        "question": "What are the different teams in eliminations and the number of eliminations they each have?",
        "correctness": 1,
        "gold_parse": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",
        "question": "Present the unique teams in eliminations and the count of eliminations for each team",
        "correctness": 1,
        "gold_parse": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team"
    },
    {
        "db_id": "book_review",
        "query": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3",
        "question": "What are the types of books that have at least three books belonging to?",
        "correctness": 1,
        "gold_parse": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "book_review",
        "query": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3",
        "question": "What are the categories of books that have a minimum of three books in them?",
        "correctness": 1,
        "gold_parse": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "book_review",
        "query": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3",
        "question": "Can you list the genres of books that contain at least three books?",
        "correctness": 1,
        "gold_parse": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "book_review",
        "query": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3",
        "question": "What are the different book types that include at least three books?",
        "correctness": 1,
        "gold_parse": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "book_review",
        "query": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3",
        "question": "Which book categories consist of three or more books?",
        "correctness": 1,
        "gold_parse": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "book_review",
        "query": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3",
        "question": "Identify the book genres that have three or more books in them.",
        "correctness": 1,
        "gold_parse": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "store_1",
        "question": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value OR T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Show the names of tracks that are either in the Rock genre or have the media type as MPEG audio file.",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value OR T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Can you provide the names of tracks that are classified as Rock or have an MPEG audio file format?",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value OR T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the names of tracks that fall under the Rock genre or are in the MPEG audio file format?",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value OR T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "I need the names of tracks that are either Rock genre or MPEG audio file type.",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value OR T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Display the track names that are either categorized as Rock or have a media type of MPEG audio file.",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value OR T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that have a vendor requested price less than 500,000?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price < 500000;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Can you list the properties with a vendor requested price below 500,000?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price < 500000;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Which properties have a vendor asking price under 500,000?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price < 500000;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the property names where the vendor's asking price is less than 500,000?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price < 500000;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Could you tell me the names of properties that are priced less than 500,000 by the vendor?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price < 500000;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Identify the properties that have a vendor's price request of less than 500,000.",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price < 500000;",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Support_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Which are the three highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Support_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Can you list the top three support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Support_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the three maximum support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Support_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Show me the three highest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Support_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Identify the top three support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Support_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Musical_ID NOT IN ( SELECT Name FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Can you show me the names of musicals without any actors?",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Musical_ID NOT IN ( SELECT Name FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Which musicals do not have any actors?",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Musical_ID NOT IN ( SELECT Name FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Could you provide the names of musicals that lack actors?",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Musical_ID NOT IN ( SELECT Name FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "I'm interested in musicals that have no actors, can you list them?",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Musical_ID NOT IN ( SELECT Name FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "What are the musicals that do not include any actors?",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Musical_ID NOT IN ( SELECT Name FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the maximum life expectancy in countries where the language is official.",
        "gold_parse": "",
        "query": "SELECT Language, MAX(LifeExpectancy) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the highest life expectancy in countries where the language is recognized as official?",
        "gold_parse": "",
        "query": "SELECT Language, MAX(LifeExpectancy) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Identify the maximum life span in nations where the language is official.",
        "gold_parse": "",
        "query": "SELECT Language, MAX(LifeExpectancy) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What's the top life expectancy in countries that have the language as official?",
        "gold_parse": "",
        "query": "SELECT Language, MAX(LifeExpectancy) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Can you find the greatest life expectancy in countries where the language is official?",
        "gold_parse": "",
        "query": "SELECT Language, MAX(LifeExpectancy) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Determine the peak life expectancy in countries recognizing the language as official.",
        "gold_parse": "",
        "query": "SELECT Language, MAX(LifeExpectancy) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T';",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;",
        "question": "Show the names of airlines and their flight numbers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;",
        "question": "Display the airline names along with their flight numbers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;",
        "question": "Can you list the names of airlines and their corresponding flight numbers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;",
        "question": "I want to see the names of airlines and their flight numbers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;",
        "question": "Provide the names of airlines and their flight numbers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;",
        "question": "Could you show me the names of airlines and their respective flight numbers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT DISTINCT model FROM headphone ORDER BY model",
        "question": "List all different headphone models in the alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT model FROM headphone ORDER BY model"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT DISTINCT model FROM headphone ORDER BY model",
        "question": "Show all unique headphone models sorted alphabetically",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT model FROM headphone ORDER BY model"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT DISTINCT model FROM headphone ORDER BY model",
        "question": "Provide a list of all distinct headphone models in alphabetical order",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT model FROM headphone ORDER BY model"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT DISTINCT model FROM headphone ORDER BY model",
        "question": "Can you display all the different models of headphones in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT model FROM headphone ORDER BY model"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT DISTINCT model FROM headphone ORDER BY model",
        "question": "I need to see all the different headphone models, arranged alphabetically",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT model FROM headphone ORDER BY model"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT DISTINCT model FROM headphone ORDER BY model",
        "question": "Could you list all the unique models of headphones in the order of A to Z?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT model FROM headphone ORDER BY model"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the manager and sponsor of the team that has the most drivers.",
        "correctness": 1,
        "gold_parse": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Who is the manager and sponsor of the team with the highest number of drivers?",
        "correctness": 1,
        "gold_parse": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Can you identify the manager and sponsor of the team that employs the most drivers?",
        "correctness": 1,
        "gold_parse": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the names of the manager and sponsor for the team that has the maximum number of drivers?",
        "correctness": 1,
        "gold_parse": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Could you find out who the manager and sponsor are for the team with the most drivers?",
        "correctness": 1,
        "gold_parse": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Who are the manager and sponsor of the team that has the greatest number of drivers?",
        "correctness": 1,
        "gold_parse": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the names of the workshop groups that have bookings with status code \"stop\"?",
        "gold_parse": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"",
        "query": "SELECT T1.Customer_Name FROM Performers AS T1 JOIN Bookings AS T2 JOIN Performers_in_Bookings AS T3 ON T1.Performer_ID = T3.Performer_ID AND T3.Order_ID = T2.Booking_ID WHERE T2.Status_Code = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Can you list the workshop groups with bookings that have a status code of 'stop'?",
        "gold_parse": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"",
        "query": "SELECT T1.Customer_Name FROM Performers AS T1 JOIN Bookings AS T2 JOIN Performers_in_Bookings AS T3 ON T1.Performer_ID = T3.Performer_ID AND T3.Order_ID = T2.Booking_ID WHERE T2.Status_Code = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Which workshop groups have bookings with a 'stop' status code?",
        "gold_parse": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"",
        "query": "SELECT T1.Customer_Name FROM Performers AS T1 JOIN Bookings AS T2 JOIN Performers_in_Bookings AS T3 ON T1.Performer_ID = T3.Performer_ID AND T3.Order_ID = T2.Booking_ID WHERE T2.Status_Code = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "I need the names of the workshop groups with bookings that are marked as 'stop'.",
        "gold_parse": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"",
        "query": "SELECT T1.Customer_Name FROM Performers AS T1 JOIN Bookings AS T2 JOIN Performers_in_Bookings AS T3 ON T1.Performer_ID = T3.Performer_ID AND T3.Order_ID = T2.Booking_ID WHERE T2.Status_Code = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Could you tell me the workshop groups that have bookings with a status code 'stop'?",
        "gold_parse": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"",
        "query": "SELECT T1.Customer_Name FROM Performers AS T1 JOIN Bookings AS T2 JOIN Performers_in_Bookings AS T3 ON T1.Performer_ID = T3.Performer_ID AND T3.Order_ID = T2.Booking_ID WHERE T2.Status_Code = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Identify the workshop groups with bookings that have the status code 'stop'.",
        "gold_parse": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"",
        "query": "SELECT T1.Customer_Name FROM Performers AS T1 JOIN Bookings AS T2 JOIN Performers_in_Bookings AS T3 ON T1.Performer_ID = T3.Performer_ID AND T3.Order_ID = T2.Booking_ID WHERE T2.Status_Code = value",
        "correctness": 0
    },
    {
        "db_id": "conference",
        "query": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
        "question": "How many conferences occur every year?",
        "correctness": 1,
        "gold_parse": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR"
    },
    {
        "db_id": "conference",
        "query": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
        "question": "What is the annual count of conferences?",
        "correctness": 1,
        "gold_parse": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR"
    },
    {
        "db_id": "conference",
        "query": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
        "question": "Can you tell me the number of conferences held each year?",
        "correctness": 1,
        "gold_parse": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR"
    },
    {
        "db_id": "conference",
        "query": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
        "question": "What's the yearly total of conferences?",
        "correctness": 1,
        "gold_parse": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR"
    },
    {
        "db_id": "conference",
        "query": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
        "question": "How many conferences are held on a yearly basis?",
        "correctness": 1,
        "gold_parse": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR"
    },
    {
        "db_id": "conference",
        "query": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
        "question": "What is the yearly frequency of conferences?",
        "correctness": 1,
        "gold_parse": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "How many songs does the singer with ID 1 have?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "What is the total number of songs by the singer with ID 1?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "Can you tell me the count of songs for the singer with ID 1?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "What's the quantity of songs the singer with ID 1 has?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "How many tracks does the singer with ID 1 own?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "What is the song count for the singer who has the ID 1?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "real_estate_properties",
        "question": "Sum the first house feature for properties that have been sold.",
        "gold_parse": "",
        "query": "SELECT property_address, SUM(hse_feature_1) FROM Properties WHERE date_sold IS NOT NULL GROUP BY property_address;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Calculate the sum of the first feature of houses that have been sold",
        "gold_parse": "",
        "query": "SELECT property_address, SUM(hse_feature_1) FROM Properties WHERE date_sold IS NOT NULL GROUP BY property_address;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the total of the first feature for all sold properties?",
        "gold_parse": "",
        "query": "SELECT property_address, SUM(hse_feature_1) FROM Properties WHERE date_sold IS NOT NULL GROUP BY property_address;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Can you add up the first feature of all the houses that have been sold?",
        "gold_parse": "",
        "query": "SELECT property_address, SUM(hse_feature_1) FROM Properties WHERE date_sold IS NOT NULL GROUP BY property_address;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the total sum of the first feature for properties that have been sold",
        "gold_parse": "",
        "query": "SELECT property_address, SUM(hse_feature_1) FROM Properties WHERE date_sold IS NOT NULL GROUP BY property_address;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What's the sum of the first house feature for all properties that have been sold?",
        "gold_parse": "",
        "query": "SELECT property_address, SUM(hse_feature_1) FROM Properties WHERE date_sold IS NOT NULL GROUP BY property_address;",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "question": "What are the checking and savings balances in accounts belonging to Brown?",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "question": "What are the balances for checking and savings accounts owned by Brown?",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "question": "Can you tell me the checking and savings account balances for Brown?",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "question": "What's the balance in Brown's checking and savings accounts?",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "question": "Could you provide the balances of checking and savings accounts for Brown?",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "question": "What are the amounts in the checking and savings accounts of Brown?",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'"
    },
    {
        "db_id": "sakila_1",
        "question": "Which film has the most copies in the inventory? List both title and id.",
        "gold_parse": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT title , film_id FROM film GROUP BY film_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which movie has the highest number of copies in stock? Include both the title and id.",
        "gold_parse": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT title , film_id FROM film GROUP BY film_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Can you tell me the film with the maximum number of copies in the inventory? I need both the title and id.",
        "gold_parse": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT title , film_id FROM film GROUP BY film_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What is the title and id of the film that has the most copies in our inventory?",
        "gold_parse": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT title , film_id FROM film GROUP BY film_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Identify the film with the most copies in the inventory, providing both its title and id.",
        "gold_parse": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT title , film_id FROM film GROUP BY film_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "I want to know the film that has the greatest number of copies in the inventory. Please provide the title and id.",
        "gold_parse": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT title , film_id FROM film GROUP BY film_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
        "question": "How many students live in each country?",
        "correctness": 1,
        "gold_parse": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
        "question": "What is the count of students residing in each country?",
        "correctness": 1,
        "gold_parse": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
        "question": "Can you tell me the number of students in each country?",
        "correctness": 1,
        "gold_parse": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
        "question": "What's the total number of students per country?",
        "correctness": 1,
        "gold_parse": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
        "question": "How many students are there in each country?",
        "correctness": 1,
        "gold_parse": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
        "question": "Give me the count of students living in each country.",
        "correctness": 1,
        "gold_parse": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country"
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who are from UK and have produced English songs.",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT artist_name FROM artist WHERE country = value INTERSECT SELECT artist_name FROM artist WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Identify the artists from the UK who have created English songs.",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT artist_name FROM artist WHERE country = value INTERSECT SELECT artist_name FROM artist WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Who are the UK-based artists that have produced songs in English?",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT artist_name FROM artist WHERE country = value INTERSECT SELECT artist_name FROM artist WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Can you list the names of artists from the UK who have made English songs?",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT artist_name FROM artist WHERE country = value INTERSECT SELECT artist_name FROM artist WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Which artists hailing from the UK have produced English tracks?",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT artist_name FROM artist WHERE country = value INTERSECT SELECT artist_name FROM artist WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Provide the names of the artists who are from the UK and have composed songs in English.",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT artist_name FROM artist WHERE country = value INTERSECT SELECT artist_name FROM artist WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "Show all cartoons that were directed by either Ben Jones or Brandon Vietti",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What are the titles of cartoons directed by Ben Jones or Brandon Vietti?",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "Can you list the cartoons directed by Ben Jones and Brandon Vietti?",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "Provide the titles of all cartoons directed by Ben Jones or Brandon Vietti",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "I want to see all cartoon titles directed by Ben Jones or Brandon Vietti",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of course IDs for each transcript date?",
        "gold_parse": "",
        "query": "SELECT transcript_date, SUM(course_id) FROM Transcripts JOIN Courses ON Transcripts.transcript_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the total of course IDs for each transcript date?",
        "gold_parse": "",
        "query": "SELECT transcript_date, SUM(course_id) FROM Transcripts JOIN Courses ON Transcripts.transcript_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Can you calculate the sum of course IDs for every transcript date?",
        "gold_parse": "",
        "query": "SELECT transcript_date, SUM(course_id) FROM Transcripts JOIN Courses ON Transcripts.transcript_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What's the aggregate of course IDs per transcript date?",
        "gold_parse": "",
        "query": "SELECT transcript_date, SUM(course_id) FROM Transcripts JOIN Courses ON Transcripts.transcript_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Could you find the total sum of course IDs for each date on the transcript?",
        "gold_parse": "",
        "query": "SELECT transcript_date, SUM(course_id) FROM Transcripts JOIN Courses ON Transcripts.transcript_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the cumulative sum of course IDs for each date in the transcript?",
        "gold_parse": "",
        "query": "SELECT transcript_date, SUM(course_id) FROM Transcripts JOIN Courses ON Transcripts.transcript_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the states where the total lake area does not exceed 1000 square kilometers?",
        "gold_parse": "",
        "query": "SELECT state_name, SUM(area) FROM lake GROUP BY state_name HAVING SUM(area) > 1000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Can you list the states where the total lake area is less than or equal to 1000 square kilometers?",
        "gold_parse": "",
        "query": "SELECT state_name, SUM(area) FROM lake GROUP BY state_name HAVING SUM(area) > 1000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which states have a total lake area that doesn't surpass 1000 square kilometers?",
        "gold_parse": "",
        "query": "SELECT state_name, SUM(area) FROM lake GROUP BY state_name HAVING SUM(area) > 1000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "In which states is the total lake area not more than 1000 square kilometers?",
        "gold_parse": "",
        "query": "SELECT state_name, SUM(area) FROM lake GROUP BY state_name HAVING SUM(area) > 1000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Could you tell me the states where the total lake area is not over 1000 square kilometers?",
        "gold_parse": "",
        "query": "SELECT state_name, SUM(area) FROM lake GROUP BY state_name HAVING SUM(area) > 1000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Identify the states where the total lake area is under or equal to 1000 square kilometers.",
        "gold_parse": "",
        "query": "SELECT state_name, SUM(area) FROM lake GROUP BY state_name HAVING SUM(area) > 1000;",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 WHERE T2.Visit_Details = value )",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Identify the tourist spots that Alison visited but were not visited by Rosalind.",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 WHERE T2.Visit_Details = value )",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of the tourist attractions that were visited by Alison but not by Rosalind?",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 WHERE T2.Visit_Details = value )",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Can you list the tourist attractions that Alison went to but Rosalind didn't?",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 WHERE T2.Visit_Details = value )",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which tourist attractions did Alison visit that Rosalind did not?",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 WHERE T2.Visit_Details = value )",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Provide the names of the tourist attractions that were visited by Alison but not Rosalind.",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 WHERE T2.Visit_Details = value )",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Who is the author of paper 1?",
        "gold_parse": "",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.paperid WHERE writes.authorid = 1",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Who wrote paper 1?",
        "gold_parse": "",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.paperid WHERE writes.authorid = 1",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Can you tell me the author of paper 1?",
        "gold_parse": "",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.paperid WHERE writes.authorid = 1",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Who's the writer of paper 1?",
        "gold_parse": "",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.paperid WHERE writes.authorid = 1",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Who penned paper 1?",
        "gold_parse": "",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.paperid WHERE writes.authorid = 1",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Who is credited as the author of paper 1?",
        "gold_parse": "",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.paperid WHERE writes.authorid = 1",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What is the id and name of the browser that is compatible with the most web accelerators?",
        "gold_parse": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name FROM browser GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "Can you tell me the id and name of the browser that works with the highest number of web accelerators?",
        "gold_parse": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name FROM browser GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What's the id and name of the browser that supports the maximum number of web accelerators?",
        "gold_parse": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name FROM browser GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "Could you provide the id and name of the browser that is compatible with the greatest number of web accelerators?",
        "gold_parse": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name FROM browser GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "I'd like to know the id and name of the browser that can handle the most web accelerators.",
        "gold_parse": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name FROM browser GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What is the id and name of the browser that is able to work with the most web accelerators?",
        "gold_parse": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name FROM browser GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
        "question": "List all documents ids that are not the parent of other documents.",
        "correctness": 1,
        "gold_parse": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
        "question": "Show all document ids that do not have child documents",
        "correctness": 1,
        "gold_parse": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
        "question": "Retrieve all document ids that aren't parents to other documents",
        "correctness": 1,
        "gold_parse": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
        "question": "Display all ids of documents that don't have any subdocuments",
        "correctness": 1,
        "gold_parse": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
        "question": "Provide a list of document ids that are not parent documents",
        "correctness": 1,
        "gold_parse": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
        "question": "Can you list all the document ids that do not have any associated child documents?",
        "correctness": 1,
        "gold_parse": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects"
    },
    {
        "db_id": "world_1",
        "question": "Which region is the city Kabul located in?",
        "gold_parse": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "query": "SELECT LocalName FROM country WHERE Region = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "In which region can you find the city of Kabul?",
        "gold_parse": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "query": "SELECT LocalName FROM country WHERE Region = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What region is home to the city Kabul?",
        "gold_parse": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "query": "SELECT LocalName FROM country WHERE Region = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Can you tell me the region where Kabul city is located?",
        "gold_parse": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "query": "SELECT LocalName FROM country WHERE Region = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the region of the city Kabul?",
        "gold_parse": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "query": "SELECT LocalName FROM country WHERE Region = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Kabul is in which region?",
        "gold_parse": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "query": "SELECT LocalName FROM country WHERE Region = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER?",
        "gold_parse": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName ! = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Can you provide the first and last names of the first-grade students who are not under the instruction of teacher OTHA MOYER?",
        "gold_parse": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName ! = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Who are the first-grade students, by first and last name, who do not have OTHA MOYER as their teacher?",
        "gold_parse": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName ! = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "I need the first and last names of the first-grade students who aren't being taught by OTHA MOYER.",
        "gold_parse": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName ! = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Could you list the first and last names of the first-grade students who aren't in OTHA MOYER's class?",
        "gold_parse": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName ! = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the names of the first-grade students who aren't taught by teacher OTHA MOYER?",
        "gold_parse": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName ! = value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the maximum feature type name for each property name?",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_type_code = Ref_Feature_Types.feature_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the highest feature type name for each property name?",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_type_code = Ref_Feature_Types.feature_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Can you tell me the maximum feature type name for every property name?",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_type_code = Ref_Feature_Types.feature_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What's the top feature type name for each property name?",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_type_code = Ref_Feature_Types.feature_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Could you find the maximum feature type name for each property name?",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_type_code = Ref_Feature_Types.feature_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the peak feature type name for each property name?",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_type_code = Ref_Feature_Types.feature_type_code;",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Phone FROM EMPLOYEE",
        "question": "List the phone numbers of all employees.",
        "correctness": 1,
        "gold_parse": "SELECT Phone FROM EMPLOYEE"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Phone FROM EMPLOYEE",
        "question": "Can you show me the phone numbers of all employees?",
        "correctness": 1,
        "gold_parse": "SELECT Phone FROM EMPLOYEE"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Phone FROM EMPLOYEE",
        "question": "What are the contact numbers of all the staff members?",
        "correctness": 1,
        "gold_parse": "SELECT Phone FROM EMPLOYEE"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Phone FROM EMPLOYEE",
        "question": "I need to see the telephone numbers of every employee.",
        "correctness": 1,
        "gold_parse": "SELECT Phone FROM EMPLOYEE"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Phone FROM EMPLOYEE",
        "question": "Could you provide the phone numbers for all employees?",
        "correctness": 1,
        "gold_parse": "SELECT Phone FROM EMPLOYEE"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Phone FROM EMPLOYEE",
        "question": "Display the contact numbers for all the workers.",
        "correctness": 1,
        "gold_parse": "SELECT Phone FROM EMPLOYEE"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?",
        "gold_parse": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "query": "SELECT T2.staff_first_name , T2.staff_last_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T1.product_name ! = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Who are the staff members with their first and last names who reported issues with the 'rem' product but not 'aut'?",
        "gold_parse": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "query": "SELECT T2.staff_first_name , T2.staff_last_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T1.product_name ! = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Can you provide the first and last names of the staff who reported problems with 'rem' but not with 'aut'?",
        "gold_parse": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "query": "SELECT T2.staff_first_name , T2.staff_last_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T1.product_name ! = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the names of the staff members who reported issues with the product 'rem' and not 'aut'?",
        "gold_parse": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "query": "SELECT T2.staff_first_name , T2.staff_last_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T1.product_name ! = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "I need the first and last names of the staff who reported problems with the 'rem' product but not 'aut'.",
        "gold_parse": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "query": "SELECT T2.staff_first_name , T2.staff_last_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T1.product_name ! = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Could you list the staff members by first and last name who reported problems with 'rem' but not 'aut'?",
        "gold_parse": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "query": "SELECT T2.staff_first_name , T2.staff_last_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T1.product_name ! = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
        "question": "For each student, find the student id, student biographical data, and the number of courses he or she takes.",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
        "question": "Retrieve the student id, biographical information, and course count for each student.",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
        "question": "Can you show me the student id, biographical details, and the number of courses for every student?",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
        "question": "I need to see the student id, personal data, and the total number of courses for each student.",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
        "question": "Could you provide the student id, biographical data, and the course count for all students?",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
        "question": "Display the student id, personal information, and the number of courses taken by each student.",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
        "question": "Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
        "question": "Display the name and model year of vehicles where the city fuel economy rate is less than or equal to the highway fuel economy rate.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
        "question": "Can you list the name and model year for vehicles that have a city fuel economy rate that is less than or equal to their highway fuel economy rate?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
        "question": "I want to see the name and model year of vehicles with a city fuel economy rate that is not greater than the highway fuel economy rate.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
        "question": "Could you show me the name and model year of vehicles where the city fuel economy rate is equal to or less than the highway fuel economy rate?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
        "question": "Provide the name and model year for vehicles where the city fuel economy rate doesn't exceed the highway fuel economy rate.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate"
    },
    {
        "db_id": "csu_1",
        "question": "What is the number of faculty lines in campus \"Long Beach State University\" in 2002?",
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"",
        "query": "SELECT Count ( * ) FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "How many faculty lines were there at Long Beach State University in 2002?",
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"",
        "query": "SELECT Count ( * ) FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Can you tell me the count of faculty lines at Long Beach State University in 2002?",
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"",
        "query": "SELECT Count ( * ) FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What was the faculty lines count at Long Beach State University in the year 2002?",
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"",
        "query": "SELECT Count ( * ) FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "In 2002, what was the number of faculty lines at Long Beach State University?",
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"",
        "query": "SELECT Count ( * ) FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Could you provide the number of faculty lines at Long Beach State University in 2002?",
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"",
        "query": "SELECT Count ( * ) FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "question": "Can you list the unique reigns of wrestlers who are not located in 'Tokyo, Japan'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "question": "What are the different reigns of wrestlers not based in 'Tokyo, Japan'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "question": "Could you tell me the distinct reigns of wrestlers whose location isn't 'Tokyo, Japan'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "question": "What are the various reigns of wrestlers not from 'Tokyo, Japan'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "question": "Can you show me the unique reigns of wrestlers who don't reside in 'Tokyo, Japan'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\""
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "question": "Can you provide the names and operating systems of web client accelerators that are incompatible with 'Broadband' only connections?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "question": "What are the names and operating systems of web client accelerators that cannot function with a 'Broadband' connection only?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "question": "Could you list the names and operating systems of web client accelerators that don't work exclusively with 'Broadband' connections?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "question": "I need the names and operating systems of web client accelerators that aren't compatible with only 'Broadband' type connections.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "question": "What are the names and operating systems of web client accelerators that fail to work with just a 'Broadband' connection?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'"
    },
    {
        "db_id": "game_injury",
        "question": "List the dates of games by the home team name in descending order.",
        "gold_parse": "SELECT Date FROM game ORDER BY home_team DESC",
        "query": "SELECT Date FROM game ORDER BY Date Desc",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "Show the dates of matches sorted by the home team name in descending order.",
        "gold_parse": "SELECT Date FROM game ORDER BY home_team DESC",
        "query": "SELECT Date FROM game ORDER BY Date Desc",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "Can you provide the dates of games ordered by the home team name in a descending manner?",
        "gold_parse": "SELECT Date FROM game ORDER BY home_team DESC",
        "query": "SELECT Date FROM game ORDER BY Date Desc",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "I want to see the game dates sorted by the home team name in descending order.",
        "gold_parse": "SELECT Date FROM game ORDER BY home_team DESC",
        "query": "SELECT Date FROM game ORDER BY Date Desc",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "Display the dates of games with the home team name in descending order.",
        "gold_parse": "SELECT Date FROM game ORDER BY home_team DESC",
        "query": "SELECT Date FROM game ORDER BY Date Desc",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "Could you list the game dates by the home team name in a descending sequence?",
        "gold_parse": "SELECT Date FROM game ORDER BY home_team DESC",
        "query": "SELECT Date FROM game ORDER BY Date Desc",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "question": "Show company name and main industry without a gas station.",
        "correctness": 1,
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "question": "Display the name of the company and its primary industry that doesn't include a gas station.",
        "correctness": 1,
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "question": "Can you list the companies and their main industries that don't have a gas station?",
        "correctness": 1,
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "question": "Show me the company names and their main industries that are not gas stations.",
        "correctness": 1,
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "question": "I want to see the names of companies and their main industries, excluding those with gas stations.",
        "correctness": 1,
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "question": "Provide the names of companies and their primary industries that don't operate gas stations.",
        "correctness": 1,
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of the students who are in the position of striker and got a yes tryout decision.",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T3.pName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T2.pPos = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Identify the students who play as a striker and received a positive tryout decision.",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T3.pName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T2.pPos = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Who are the students that play in the striker position and have been approved in the tryouts?",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T3.pName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T2.pPos = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Can you list the names of the students who are strikers and got a yes for their tryout decision?",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T3.pName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T2.pPos = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Which students are in the striker position and have a tryout decision of yes?",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T3.pName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T2.pPos = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Provide the names of the students who hold the striker position and their tryout decision was yes.",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T3.pName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T2.pPos = value",
        "correctness": 0
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"",
        "question": "Find the titles of all the papers written by \"Aaron Turon\".",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"",
        "question": "What are the titles of all papers authored by Aaron Turon?",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"",
        "question": "Can you list all the paper titles written by Aaron Turon?",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"",
        "question": "Show me the titles of all papers that Aaron Turon has written.",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"",
        "question": "I want to know the titles of all papers written by Aaron Turon.",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"",
        "question": "Provide the titles of all papers that have been written by Aaron Turon.",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
        "question": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
        "question": "Display the teams that have wrestlers knocked out by both 'Orton' and 'Benjamin'.",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
        "question": "Can you list the teams with wrestlers who were eliminated by both 'Orton' and 'Benjamin'?",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
        "question": "Which teams have wrestlers that were defeated by both 'Orton' and 'Benjamin'?",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
        "question": "Identify the teams that have wrestlers ousted by both 'Orton' and 'Benjamin'.",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
        "question": "What are the teams that have wrestlers taken down by both 'Orton' and 'Benjamin'?",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the name of the client who has made the most orders.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
        "question": "Who is the client with the highest number of orders?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
        "question": "Can you tell me the name of the client who has placed the most orders?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
        "question": "Identify the client who has made the maximum number of orders.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
        "question": "Which client has the record for the most orders placed?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
        "question": "What's the name of the client who has ordered the most?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "storm_record",
        "question": "What is the average and maximum damage in millions for storms that had a max speed over 1000?",
        "gold_parse": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "query": "SELECT Avg ( Damage_millions_USD ) , Max ( Damage_millions_USD ) FROM storm WHERE Max_speed > = value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What is the mean and peak damage in millions for storms with a maximum speed exceeding 1000?",
        "gold_parse": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "query": "SELECT Avg ( Damage_millions_USD ) , Max ( Damage_millions_USD ) FROM storm WHERE Max_speed > = value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Can you tell me the average and highest damage in millions for storms where the top speed was over 1000?",
        "gold_parse": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "query": "SELECT Avg ( Damage_millions_USD ) , Max ( Damage_millions_USD ) FROM storm WHERE Max_speed > = value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What's the average and maximum monetary damage in millions for storms that reached speeds over 1000?",
        "gold_parse": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "query": "SELECT Avg ( Damage_millions_USD ) , Max ( Damage_millions_USD ) FROM storm WHERE Max_speed > = value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Could you find the average and the maximum damage in millions for storms that had a top speed of more than 1000?",
        "gold_parse": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "query": "SELECT Avg ( Damage_millions_USD ) , Max ( Damage_millions_USD ) FROM storm WHERE Max_speed > = value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What is the average and the maximum damage in millions for storms that had a maximum speed greater than 1000?",
        "gold_parse": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "query": "SELECT Avg ( Damage_millions_USD ) , Max ( Damage_millions_USD ) FROM storm WHERE Max_speed > = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "For each movie that received more than 3 reviews, what is the average rating?",
        "gold_parse": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.title HAVING Avg ( T2.stars ) > value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What is the average rating for each movie that has over 3 reviews?",
        "gold_parse": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.title HAVING Avg ( T2.stars ) > value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "Can you tell me the average rating for movies that have more than three reviews?",
        "gold_parse": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.title HAVING Avg ( T2.stars ) > value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "For all movies with more than three reviews, what's their average rating?",
        "gold_parse": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.title HAVING Avg ( T2.stars ) > value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What's the mean rating for each film that has received more than three reviews?",
        "gold_parse": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.title HAVING Avg ( T2.stars ) > value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "Could you provide the average rating for each movie that has been reviewed more than three times?",
        "gold_parse": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.title HAVING Avg ( T2.stars ) > value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which part has the least chargeable amount? List the part id and amount.",
        "gold_parse": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
        "query": "SELECT T1.part_id , T2.part_fault_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id ORDER BY Sum ( T1.chargeable_amount ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which component has the smallest billable amount? Provide the component id and the amount.",
        "gold_parse": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
        "query": "SELECT T1.part_id , T2.part_fault_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id ORDER BY Sum ( T1.chargeable_amount ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Identify the part with the lowest chargeable cost. Show the part id and cost.",
        "gold_parse": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
        "query": "SELECT T1.part_id , T2.part_fault_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id ORDER BY Sum ( T1.chargeable_amount ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "What part has the minimum billable amount? Display the part id and the amount.",
        "gold_parse": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
        "query": "SELECT T1.part_id , T2.part_fault_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id ORDER BY Sum ( T1.chargeable_amount ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Can you find the part with the smallest chargeable amount? Show the part id and the amount.",
        "gold_parse": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
        "query": "SELECT T1.part_id , T2.part_fault_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id ORDER BY Sum ( T1.chargeable_amount ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which part incurs the least cost? Indicate the part id and the cost.",
        "gold_parse": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
        "query": "SELECT T1.part_id , T2.part_fault_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id ORDER BY Sum ( T1.chargeable_amount ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "query": "SELECT County_name FROM county ORDER BY County_name DESC",
        "question": "Sort the names of all counties in descending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT County_name FROM county ORDER BY County_name DESC"
    },
    {
        "db_id": "election",
        "query": "SELECT County_name FROM county ORDER BY County_name DESC",
        "question": "Arrange all county names in reverse alphabetical order",
        "correctness": 1,
        "gold_parse": "SELECT County_name FROM county ORDER BY County_name DESC"
    },
    {
        "db_id": "election",
        "query": "SELECT County_name FROM county ORDER BY County_name DESC",
        "question": "List all the counties in order from Z to A",
        "correctness": 1,
        "gold_parse": "SELECT County_name FROM county ORDER BY County_name DESC"
    },
    {
        "db_id": "election",
        "query": "SELECT County_name FROM county ORDER BY County_name DESC",
        "question": "Can you order all the county names in descending alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT County_name FROM county ORDER BY County_name DESC"
    },
    {
        "db_id": "election",
        "query": "SELECT County_name FROM county ORDER BY County_name DESC",
        "question": "Show all county names sorted in descending order alphabetically",
        "correctness": 1,
        "gold_parse": "SELECT County_name FROM county ORDER BY County_name DESC"
    },
    {
        "db_id": "election",
        "query": "SELECT County_name FROM county ORDER BY County_name DESC",
        "question": "Display the names of all counties in alphabetical order from Z to A",
        "correctness": 1,
        "gold_parse": "SELECT County_name FROM county ORDER BY County_name DESC"
    },
    {
        "db_id": "university_basketball",
        "question": "What are the all games score and location of the school called Clemson?",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT Enrollment , Location FROM university WHERE School = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Can you tell me the scores and locations of all games for the school named Clemson?",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT Enrollment , Location FROM university WHERE School = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What are the scores and locations for all games at Clemson school?",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT Enrollment , Location FROM university WHERE School = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "I'd like to know the scores and locations of all games from Clemson school.",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT Enrollment , Location FROM university WHERE School = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Could you provide the scores and locations for all games of Clemson school?",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT Enrollment , Location FROM university WHERE School = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What's the score and location for every game of the school known as Clemson?",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT Enrollment , Location FROM university WHERE School = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the names and types of the dorms that have a capacity greater than 300 or less than 100?",
        "gold_parse": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
        "query": "SELECT dorm_name , dorm_name FROM Dorm WHERE student_capacity > value OR student_capacity < value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Can you list the names and types of dorms that can accommodate more than 300 or less than 100 students?",
        "gold_parse": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
        "query": "SELECT dorm_name , dorm_name FROM Dorm WHERE student_capacity > value OR student_capacity < value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the dorm names and their types that have a capacity of over 300 or under 100?",
        "gold_parse": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
        "query": "SELECT dorm_name , dorm_name FROM Dorm WHERE student_capacity > value OR student_capacity < value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Could you provide the names and types of dorms with a capacity exceeding 300 or falling below 100?",
        "gold_parse": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
        "query": "SELECT dorm_name , dorm_name FROM Dorm WHERE student_capacity > value OR student_capacity < value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "I need to know the names and types of dorms that can house more than 300 or fewer than 100 students.",
        "gold_parse": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
        "query": "SELECT dorm_name , dorm_name FROM Dorm WHERE student_capacity > value OR student_capacity < value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the names and types of dormitories that have a capacity of either more than 300 or less than 100?",
        "gold_parse": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
        "query": "SELECT dorm_name , dorm_name FROM Dorm WHERE student_capacity > value OR student_capacity < value",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What is the ID of every singer who has a net worth below the maximum?",
        "gold_parse": "",
        "query": "SELECT Singer_ID FROM singer WHERE Net_Worth_Millions < (SELECT Max(Net_Worth_Millions) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Can you provide the IDs of all singers with a net worth less than the maximum?",
        "gold_parse": "",
        "query": "SELECT Singer_ID FROM singer WHERE Net_Worth_Millions < (SELECT Max(Net_Worth_Millions) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the IDs of singers whose net worth is not the highest?",
        "gold_parse": "",
        "query": "SELECT Singer_ID FROM singer WHERE Net_Worth_Millions < (SELECT Max(Net_Worth_Millions) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Could you list the IDs of singers who don't have the maximum net worth?",
        "gold_parse": "",
        "query": "SELECT Singer_ID FROM singer WHERE Net_Worth_Millions < (SELECT Max(Net_Worth_Millions) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "I'd like to know the IDs of all singers who have a net worth below the maximum.",
        "gold_parse": "",
        "query": "SELECT Singer_ID FROM singer WHERE Net_Worth_Millions < (SELECT Max(Net_Worth_Millions) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What's the ID of each singer whose net worth isn't the maximum?",
        "gold_parse": "",
        "query": "SELECT Singer_ID FROM singer WHERE Net_Worth_Millions < (SELECT Max(Net_Worth_Millions) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which actors were born in London?",
        "gold_parse": "",
        "query": "SELECT name FROM actor WHERE birth_city = 'Toronto';",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Can you list the actors who were born in London?",
        "gold_parse": "",
        "query": "SELECT name FROM actor WHERE birth_city = 'Toronto';",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Who are the actors that have their birthplace as London?",
        "gold_parse": "",
        "query": "SELECT name FROM actor WHERE birth_city = 'Toronto';",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Identify the actors born in London.",
        "gold_parse": "",
        "query": "SELECT name FROM actor WHERE birth_city = 'Toronto';",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which actors have London as their place of birth?",
        "gold_parse": "",
        "query": "SELECT name FROM actor WHERE birth_city = 'Toronto';",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Tell me the names of actors who were born in London.",
        "gold_parse": "",
        "query": "SELECT name FROM actor WHERE birth_city = 'Toronto';",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the location and all games score of the school that has Clemson as its team name.",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT T2.Location , T2.Enrollment FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Retrieve the location and all game scores for the school with the team name Clemson.",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT T2.Location , T2.Enrollment FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What is the location and all game scores of the school whose team name is Clemson?",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT T2.Location , T2.Enrollment FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Can you show me the location and all game scores of the school that goes by the team name Clemson?",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT T2.Location , T2.Enrollment FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "I want to know the location and all game scores of the school with Clemson as its team name.",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT T2.Location , T2.Enrollment FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Please provide the location and all game scores of the school that has Clemson as its team name.",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT T2.Location , T2.Enrollment FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "How many different series and contents are listed in the TV Channel table?",
        "gold_parse": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel",
        "query": "SELECT Count ( DISTINCT Episode ) , Count ( * ) FROM TV_series",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What is the count of unique series and contents in the TV Channel table?",
        "gold_parse": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel",
        "query": "SELECT Count ( DISTINCT Episode ) , Count ( * ) FROM TV_series",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "Can you tell me the number of distinct series and contents in the TV Channel table?",
        "gold_parse": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel",
        "query": "SELECT Count ( DISTINCT Episode ) , Count ( * ) FROM TV_series",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What's the total number of different series and contents in the TV Channel table?",
        "gold_parse": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel",
        "query": "SELECT Count ( DISTINCT Episode ) , Count ( * ) FROM TV_series",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "How many unique series and contents can be found in the TV Channel table?",
        "gold_parse": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel",
        "query": "SELECT Count ( DISTINCT Episode ) , Count ( * ) FROM TV_series",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "Could you provide the count of distinct series and contents in the TV Channel table?",
        "gold_parse": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel",
        "query": "SELECT Count ( DISTINCT Episode ) , Count ( * ) FROM TV_series",
        "correctness": 0
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
        "question": "What is the name of the institution that \"Matthias Blume\" belongs to?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
        "question": "Can you tell me the name of the institution associated with Matthias Blume?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
        "question": "What is the educational institution of Matthias Blume?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
        "question": "Which institution does Matthias Blume belong to?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
        "question": "What is the name of the institution where Matthias Blume is affiliated?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
        "question": "Can you identify the institution that Matthias Blume is a part of?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\""
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'",
        "question": "Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.",
        "correctness": 1,
        "gold_parse": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'",
        "question": "Show the ids and models of vehicles that have been operated by only two drivers or manufactured by Ziyang.",
        "correctness": 1,
        "gold_parse": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'",
        "question": "Can you provide the ids and models of vehicles that have been handled by precisely two drivers or constructed by Ziyang?",
        "correctness": 1,
        "gold_parse": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'",
        "question": "I need the ids and models of vehicles that have been used by exactly two drivers or produced by Ziyang.",
        "correctness": 1,
        "gold_parse": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'",
        "question": "Could you list the ids and models of vehicles that have been driven by just two drivers or made by Ziyang?",
        "correctness": 1,
        "gold_parse": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'",
        "question": "Display the ids and models of vehicles that have been driven by two drivers only or fabricated by Ziyang.",
        "correctness": 1,
        "gold_parse": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled > 250;",
        "question": "What are the names of courses with more than 250 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled > 250;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled > 250;",
        "question": "Can you list the courses that have over 250 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled > 250;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled > 250;",
        "question": "Which courses have an enrollment of more than 250 students?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled > 250;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled > 250;",
        "question": "Could you tell me the names of courses with enrollment exceeding 250 students?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled > 250;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled > 250;",
        "question": "I'd like to know the courses where the number of students enrolled is more than 250.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled > 250;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled > 250;",
        "question": "What are the course names where the student count is above 250?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled > 250;"
    },
    {
        "db_id": "student_1",
        "question": "How many teachers does the student named CHRISSY NABOZNY have?",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"",
        "query": "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What is the count of teachers for the student CHRISSY NABOZNY?",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"",
        "query": "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Can you tell me the number of teachers assigned to the student CHRISSY NABOZNY?",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"",
        "query": "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What's the total number of teachers for CHRISSY NABOZNY?",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"",
        "query": "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "How many educators are there for the student named CHRISSY NABOZNY?",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"",
        "query": "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What is the total count of teachers for the student called CHRISSY NABOZNY?",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"",
        "query": "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "book_press",
        "query": "SELECT title FROM book ORDER BY release_date DESC",
        "question": "Sort all the books in descending order of release date, and return the book titles.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM book ORDER BY release_date DESC"
    },
    {
        "db_id": "book_press",
        "query": "SELECT title FROM book ORDER BY release_date DESC",
        "question": "List all the book titles, sorted by their release date in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM book ORDER BY release_date DESC"
    },
    {
        "db_id": "book_press",
        "query": "SELECT title FROM book ORDER BY release_date DESC",
        "question": "Can you show me the book titles arranged by their release date from the most recent?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM book ORDER BY release_date DESC"
    },
    {
        "db_id": "book_press",
        "query": "SELECT title FROM book ORDER BY release_date DESC",
        "question": "Display the titles of all books, ordered from the newest to the oldest.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM book ORDER BY release_date DESC"
    },
    {
        "db_id": "book_press",
        "query": "SELECT title FROM book ORDER BY release_date DESC",
        "question": "I want to see all book titles, sorted from the most recently released to the oldest.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM book ORDER BY release_date DESC"
    },
    {
        "db_id": "book_press",
        "query": "SELECT title FROM book ORDER BY release_date DESC",
        "question": "Could you provide the book titles, arranged in reverse chronological order of their release dates?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM book ORDER BY release_date DESC"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
        "question": "Show the region name with at least two storms.",
        "correctness": 1,
        "gold_parse": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
        "question": "Display the names of regions that have experienced a minimum of two storms.",
        "correctness": 1,
        "gold_parse": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
        "question": "Can you list the regions where at least two storms have occurred?",
        "correctness": 1,
        "gold_parse": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
        "question": "Which regions have had two or more storms?",
        "correctness": 1,
        "gold_parse": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
        "question": "Identify the regions that have been hit by at least two storms.",
        "correctness": 1,
        "gold_parse": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
        "question": "What are the names of the regions that have witnessed two or more storms?",
        "correctness": 1,
        "gold_parse": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "riding_club",
        "question": "List the name and residence for players whose occupation is not \"Researcher\".",
        "gold_parse": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"",
        "query": "SELECT Player_name , Sponsor_name FROM player WHERE Occupation ! = value",
        "correctness": 0
    },
    {
        "db_id": "riding_club",
        "question": "Show the name and residence of players who are not working as Researchers",
        "gold_parse": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"",
        "query": "SELECT Player_name , Sponsor_name FROM player WHERE Occupation ! = value",
        "correctness": 0
    },
    {
        "db_id": "riding_club",
        "question": "Provide the names and residences of players who don't have the occupation of Researcher",
        "gold_parse": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"",
        "query": "SELECT Player_name , Sponsor_name FROM player WHERE Occupation ! = value",
        "correctness": 0
    },
    {
        "db_id": "riding_club",
        "question": "Can you display the names and living places of players who aren't Researchers?",
        "gold_parse": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"",
        "query": "SELECT Player_name , Sponsor_name FROM player WHERE Occupation ! = value",
        "correctness": 0
    },
    {
        "db_id": "riding_club",
        "question": "I need the names and residences of players whose job isn't Researcher",
        "gold_parse": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"",
        "query": "SELECT Player_name , Sponsor_name FROM player WHERE Occupation ! = value",
        "correctness": 0
    },
    {
        "db_id": "riding_club",
        "question": "What are the names and residences of players who aren't employed as Researchers?",
        "gold_parse": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"",
        "query": "SELECT Player_name , Sponsor_name FROM player WHERE Occupation ! = value",
        "correctness": 0
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100",
        "question": "On what dates did the bakery sell more than 100 dollars worth of goods in total?",
        "correctness": 1,
        "gold_parse": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100",
        "question": "Can you tell me the dates when the bakery's total sales exceeded 100 dollars?",
        "correctness": 1,
        "gold_parse": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100",
        "question": "What were the dates when the bakery had total sales of over 100 dollars?",
        "correctness": 1,
        "gold_parse": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100",
        "question": "On which dates did the total sales of the bakery surpass 100 dollars?",
        "correctness": 1,
        "gold_parse": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100",
        "question": "Could you list the dates when the bakery made more than 100 dollars in total sales?",
        "correctness": 1,
        "gold_parse": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100",
        "question": "Identify the dates on which the bakery's total sales were greater than 100 dollars.",
        "correctness": 1,
        "gold_parse": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies WHERE rating  =  'null'",
        "question": "What are the names of movies that do not have any ratings?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies WHERE rating  =  'null'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies WHERE rating  =  'null'",
        "question": "Can you list the movies that have not been rated yet?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies WHERE rating  =  'null'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies WHERE rating  =  'null'",
        "question": "Which movies have zero ratings?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies WHERE rating  =  'null'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies WHERE rating  =  'null'",
        "question": "What are the titles of films without any ratings?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies WHERE rating  =  'null'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies WHERE rating  =  'null'",
        "question": "Could you tell me the names of movies that lack ratings?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies WHERE rating  =  'null'"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies WHERE rating  =  'null'",
        "question": "Identify the movies that have no ratings at all.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies WHERE rating  =  'null'"
    },
    {
        "db_id": "scientist_1",
        "question": "What are the names of scientists who are assigned to any project?",
        "gold_parse": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn",
        "query": "SELECT Name FROM Scientists WHERE Name NOT IN ( SELECT Name FROM Scientists )",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "Can you list the names of scientists who are working on any project?",
        "gold_parse": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn",
        "query": "SELECT Name FROM Scientists WHERE Name NOT IN ( SELECT Name FROM Scientists )",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "Who are the scientists assigned to any project?",
        "gold_parse": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn",
        "query": "SELECT Name FROM Scientists WHERE Name NOT IN ( SELECT Name FROM Scientists )",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "Could you tell me the names of scientists involved in any project?",
        "gold_parse": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn",
        "query": "SELECT Name FROM Scientists WHERE Name NOT IN ( SELECT Name FROM Scientists )",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "I'd like to know the names of scientists who are part of any project.",
        "gold_parse": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn",
        "query": "SELECT Name FROM Scientists WHERE Name NOT IN ( SELECT Name FROM Scientists )",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What are the names of the scientists who are participating in any project?",
        "gold_parse": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn",
        "query": "SELECT Name FROM Scientists WHERE Name NOT IN ( SELECT Name FROM Scientists )",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'",
        "question": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'",
        "question": "What is the count of proteins linked to an institution established post 1880 or a private institution?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'",
        "question": "Can you tell me the number of proteins related to an institution that was founded after 1880 or is a private institution?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'",
        "question": "What's the total number of proteins connected to an institution that was set up after 1880 or is of private type?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'",
        "question": "How many proteins are linked to an institution that was started after the year 1880 or is a private institution?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'",
        "question": "What is the total count of proteins associated with an institution that was created after 1880 or is a private institution?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'"
    },
    {
        "db_id": "solvency_ii",
        "question": "Show the names of products and the number of events they are in.",
        "gold_parse": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name",
        "query": "SELECT Product_Name , Count ( * ) FROM Products GROUP BY Product_Name",
        "correctness": 0
    },
    {
        "db_id": "solvency_ii",
        "question": "Display the product names along with the count of events they are involved in.",
        "gold_parse": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name",
        "query": "SELECT Product_Name , Count ( * ) FROM Products GROUP BY Product_Name",
        "correctness": 0
    },
    {
        "db_id": "solvency_ii",
        "question": "Can you list the names of products and how many events they are part of?",
        "gold_parse": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name",
        "query": "SELECT Product_Name , Count ( * ) FROM Products GROUP BY Product_Name",
        "correctness": 0
    },
    {
        "db_id": "solvency_ii",
        "question": "I want to see the names of products and the number of events they participate in.",
        "gold_parse": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name",
        "query": "SELECT Product_Name , Count ( * ) FROM Products GROUP BY Product_Name",
        "correctness": 0
    },
    {
        "db_id": "solvency_ii",
        "question": "Provide the names of products and the total number of events they are in.",
        "gold_parse": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name",
        "query": "SELECT Product_Name , Count ( * ) FROM Products GROUP BY Product_Name",
        "correctness": 0
    },
    {
        "db_id": "solvency_ii",
        "question": "Reveal the names of products and the count of events they are associated with.",
        "gold_parse": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name",
        "query": "SELECT Product_Name , Count ( * ) FROM Products GROUP BY Product_Name",
        "correctness": 0
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'",
        "question": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.",
        "correctness": 1,
        "gold_parse": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'",
        "question": "What is the name and price of the bike that both 'Bradley Wiggins' and 'Antonio Tauler' own?",
        "correctness": 1,
        "gold_parse": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'",
        "question": "Can you provide the name and price of the bike that is in possession of both 'Bradley Wiggins' and 'Antonio Tauler'?",
        "correctness": 1,
        "gold_parse": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'",
        "question": "What's the name and cost of the bike that is owned by both cyclists 'Bradley Wiggins' and 'Antonio Tauler'?",
        "correctness": 1,
        "gold_parse": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'",
        "question": "Could you list the name and price of the bike that 'Bradley Wiggins' and 'Antonio Tauler' both have?",
        "correctness": 1,
        "gold_parse": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'",
        "question": "Identify the bike with its name and price that is owned by both 'Bradley Wiggins' and 'Antonio Tauler'.",
        "correctness": 1,
        "gold_parse": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1",
        "question": "Find the average points and average ages of all spokesmen whose rank position is 1.",
        "correctness": 1,
        "gold_parse": "SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1",
        "question": "What is the average age and average points of all spokesmen who are ranked first?",
        "correctness": 1,
        "gold_parse": "SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1",
        "question": "Can you tell me the average points and average ages of all spokesmen who hold the first rank?",
        "correctness": 1,
        "gold_parse": "SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1",
        "question": "What are the mean points and mean ages of all spokesmen with a rank of 1?",
        "correctness": 1,
        "gold_parse": "SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1",
        "question": "Could you find the average age and points for all spokesmen who are in the top rank?",
        "correctness": 1,
        "gold_parse": "SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1",
        "question": "I'd like to know the average points and ages of all spokesmen who are ranked number 1.",
        "correctness": 1,
        "gold_parse": "SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1"
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who are liked by Jack?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT grade FROM Highschooler WHERE name = 'Jack'));",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Who are the high school students that Jack likes?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT grade FROM Highschooler WHERE name = 'Jack'));",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Can you list the highschoolers that are favored by Jack?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT grade FROM Highschooler WHERE name = 'Jack'));",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Which highschoolers does Jack have a liking for?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT grade FROM Highschooler WHERE name = 'Jack'));",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Identify the highschoolers who are liked by Jack.",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT grade FROM Highschooler WHERE name = 'Jack'));",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Who are the highschool students that are on Jack's liked list?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT grade FROM Highschooler WHERE name = 'Jack'));",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the names of the courses that have just one student enrollment.",
        "gold_parse": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1",
        "query": "SELECT course_name FROM Courses",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the names of the courses with only one student enrolled?",
        "gold_parse": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1",
        "query": "SELECT course_name FROM Courses",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Can you list the courses that have a single student enrollment?",
        "gold_parse": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1",
        "query": "SELECT course_name FROM Courses",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Which courses have just one student enrolled?",
        "gold_parse": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1",
        "query": "SELECT course_name FROM Courses",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Identify the courses that have only one student enrollment.",
        "gold_parse": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1",
        "query": "SELECT course_name FROM Courses",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Show me the courses that have just one student signed up.",
        "gold_parse": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1",
        "query": "SELECT course_name FROM Courses",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "query": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC",
        "question": "What are the names and damage in millions for storms, ordered by their max speeds descending?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC",
        "question": "Can you list the names and damage in millions for storms, sorted by their maximum speeds in a descending order?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC",
        "question": "Could you provide the names of storms along with their damage in millions, arranged by their top speeds in a descending manner?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC",
        "question": "I'd like to see the names and damage in millions for storms, ordered from the fastest to the slowest.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC",
        "question": "Show me the names and damage in millions for storms, ranked by their highest speeds in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC",
        "question": "What are the storm names and their corresponding damage in millions, sorted by their peak speeds from highest to lowest?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC"
    },
    {
        "db_id": "dorm_1",
        "question": "Find the number and average age of students living in each city.",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",
        "query": "SELECT city_code , Avg ( Age ) FROM Student GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the count and average age of students residing in each city?",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",
        "query": "SELECT city_code , Avg ( Age ) FROM Student GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Can you provide the total number and mean age of students in each city?",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",
        "query": "SELECT city_code , Avg ( Age ) FROM Student GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What's the quantity and average age of students in every city?",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",
        "query": "SELECT city_code , Avg ( Age ) FROM Student GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Could you tell me the number of students and their average age in each city?",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",
        "query": "SELECT city_code , Avg ( Age ) FROM Student GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "I want to know the total number and average age of students living in different cities.",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",
        "query": "SELECT city_code , Avg ( Age ) FROM Student GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name , ICAO FROM airport GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "Can you provide the id, name, and IATA code of the airport with the highest number of flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name , ICAO FROM airport GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "Which airport, identified by id, name, and IATA code, had the most flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name , ICAO FROM airport GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What are the id, name, and IATA code of the airport that recorded the highest number of flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name , ICAO FROM airport GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "I need the id, name, and IATA code of the airport that had the maximum number of flights.",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name , ICAO FROM airport GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "Could you tell me the id, name, and IATA code of the airport that saw the most flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name , ICAO FROM airport GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "question": "What are the different card type codes, and how many different customers hold each type?",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "question": "Can you list the various card type codes and the number of unique customers for each?",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "question": "What are the unique card type codes and the count of distinct customers who have them?",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "question": "Could you tell me the different card type codes and how many customers have each one?",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "question": "I'd like to know the different card type codes and the number of customers who hold each type.",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "question": "What are the various card type codes and the respective customer count for each?",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
        "question": "What is the average bike availablility for stations not in Palo Alto?",
        "correctness": 1,
        "gold_parse": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
        "question": "What's the mean availability of bikes for stations outside of Palo Alto?",
        "correctness": 1,
        "gold_parse": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
        "question": "Can you tell me the average number of bikes available at stations that are not in Palo Alto?",
        "correctness": 1,
        "gold_parse": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
        "question": "What is the mean bike availability for stations that aren't in Palo Alto?",
        "correctness": 1,
        "gold_parse": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
        "question": "Could you provide the average bike availability for stations not located in Palo Alto?",
        "correctness": 1,
        "gold_parse": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
        "question": "What is the average availability of bikes at stations not situated in Palo Alto?",
        "correctness": 1,
        "gold_parse": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id",
        "question": "What are the names and total rental hours for each vehicle?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id",
        "question": "Can you provide the names and total hours rented for each vehicle?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id",
        "question": "What are the vehicle names and their total hours of rental?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id",
        "question": "Could you list the names of the vehicles and their total rental duration?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id",
        "question": "I need to know the names of the vehicles and how many hours they were rented.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id",
        "question": "What are the names of the vehicles and the total hours they have been rented?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id"
    },
    {
        "db_id": "inn_1",
        "question": "What are the first and last names of people who payed more than the rooms' base prices?",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
        "query": "SELECT FirstName , LastName FROM Reservations WHERE Rate > value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Can you provide the first and last names of individuals who paid above the base price for their rooms?",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
        "query": "SELECT FirstName , LastName FROM Reservations WHERE Rate > value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Who are the people that paid more than the base price for their rooms, and what are their first and last names?",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
        "query": "SELECT FirstName , LastName FROM Reservations WHERE Rate > value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "I need the first and last names of those who have paid more than the base price for their rooms.",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
        "query": "SELECT FirstName , LastName FROM Reservations WHERE Rate > value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Could you list the first and last names of people who have paid in excess of the rooms' base prices?",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
        "query": "SELECT FirstName , LastName FROM Reservations WHERE Rate > value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What are the names of the people who have paid more than the standard room rate?",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
        "query": "SELECT FirstName , LastName FROM Reservations WHERE Rate > value",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "query": "SELECT count(*) FROM track",
        "question": "How many tracks do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM track"
    },
    {
        "db_id": "race_track",
        "query": "SELECT count(*) FROM track",
        "question": "What is the total number of tracks?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM track"
    },
    {
        "db_id": "race_track",
        "query": "SELECT count(*) FROM track",
        "question": "Can you count the total tracks?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM track"
    },
    {
        "db_id": "race_track",
        "query": "SELECT count(*) FROM track",
        "question": "What's the count of all tracks?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM track"
    },
    {
        "db_id": "race_track",
        "query": "SELECT count(*) FROM track",
        "question": "How many total tracks are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM track"
    },
    {
        "db_id": "race_track",
        "query": "SELECT count(*) FROM track",
        "question": "Can you tell me the total number of tracks we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM track"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM artist",
        "question": "How many artists do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM artist"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM artist",
        "question": "What is the total number of artists?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM artist"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM artist",
        "question": "Can you tell me the count of artists?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM artist"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM artist",
        "question": "What's the count of artists we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM artist"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM artist",
        "question": "Do we know the total number of artists?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM artist"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM artist",
        "question": "Could you tell me how many artists are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM artist"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "question": "Can you provide the ids of all trips that had a duration equal to the average trip duration in the zip code 94103?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "question": "What are the trip ids for trips that lasted as long as the average trip duration in the zip code 94103?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "question": "Could you list the ids of all trips that had the same duration as the average trip duration in the zip code 94103?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "question": "Identify the ids of all trips that had a duration matching the average trip duration in the zip code 94103?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "question": "What are the ids of all trips that had a duration equivalent to the average trip duration in the zip code 94103?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code and description of the most common student address type?",
        "correctness": 1,
        "gold_parse": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Can you tell me the code and description of the most frequently occurring student address type?",
        "correctness": 1,
        "gold_parse": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What's the code and description for the student address type that appears most often?",
        "correctness": 1,
        "gold_parse": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Could you provide the code and description of the most prevalent student address type?",
        "correctness": 1,
        "gold_parse": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "I need the code and description of the most common type of student address.",
        "correctness": 1,
        "gold_parse": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code and description for the most frequently used student address type?",
        "correctness": 1,
        "gold_parse": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain",
        "question": "How many vehicles have each type of powertrain?",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain",
        "question": "What is the count of vehicles for each powertrain type?",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain",
        "question": "Can you tell me the number of vehicles per powertrain type?",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain",
        "question": "What's the total number of vehicles for each type of powertrain?",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain",
        "question": "How many vehicles are there for each powertrain category?",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain",
        "question": "Give me the count of vehicles according to each powertrain type.",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
        "question": "For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
        "question": "Provide the reviewer name, movie title, and star rating where the reviewer's name matches the director's name.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
        "question": "Can you show the reviewer name, movie title, and number of stars where the reviewer and the director are the same person?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
        "question": "I need to see the reviewer name, movie title, and star rating for any rating where the reviewer is also the director.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
        "question": "Could you list the reviewer name, movie title, and number of stars where the reviewer's name is the same as the director's name?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
        "question": "Display the reviewer name, movie title, and star rating where the reviewer's name and the director's name are identical.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "query": "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.product_id > value GROUP BY T1.product_id",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Identify the number of issues reported for each product after the date 1986-11-13 along with the product id",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "query": "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.product_id > value GROUP BY T1.product_id",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Can you provide the count of problems reported for every product post 1986-11-13 and their respective product ids?",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "query": "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.product_id > value GROUP BY T1.product_id",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What is the count of problems that have been reported for each product since 1986-11-13 and what are their product ids?",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "query": "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.product_id > value GROUP BY T1.product_id",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product, determine the number of problems reported after 1986-11-13 and list their product ids",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "query": "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.product_id > value GROUP BY T1.product_id",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Could you find out how many problems were reported for each product after 1986-11-13 and their product ids?",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "query": "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.product_id > value GROUP BY T1.product_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the number of locations.",
        "gold_parse": "SELECT count(*) FROM Ref_locations",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Display the count of locations.",
        "gold_parse": "SELECT count(*) FROM Ref_locations",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Can you provide the total number of locations?",
        "gold_parse": "SELECT count(*) FROM Ref_locations",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What is the total count of locations?",
        "gold_parse": "SELECT count(*) FROM Ref_locations",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "How many locations are there?",
        "gold_parse": "SELECT count(*) FROM Ref_locations",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Reveal the total quantity of locations.",
        "gold_parse": "SELECT count(*) FROM Ref_locations",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the addresses of the course authors or tutors with personal name \"Cathrine\"",
        "gold_parse": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"",
        "query": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = value OR personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Can you provide the addresses of course authors or tutors named 'Cathrine'?",
        "gold_parse": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"",
        "query": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = value OR personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What is the address of any course author or tutor who goes by the name 'Cathrine'?",
        "gold_parse": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"",
        "query": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = value OR personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "I'm looking for the addresses of course authors or tutors who are called 'Cathrine'.",
        "gold_parse": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"",
        "query": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = value OR personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Could you tell me the addresses of course authors or tutors who have the personal name 'Cathrine'?",
        "gold_parse": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"",
        "query": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = value OR personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "I need to find the addresses of course authors or tutors whose name is 'Cathrine'.",
        "gold_parse": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"",
        "query": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = value OR personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT song_name FROM song WHERE languages = value OR languages = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of songs that are either modern or in English?",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT song_name FROM song WHERE languages = value OR languages = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Can you list the songs that are either in the modern genre or in the English language?",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT song_name FROM song WHERE languages = value OR languages = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Identify the songs that are either modern or English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT song_name FROM song WHERE languages = value OR languages = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Show me the songs that are either categorized as modern or are in English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT song_name FROM song WHERE languages = value OR languages = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "I want to know the names of songs that are either modern or English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT song_name FROM song WHERE languages = value OR languages = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date",
        "question": "List the id of students who registered course statistics in the order of registration date.",
        "correctness": 1,
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date",
        "question": "Show the student ids who have enrolled for the statistics course, sorted by the date of registration.",
        "correctness": 1,
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date",
        "question": "Can you provide the ids of students who signed up for the statistics course in chronological order of registration?",
        "correctness": 1,
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date",
        "question": "Display the student ids who registered for the statistics course, ordered by the registration date.",
        "correctness": 1,
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date",
        "question": "What are the ids of students who have registered for the statistics course, arranged by the date they registered?",
        "correctness": 1,
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date",
        "question": "Could you list the student ids who have registered for the statistics course, in the order of their registration date?",
        "correctness": 1,
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"",
        "question": "Return the date of birth for all the guests with gender code \"Male\".",
        "correctness": 1,
        "gold_parse": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"",
        "question": "Provide the birth dates for all male guests.",
        "correctness": 1,
        "gold_parse": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"",
        "question": "What are the birth dates for guests who are male?",
        "correctness": 1,
        "gold_parse": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"",
        "question": "Can you show me the date of birth for all guests identified as male?",
        "correctness": 1,
        "gold_parse": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"",
        "question": "I need to know the birth dates for all guests with the gender code 'Male'.",
        "correctness": 1,
        "gold_parse": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"",
        "question": "Could you list the dates of birth for all male guests?",
        "correctness": 1,
        "gold_parse": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\""
    },
    {
        "db_id": "hr_1",
        "question": "Find employee with ID and name of the country presently where (s)he is working.",
        "gold_parse": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query": "SELECT T2.EMPLOYEE_ID , T1.COUNTRY_NAME FROM countries AS T1 JOIN employees AS T2 WHERE T1.COUNTRY_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Identify the employee by their ID and the country where they are currently working",
        "gold_parse": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query": "SELECT T2.EMPLOYEE_ID , T1.COUNTRY_NAME FROM countries AS T1 JOIN employees AS T2 WHERE T1.COUNTRY_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Search for an employee using their ID and the name of the country they are currently working in",
        "gold_parse": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query": "SELECT T2.EMPLOYEE_ID , T1.COUNTRY_NAME FROM countries AS T1 JOIN employees AS T2 WHERE T1.COUNTRY_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Retrieve the employee details using their ID and the country they are presently working in",
        "gold_parse": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query": "SELECT T2.EMPLOYEE_ID , T1.COUNTRY_NAME FROM countries AS T1 JOIN employees AS T2 WHERE T1.COUNTRY_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Locate the employee using their ID and the country where they are now working",
        "gold_parse": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query": "SELECT T2.EMPLOYEE_ID , T1.COUNTRY_NAME FROM countries AS T1 JOIN employees AS T2 WHERE T1.COUNTRY_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find out the employee based on their ID and the country they are working in at present",
        "gold_parse": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query": "SELECT T2.EMPLOYEE_ID , T1.COUNTRY_NAME FROM countries AS T1 JOIN employees AS T2 WHERE T1.COUNTRY_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "How many distinct official languages are there among countries of players whose positions are defenders.",
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "query": "SELECT Count ( DISTINCT Official_native_language ) FROM country",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What is the count of unique official languages spoken in the countries of players who play as defenders?",
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "query": "SELECT Count ( DISTINCT Official_native_language ) FROM country",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Can you tell me the number of different official languages in the countries of players who are defenders?",
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "query": "SELECT Count ( DISTINCT Official_native_language ) FROM country",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What's the total number of distinct official languages in the countries where defenders are from?",
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "query": "SELECT Count ( DISTINCT Official_native_language ) FROM country",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "How many different official languages are there in the countries of players who hold the position of defenders?",
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "query": "SELECT Count ( DISTINCT Official_native_language ) FROM country",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What is the total count of unique official languages in the countries of players who are in the defender position?",
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "query": "SELECT Count ( DISTINCT Official_native_language ) FROM country",
        "correctness": 0
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1",
        "question": "Find the name and id of the good with the highest average rank.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1",
        "question": "What is the name and id of the product with the top average rating?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1",
        "question": "Can you provide the name and id of the item with the maximum average score?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1",
        "question": "Identify the good with the highest average rank by its name and id.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1",
        "question": "What are the name and id of the good that has the highest average ranking?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1",
        "question": "Could you tell me the name and id of the good that has the best average rating?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the names of customers who have purchased both products Latte and Americano?",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'",
        "query": "SELECT customer_name FROM Customers WHERE payment_method = value INTERSECT SELECT customer_name FROM Customers WHERE payment_method = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Can you list the customers who have bought both Latte and Americano?",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'",
        "query": "SELECT customer_name FROM Customers WHERE payment_method = value INTERSECT SELECT customer_name FROM Customers WHERE payment_method = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Who are the customers that have purchased Latte and Americano?",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'",
        "query": "SELECT customer_name FROM Customers WHERE payment_method = value INTERSECT SELECT customer_name FROM Customers WHERE payment_method = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "I need the names of customers who have bought both Latte and Americano.",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'",
        "query": "SELECT customer_name FROM Customers WHERE payment_method = value INTERSECT SELECT customer_name FROM Customers WHERE payment_method = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Could you tell me the customers who have purchased both Latte and Americano?",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'",
        "query": "SELECT customer_name FROM Customers WHERE payment_method = value INTERSECT SELECT customer_name FROM Customers WHERE payment_method = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Identify the customers who have bought both Latte and Americano.",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'",
        "query": "SELECT customer_name FROM Customers WHERE payment_method = value INTERSECT SELECT customer_name FROM Customers WHERE payment_method = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Give the title of the prerequisite to the course International Finance.",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
        "query": "SELECT title FROM course WHERE dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the title of the prerequisite course for International Finance?",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
        "query": "SELECT title FROM course WHERE dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Can you tell me the name of the course that is a prerequisite for International Finance?",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
        "query": "SELECT title FROM course WHERE dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What prerequisite course is needed for International Finance?",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
        "query": "SELECT title FROM course WHERE dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What's the name of the prerequisite course for International Finance?",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
        "query": "SELECT title FROM course WHERE dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Which course is a prerequisite for International Finance?",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
        "query": "SELECT title FROM course WHERE dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "news_report",
        "query": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type",
        "question": "Find the average age and experience working length of journalists working on different role type.",
        "correctness": 1,
        "gold_parse": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type"
    },
    {
        "db_id": "news_report",
        "query": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type",
        "question": "What is the mean age and duration of work experience for journalists in various roles?",
        "correctness": 1,
        "gold_parse": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type"
    },
    {
        "db_id": "news_report",
        "query": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type",
        "question": "Can you determine the average age and length of work experience for journalists in different positions?",
        "correctness": 1,
        "gold_parse": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type"
    },
    {
        "db_id": "news_report",
        "query": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type",
        "question": "What's the average age and tenure of journalists across different job roles?",
        "correctness": 1,
        "gold_parse": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type"
    },
    {
        "db_id": "news_report",
        "query": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type",
        "question": "Could you find out the average age and length of service for journalists in different roles?",
        "correctness": 1,
        "gold_parse": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type"
    },
    {
        "db_id": "news_report",
        "query": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type",
        "question": "What is the average age and length of professional experience for journalists in various job roles?",
        "correctness": 1,
        "gold_parse": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products",
        "question": "What are the minimum, average, and maximum prices across all products?",
        "correctness": 1,
        "gold_parse": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products",
        "question": "Can you tell me the minimum, average, and maximum prices for all products?",
        "correctness": 1,
        "gold_parse": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products",
        "question": "What's the range of prices for all products, including minimum, average, and maximum?",
        "correctness": 1,
        "gold_parse": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products",
        "question": "Could you provide the minimum, average, and maximum prices of all products?",
        "correctness": 1,
        "gold_parse": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products",
        "question": "I'd like to know the minimum, average, and maximum prices for all products.",
        "correctness": 1,
        "gold_parse": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products",
        "question": "What are the lowest, average, and highest prices for all products?",
        "correctness": 1,
        "gold_parse": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products"
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value AND T1.MAX_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you provide all details about employees earning more than the minimum wage but less than 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value AND T1.MAX_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the details for employees who earn more than the minimum but less than 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value AND T1.MAX_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Could you show me all the data for employees whose salaries are above the minimum wage and below 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value AND T1.MAX_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "I need all the information about employees who are paid more than the minimum wage but less than 2500.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value AND T1.MAX_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What's all the data on employees earning above the minimum wage but under 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value AND T1.MAX_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;",
        "question": "Give the states or provinces corresponding to each property.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;",
        "question": "List the states or provinces for each property.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;",
        "question": "What are the states or provinces for each property?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;",
        "question": "Can you show the states or provinces associated with each property?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;",
        "question": "Identify the states or provinces for each property.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;",
        "question": "Provide the states or provinces related to each property.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "question": "Show the average age for male and female students.",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  sex FROM Student GROUP BY sex"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "question": "Display the mean age of students by gender.",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  sex FROM Student GROUP BY sex"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "question": "What is the average age of students, separated by gender?",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  sex FROM Student GROUP BY sex"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "question": "Can you provide the average age of male and female students?",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  sex FROM Student GROUP BY sex"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "question": "Find the average age for both male and female students.",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  sex FROM Student GROUP BY sex"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "question": "Calculate the mean age for students, divided by gender.",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  sex FROM Student GROUP BY sex"
    },
    {
        "db_id": "farm",
        "question": "Count the number of farms.",
        "gold_parse": "SELECT count(*) FROM farm",
        "query": "SELECT Count ( * ) FROM city",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "How many farms are there?",
        "gold_parse": "SELECT count(*) FROM farm",
        "query": "SELECT Count ( * ) FROM city",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the total number of farms?",
        "gold_parse": "SELECT count(*) FROM farm",
        "query": "SELECT Count ( * ) FROM city",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Can you tell me the count of farms?",
        "gold_parse": "SELECT count(*) FROM farm",
        "query": "SELECT Count ( * ) FROM city",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What's the count of farms?",
        "gold_parse": "SELECT count(*) FROM farm",
        "query": "SELECT Count ( * ) FROM city",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Determine the number of farms.",
        "gold_parse": "SELECT count(*) FROM farm",
        "query": "SELECT Count ( * ) FROM city",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.preferred_genre = value OR T2.languages = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of songs that are either in the modern genre or in English language?",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.preferred_genre = value OR T2.languages = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Can you list the songs that are either modern or in English?",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.preferred_genre = value OR T2.languages = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Show me the songs that are either categorized as modern or are in English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.preferred_genre = value OR T2.languages = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "I'm looking for songs that are either modern or English. What are their names?",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.preferred_genre = value OR T2.languages = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Could you provide the names of songs that fall under the modern genre or are in English language?",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.preferred_genre = value OR T2.languages = value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Identify lakes that are all smaller than 50 square kilometers in area.",
        "gold_parse": "",
        "query": "SELECT lake_name, MIN(area) AS smallest_area FROM lake GROUP BY lake_name HAVING smallest_area > 50;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Find lakes with an area less than 50 square kilometers.",
        "gold_parse": "",
        "query": "SELECT lake_name, MIN(area) AS smallest_area FROM lake GROUP BY lake_name HAVING smallest_area > 50;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which lakes have an area smaller than 50 square kilometers?",
        "gold_parse": "",
        "query": "SELECT lake_name, MIN(area) AS smallest_area FROM lake GROUP BY lake_name HAVING smallest_area > 50;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Show me lakes that are under 50 square kilometers in size.",
        "gold_parse": "",
        "query": "SELECT lake_name, MIN(area) AS smallest_area FROM lake GROUP BY lake_name HAVING smallest_area > 50;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Can you list the lakes that are not more than 50 square kilometers?",
        "gold_parse": "",
        "query": "SELECT lake_name, MIN(area) AS smallest_area FROM lake GROUP BY lake_name HAVING smallest_area > 50;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "I want to know the lakes that have less than 50 square kilometers area.",
        "gold_parse": "",
        "query": "SELECT lake_name, MIN(area) AS smallest_area FROM lake GROUP BY lake_name HAVING smallest_area > 50;",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Eduardo Martins is a customer at which company?",
        "gold_parse": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"",
        "query": "SELECT DISTINCT first_name FROM customers WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Which company does Eduardo Martins patronize?",
        "gold_parse": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"",
        "query": "SELECT DISTINCT first_name FROM customers WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Can you tell me the company where Eduardo Martins is a customer?",
        "gold_parse": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"",
        "query": "SELECT DISTINCT first_name FROM customers WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the name of the company where Eduardo Martins is a customer?",
        "gold_parse": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"",
        "query": "SELECT DISTINCT first_name FROM customers WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Eduardo Martins is a client of which company?",
        "gold_parse": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"",
        "query": "SELECT DISTINCT first_name FROM customers WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Which company has Eduardo Martins as a customer?",
        "gold_parse": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"",
        "query": "SELECT DISTINCT first_name FROM customers WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "query": "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE grade = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Who are the high school students that are both liked and have friends?",
        "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "query": "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE grade = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Can you list the names of high school students who are liked and also have friends?",
        "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "query": "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE grade = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of the high school students who have friends and are also popular?",
        "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "query": "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE grade = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Could you tell me the names of high school students who are both liked and have a circle of friends?",
        "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "query": "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE grade = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Identify the high school students who are liked and also have friends.",
        "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "query": "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE grade = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many templates do we have?",
        "gold_parse": "SELECT count(*) FROM Templates",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the total number of templates we possess?",
        "gold_parse": "SELECT count(*) FROM Templates",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Can you tell me the count of our templates?",
        "gold_parse": "SELECT count(*) FROM Templates",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What's the quantity of templates we have?",
        "gold_parse": "SELECT count(*) FROM Templates",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Do we know the total count of our templates?",
        "gold_parse": "SELECT count(*) FROM Templates",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the sum total of all our templates?",
        "gold_parse": "SELECT count(*) FROM Templates",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the names of all stations with a latitude smaller than 37.5?",
        "gold_parse": "SELECT name FROM station WHERE lat  <  37.5",
        "query": "SELECT name FROM station WHERE long < value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Can you list the names of all stations where the latitude is less than 37.5?",
        "gold_parse": "SELECT name FROM station WHERE lat  <  37.5",
        "query": "SELECT name FROM station WHERE long < value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Which stations have a latitude that is less than 37.5?",
        "gold_parse": "SELECT name FROM station WHERE lat  <  37.5",
        "query": "SELECT name FROM station WHERE long < value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Could you provide the names of all stations with a latitude below 37.5?",
        "gold_parse": "SELECT name FROM station WHERE lat  <  37.5",
        "query": "SELECT name FROM station WHERE long < value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "I'm looking for the names of all stations with a latitude under 37.5. Can you provide that?",
        "gold_parse": "SELECT name FROM station WHERE lat  <  37.5",
        "query": "SELECT name FROM station WHERE long < value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What's the names of all stations that have a latitude lower than 37.5?",
        "gold_parse": "SELECT name FROM station WHERE lat  <  37.5",
        "query": "SELECT name FROM station WHERE long < value",
        "correctness": 0
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age",
        "question": "Return the names of pilots who are younger than average, ordered by age ascending.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age",
        "question": "List the names of pilots who are below the average age in ascending order of age.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age",
        "question": "Can you show me the pilots who are younger than the average, sorted by age in ascending order?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age",
        "question": "Provide the names of pilots whose age is less than the average, arranged from youngest to oldest.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age",
        "question": "Display the pilots who are younger than the average, with their ages in ascending order.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age",
        "question": "Who are the pilots that are younger than the average, listed by increasing age?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age"
    },
    {
        "db_id": "dorm_1",
        "question": "Find the first name of students living in city PHL whose age is between 20 and 25.",
        "gold_parse": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "query": "SELECT Fname FROM Student WHERE Age BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Retrieve the first names of students residing in PHL aged between 20 and 25.",
        "gold_parse": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "query": "SELECT Fname FROM Student WHERE Age BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the first names of students who live in PHL and are aged between 20 and 25?",
        "gold_parse": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "query": "SELECT Fname FROM Student WHERE Age BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Can you list the first names of students in PHL who are between 20 and 25 years old?",
        "gold_parse": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "query": "SELECT Fname FROM Student WHERE Age BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Show me the first names of students from PHL who are 20 to 25 years old.",
        "gold_parse": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "query": "SELECT Fname FROM Student WHERE Age BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "I want to know the first names of students living in PHL who are aged 20 to 25.",
        "gold_parse": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "query": "SELECT Fname FROM Student WHERE Age BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'",
        "question": "What are the usernames and passwords of all customers whose phone number starts with '+12'?",
        "correctness": 1,
        "gold_parse": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'",
        "question": "Can you provide the usernames and passwords for all customers with a phone number beginning with '+12'?",
        "correctness": 1,
        "gold_parse": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'",
        "question": "What are the customer usernames and passwords for those with a phone number that starts with '+12'?",
        "correctness": 1,
        "gold_parse": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'",
        "question": "Could you list the usernames and passwords of all customers who have a phone number starting with '+12'?",
        "correctness": 1,
        "gold_parse": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'",
        "question": "I need the usernames and passwords of all customers whose phone number begins with '+12'.",
        "correctness": 1,
        "gold_parse": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'",
        "question": "Show me the usernames and passwords of all customers with a phone number that starts with '+12'.",
        "correctness": 1,
        "gold_parse": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id",
        "question": "For each user, return the name and the average rating of reviews given by them.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id",
        "question": "Provide the name of each user along with their average review rating.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id",
        "question": "Can you show the average rating of reviews for each user by name?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id",
        "question": "What is the average review rating for each user? Please include their names.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id",
        "question": "I'd like to see the average rating of reviews given by each user, along with their names.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id",
        "question": "Display the names of users and the average rating they give in reviews.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id"
    },
    {
        "db_id": "school_finance",
        "question": "List the amount and donor name for the largest amount of donation.",
        "gold_parse": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "query": "SELECT T2.total_budget_percent_budgeted , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show the donor name and donation amount for the highest donation.",
        "gold_parse": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "query": "SELECT T2.total_budget_percent_budgeted , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Who is the donor and what is the amount of the largest donation?",
        "gold_parse": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "query": "SELECT T2.total_budget_percent_budgeted , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Can you provide the name of the donor and the amount for the biggest donation?",
        "gold_parse": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "query": "SELECT T2.total_budget_percent_budgeted , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "What is the name of the donor and the amount of the highest donation?",
        "gold_parse": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "query": "SELECT T2.total_budget_percent_budgeted , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Display the name of the donor and the amount for the most significant donation.",
        "gold_parse": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "query": "SELECT T2.total_budget_percent_budgeted , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, population FROM city WHERE population > 1000000",
        "question": "What cities have a population over 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT city_name, population FROM city WHERE population > 1000000"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, population FROM city WHERE population > 1000000",
        "question": "Which cities boast a population greater than 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT city_name, population FROM city WHERE population > 1000000"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, population FROM city WHERE population > 1000000",
        "question": "Can you list the cities with a population exceeding 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT city_name, population FROM city WHERE population > 1000000"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, population FROM city WHERE population > 1000000",
        "question": "Identify the cities that have a population of more than 1 million.",
        "correctness": 1,
        "gold_parse": "SELECT city_name, population FROM city WHERE population > 1000000"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, population FROM city WHERE population > 1000000",
        "question": "What are the cities with a population that surpasses 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT city_name, population FROM city WHERE population > 1000000"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, population FROM city WHERE population > 1000000",
        "question": "Show me the cities that have over 1 million inhabitants.",
        "correctness": 1,
        "gold_parse": "SELECT city_name, population FROM city WHERE population > 1000000"
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the asset id, details, make and model for every asset.",
        "gold_parse": "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets",
        "query": "SELECT asset_id , asset_details , other_asset_details FROM Assets",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Show the asset id, details, make and model for all assets.",
        "gold_parse": "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets",
        "query": "SELECT asset_id , asset_details , other_asset_details FROM Assets",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Provide the asset id, details, make and model for each asset.",
        "gold_parse": "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets",
        "query": "SELECT asset_id , asset_details , other_asset_details FROM Assets",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Display the asset id, details, make and model for every asset.",
        "gold_parse": "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets",
        "query": "SELECT asset_id , asset_details , other_asset_details FROM Assets",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Can you list the asset id, details, make and model for all assets?",
        "gold_parse": "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets",
        "query": "SELECT asset_id , asset_details , other_asset_details FROM Assets",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "I want to see the asset id, details, make and model for each asset.",
        "gold_parse": "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets",
        "query": "SELECT asset_id , asset_details , other_asset_details FROM Assets",
        "correctness": 0
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id",
        "question": "Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.",
        "correctness": 1,
        "gold_parse": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id",
        "question": "Display all the meeting ids, outcomes, types and client details who attended them.",
        "correctness": 1,
        "gold_parse": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id",
        "question": "Can you list all the meeting ids, their outcomes, types and the details of the clients who attended?",
        "correctness": 1,
        "gold_parse": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id",
        "question": "I want to see all meeting ids, their outcomes, types and the client details who were present.",
        "correctness": 1,
        "gold_parse": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id",
        "question": "Provide all meeting ids, outcomes, types and the details of the attending clients.",
        "correctness": 1,
        "gold_parse": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id",
        "question": "Could you show me all the meeting ids, their outcomes, types and the details of the clients who attended them?",
        "correctness": 1,
        "gold_parse": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname, COUNT(*) FROM journal JOIN paper ON journal.journalid = paper.journalid GROUP BY journalname;",
        "question": "Show different journals and the number of papers published in each.",
        "correctness": 1,
        "gold_parse": "SELECT journalname, COUNT(*) FROM journal JOIN paper ON journal.journalid = paper.journalid GROUP BY journalname;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname, COUNT(*) FROM journal JOIN paper ON journal.journalid = paper.journalid GROUP BY journalname;",
        "question": "Display the various journals along with the count of papers published in each.",
        "correctness": 1,
        "gold_parse": "SELECT journalname, COUNT(*) FROM journal JOIN paper ON journal.journalid = paper.journalid GROUP BY journalname;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname, COUNT(*) FROM journal JOIN paper ON journal.journalid = paper.journalid GROUP BY journalname;",
        "question": "Can you list the different journals and the number of papers each has published?",
        "correctness": 1,
        "gold_parse": "SELECT journalname, COUNT(*) FROM journal JOIN paper ON journal.journalid = paper.journalid GROUP BY journalname;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname, COUNT(*) FROM journal JOIN paper ON journal.journalid = paper.journalid GROUP BY journalname;",
        "question": "Show me the different journals and how many papers were published in each.",
        "correctness": 1,
        "gold_parse": "SELECT journalname, COUNT(*) FROM journal JOIN paper ON journal.journalid = paper.journalid GROUP BY journalname;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname, COUNT(*) FROM journal JOIN paper ON journal.journalid = paper.journalid GROUP BY journalname;",
        "question": "I want to see the different journals and the quantity of papers published in each.",
        "correctness": 1,
        "gold_parse": "SELECT journalname, COUNT(*) FROM journal JOIN paper ON journal.journalid = paper.journalid GROUP BY journalname;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname, COUNT(*) FROM journal JOIN paper ON journal.journalid = paper.journalid GROUP BY journalname;",
        "question": "Present the distinct journals and the count of papers published in each one.",
        "correctness": 1,
        "gold_parse": "SELECT journalname, COUNT(*) FROM journal JOIN paper ON journal.journalid = paper.journalid GROUP BY journalname;"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "question": "Can you list the ids and names of the web accelerators that work with at least two browsers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "question": "What are the identifiers and names of the web accelerators that support multiple browsers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "question": "Could you provide the ids and names of the web accelerators that are compatible with more than one browser?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "question": "I need the ids and names of the web accelerators that can operate with two or more browsers. Can you provide that?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "question": "What are the ids and names of the web accelerators that can function with at least two different browsers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000",
        "question": "Find the name and email of the users who have more than 1000 followers.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000",
        "question": "Retrieve the names and emails of users with over 1000 followers.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000",
        "question": "Can you show me the names and emails of users who have more than 1000 followers?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000",
        "question": "I need to know the names and emails of users who have a follower count exceeding 1000.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000",
        "question": "Who are the users with more than 1000 followers? I need their names and emails.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000",
        "question": "Provide the names and emails of users who have amassed more than 1000 followers.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5",
        "question": "What are the titles of all movies that have between 3 and 5 stars?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5",
        "question": "Can you list the titles of movies rated between 3 and 5 stars?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5",
        "question": "What are the names of films that have a rating of 3 to 5 stars?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5",
        "question": "Could you provide the titles of all movies with a star rating from 3 to 5?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5",
        "question": "Show me the titles of movies that have received 3 to 5 stars.",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5",
        "question": "I'd like to know the titles of all movies that are rated between 3 and 5 stars.",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "question": "How many students are in each department?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "question": "What is the count of students in each department?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "question": "Can you tell me the number of students in each department?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "question": "What's the total number of students per department?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "question": "Could you provide the student count for each department?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "question": "How many students does each department have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name"
    },
    {
        "db_id": "scholar",
        "question": "What are the titles and number of cited papers for all papers?",
        "gold_parse": "",
        "query": "SELECT title, numcitedby FROM paper WHERE numcitedby = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Can you list the titles and the number of times each paper has been cited?",
        "gold_parse": "",
        "query": "SELECT title, numcitedby FROM paper WHERE numcitedby = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the names and citation counts of all papers?",
        "gold_parse": "",
        "query": "SELECT title, numcitedby FROM paper WHERE numcitedby = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Could you provide the titles and citation numbers for all papers?",
        "gold_parse": "",
        "query": "SELECT title, numcitedby FROM paper WHERE numcitedby = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "I need to know the titles and how many times each paper was cited.",
        "gold_parse": "",
        "query": "SELECT title, numcitedby FROM paper WHERE numcitedby = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Show me the titles of all papers and their respective citation counts.",
        "gold_parse": "",
        "query": "SELECT title, numcitedby FROM paper WHERE numcitedby = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Count the number of clubs for which the student named \"Eric Tai\" is a member.",
        "gold_parse": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "How many clubs does the student named 'Eric Tai' belong to?",
        "gold_parse": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "What is the total number of clubs that 'Eric Tai' is a member of?",
        "gold_parse": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Can you count the clubs where 'Eric Tai' is a member?",
        "gold_parse": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Determine the number of clubs 'Eric Tai' is involved in.",
        "gold_parse": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find out the number of clubs where 'Eric Tai' is a member.",
        "gold_parse": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_status_code FROM Ref_Document_Status;",
        "question": "What document status codes do we have?",
        "correctness": 1,
        "gold_parse": "SELECT document_status_code FROM Ref_Document_Status;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_status_code FROM Ref_Document_Status;",
        "question": "What are the different document status codes available?",
        "correctness": 1,
        "gold_parse": "SELECT document_status_code FROM Ref_Document_Status;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_status_code FROM Ref_Document_Status;",
        "question": "Can you list the document status codes?",
        "correctness": 1,
        "gold_parse": "SELECT document_status_code FROM Ref_Document_Status;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_status_code FROM Ref_Document_Status;",
        "question": "What are the various document status codes we possess?",
        "correctness": 1,
        "gold_parse": "SELECT document_status_code FROM Ref_Document_Status;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_status_code FROM Ref_Document_Status;",
        "question": "What types of document status codes exist?",
        "correctness": 1,
        "gold_parse": "SELECT document_status_code FROM Ref_Document_Status;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_status_code FROM Ref_Document_Status;",
        "question": "Could you tell me the document status codes we have?",
        "correctness": 1,
        "gold_parse": "SELECT document_status_code FROM Ref_Document_Status;"
    },
    {
        "db_id": "world_1",
        "question": "What region does Angola belong to and what is its population?",
        "gold_parse": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "query": "SELECT Region , Population FROM country",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the region of Angola and its population?",
        "gold_parse": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "query": "SELECT Region , Population FROM country",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Can you tell me the region and population of Angola?",
        "gold_parse": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "query": "SELECT Region , Population FROM country",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the region and population statistics for Angola?",
        "gold_parse": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "query": "SELECT Region , Population FROM country",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Could you provide the region and population of Angola?",
        "gold_parse": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "query": "SELECT Region , Population FROM country",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "I'd like to know the region Angola is in and its population.",
        "gold_parse": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "query": "SELECT Region , Population FROM country",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "What are the different organization IDs of authors?",
        "gold_parse": "",
        "query": "SELECT DISTINCT oid FROM author;",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "Can you list the unique organization IDs associated with authors?",
        "gold_parse": "",
        "query": "SELECT DISTINCT oid FROM author;",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "What are the various IDs of organizations that authors belong to?",
        "gold_parse": "",
        "query": "SELECT DISTINCT oid FROM author;",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "Could you show me the distinct organization IDs for authors?",
        "gold_parse": "",
        "query": "SELECT DISTINCT oid FROM author;",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "What are the different IDs for author's organizations?",
        "gold_parse": "",
        "query": "SELECT DISTINCT oid FROM author;",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "Can you provide the different organization IDs where authors are affiliated?",
        "gold_parse": "",
        "query": "SELECT DISTINCT oid FROM author;",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the state in the US with the most invoices.",
        "gold_parse": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT billing_state FROM invoices GROUP BY billing_state ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Which state in the US has the highest number of invoices?",
        "gold_parse": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT billing_state FROM invoices GROUP BY billing_state ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Identify the US state with the maximum invoices.",
        "gold_parse": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT billing_state FROM invoices GROUP BY billing_state ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Can you tell me the state in the US that has the most invoices?",
        "gold_parse": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT billing_state FROM invoices GROUP BY billing_state ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the US state with the most invoices?",
        "gold_parse": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT billing_state FROM invoices GROUP BY billing_state ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Show me the state in the US that has the most number of invoices.",
        "gold_parse": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT billing_state FROM invoices GROUP BY billing_state ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many flights have destination ATO?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "query": "SELECT Count ( * ) FROM airports WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What is the count of flights heading to ATO?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "query": "SELECT Count ( * ) FROM airports WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Can you tell me the number of flights with ATO as their destination?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "query": "SELECT Count ( * ) FROM airports WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What's the total number of flights destined for ATO?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "query": "SELECT Count ( * ) FROM airports WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many flights are there that are going to ATO?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "query": "SELECT Count ( * ) FROM airports WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What is the total count of flights that have ATO as their destination?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "query": "SELECT Count ( * ) FROM airports WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "What are the names of authors with the highest author ID in writes?",
        "gold_parse": "",
        "query": "SELECT name FROM author WHERE aid = (SELECT MAX(aid) FROM writes);",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "Who are the authors with the highest author ID in the writes table?",
        "gold_parse": "",
        "query": "SELECT name FROM author WHERE aid = (SELECT MAX(aid) FROM writes);",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "Can you list the authors who have the highest author ID in writes?",
        "gold_parse": "",
        "query": "SELECT name FROM author WHERE aid = (SELECT MAX(aid) FROM writes);",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "What is the name of the author with the maximum author ID in writes?",
        "gold_parse": "",
        "query": "SELECT name FROM author WHERE aid = (SELECT MAX(aid) FROM writes);",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "Could you tell me the authors with the top author ID in writes?",
        "gold_parse": "",
        "query": "SELECT name FROM author WHERE aid = (SELECT MAX(aid) FROM writes);",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "Who are the authors in writes with the highest author ID?",
        "gold_parse": "",
        "query": "SELECT name FROM author WHERE aid = (SELECT MAX(aid) FROM writes);",
        "correctness": 0
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
        "question": "What are the names of pilots who own both Piper Cub and the B-52 Bomber?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
        "question": "Can you list the pilots who have both a Piper Cub and a B-52 Bomber in their possession?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
        "question": "Who are the pilots that own both a Piper Cub and a B-52 Bomber?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
        "question": "Identify the pilots who own both a Piper Cub and a B-52 Bomber.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
        "question": "Which pilots have both a Piper Cub and a B-52 Bomber?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
        "question": "Could you tell me the names of pilots who own both a Piper Cub and a B-52 Bomber?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'"
    },
    {
        "db_id": "bike_1",
        "question": "For each zip code, return the average mean temperature of August there.",
        "gold_parse": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
        "query": "SELECT Avg ( duration ) , start_date FROM trip GROUP BY zip_code",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the average mean temperature for each zip code in August?",
        "gold_parse": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
        "query": "SELECT Avg ( duration ) , start_date FROM trip GROUP BY zip_code",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Can you provide the average mean temperature of August for each zip code?",
        "gold_parse": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
        "query": "SELECT Avg ( duration ) , start_date FROM trip GROUP BY zip_code",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What's the mean temperature in August for every zip code, on average?",
        "gold_parse": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
        "query": "SELECT Avg ( duration ) , start_date FROM trip GROUP BY zip_code",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Could you tell me the average mean temperature in August for each zip code?",
        "gold_parse": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
        "query": "SELECT Avg ( duration ) , start_date FROM trip GROUP BY zip_code",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "I'd like to know the average mean temperature for all zip codes in August.",
        "gold_parse": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
        "query": "SELECT Avg ( duration ) , start_date FROM trip GROUP BY zip_code",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the number of professionals who have ever treated dogs.",
        "gold_parse": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "query": "SELECT Count ( * ) FROM Dogs WHERE weight = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "How many professionals have treated dogs in their career?",
        "gold_parse": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "query": "SELECT Count ( * ) FROM Dogs WHERE weight = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the count of professionals who have provided treatment to dogs?",
        "gold_parse": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "query": "SELECT Count ( * ) FROM Dogs WHERE weight = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Can you tell me the number of professionals who have treated dogs?",
        "gold_parse": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "query": "SELECT Count ( * ) FROM Dogs WHERE weight = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What's the total number of professionals who have had dogs as their patients?",
        "gold_parse": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "query": "SELECT Count ( * ) FROM Dogs WHERE weight = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Determine the number of professionals who have given treatment to dogs.",
        "gold_parse": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "query": "SELECT Count ( * ) FROM Dogs WHERE weight = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had an average humidity over 50 and average visibility more than 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Can you tell me the count of days where the average humidity was greater than 50 and the average visibility exceeded 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What's the total number of days with an average humidity above 50 and an average visibility higher than 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Could you provide the number of days that had an average humidity of more than 50 and an average visibility of over 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the count of days that had an average humidity surpassing 50 and an average visibility beyond 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT Date FROM perpetrator ORDER BY Killed DESC",
        "question": "List the date of perpetrators in descending order of the number of people killed.",
        "correctness": 1,
        "gold_parse": "SELECT Date FROM perpetrator ORDER BY Killed DESC"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT Date FROM perpetrator ORDER BY Killed DESC",
        "question": "Show the dates when perpetrators committed crimes, sorted by the number of people killed in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT Date FROM perpetrator ORDER BY Killed DESC"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT Date FROM perpetrator ORDER BY Killed DESC",
        "question": "Can you provide the dates of the crimes committed by perpetrators, ordered by the number of victims killed in a descending manner?",
        "correctness": 1,
        "gold_parse": "SELECT Date FROM perpetrator ORDER BY Killed DESC"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT Date FROM perpetrator ORDER BY Killed DESC",
        "question": "What are the dates of the crimes committed by perpetrators, ranked by the number of fatalities in a descending order?",
        "correctness": 1,
        "gold_parse": "SELECT Date FROM perpetrator ORDER BY Killed DESC"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT Date FROM perpetrator ORDER BY Killed DESC",
        "question": "Display the dates on which perpetrators committed crimes, arranged by the number of deaths in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT Date FROM perpetrator ORDER BY Killed DESC"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT Date FROM perpetrator ORDER BY Killed DESC",
        "question": "Could you list the dates when crimes were committed by perpetrators, sorted in descending order by the number of people they killed?",
        "correctness": 1,
        "gold_parse": "SELECT Date FROM perpetrator ORDER BY Killed DESC"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)",
        "question": "What are the names of hosts who did not host any party in our record?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)",
        "question": "Can you list the hosts who have no record of hosting any party?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)",
        "question": "Who are the hosts that haven't hosted any parties according to our records?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)",
        "question": "Could you provide the names of hosts who have never hosted a party in our database?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)",
        "question": "Identify the hosts who have not hosted any party as per our records.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)",
        "question": "Who are the hosts with no party hosting history in our records?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)"
    },
    {
        "db_id": "imdb",
        "question": "Which TV series have a recorded budget?",
        "gold_parse": "",
        "query": "SELECT title FROM tv_series WHERE budget IS NULL;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the TV shows that have a documented budget?",
        "gold_parse": "",
        "query": "SELECT title FROM tv_series WHERE budget IS NULL;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Can you list the TV series with a known budget?",
        "gold_parse": "",
        "query": "SELECT title FROM tv_series WHERE budget IS NULL;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which television programs have a budget record?",
        "gold_parse": "",
        "query": "SELECT title FROM tv_series WHERE budget IS NULL;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Identify the TV series that have a budget listed.",
        "gold_parse": "",
        "query": "SELECT title FROM tv_series WHERE budget IS NULL;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What TV series have a budget that has been recorded?",
        "gold_parse": "",
        "query": "SELECT title FROM tv_series WHERE budget IS NULL;",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
        "question": "What are the names of students who have taken Statistics courses?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
        "question": "Can you list the students who have enrolled in Statistics courses?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
        "question": "Who are the students that have taken courses in Statistics?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
        "question": "Identify the students who have participated in Statistics classes.",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
        "question": "Which students have been part of Statistics courses?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
        "question": "Give me the names of students who have attended Statistics courses.",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Orchestra, T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID;",
        "question": "Show the names of orchestras and their conductors.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Orchestra, T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Orchestra, T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID;",
        "question": "Display the names of orchestras along with their conductors",
        "correctness": 1,
        "gold_parse": "SELECT T1.Orchestra, T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Orchestra, T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID;",
        "question": "Can you list the names of orchestras and their respective conductors?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Orchestra, T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Orchestra, T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID;",
        "question": "I want to see the names of orchestras and who conducts them",
        "correctness": 1,
        "gold_parse": "SELECT T1.Orchestra, T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Orchestra, T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID;",
        "question": "Provide the names of orchestras and their conductors",
        "correctness": 1,
        "gold_parse": "SELECT T1.Orchestra, T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Orchestra, T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID;",
        "question": "Could you show me the names of orchestras and their conductors?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Orchestra, T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID;"
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the age of the oldest dog?",
        "gold_parse": "SELECT max(age) FROM Dogs",
        "query": "select age from Dogs order by date_adopted desc limit value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "How old is the eldest dog?",
        "gold_parse": "SELECT max(age) FROM Dogs",
        "query": "select age from Dogs order by date_adopted desc limit value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Can you tell me the age of the oldest dog?",
        "gold_parse": "SELECT max(age) FROM Dogs",
        "query": "select age from Dogs order by date_adopted desc limit value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What's the age of the dog that's lived the longest?",
        "gold_parse": "SELECT max(age) FROM Dogs",
        "query": "select age from Dogs order by date_adopted desc limit value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the age of the most aged dog?",
        "gold_parse": "SELECT max(age) FROM Dogs",
        "query": "select age from Dogs order by date_adopted desc limit value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Could you tell me the age of the oldest dog?",
        "gold_parse": "SELECT max(age) FROM Dogs",
        "query": "select age from Dogs order by date_adopted desc limit value",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the number of authors for each paper.",
        "gold_parse": "",
        "query": "SELECT title, COUNT(authorid) FROM paper JOIN writes ON paper.paperid = writes.paperid GROUP BY title;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "How many authors does each paper have?",
        "gold_parse": "",
        "query": "SELECT title, COUNT(authorid) FROM paper JOIN writes ON paper.paperid = writes.paperid GROUP BY title;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What is the author count for each paper?",
        "gold_parse": "",
        "query": "SELECT title, COUNT(authorid) FROM paper JOIN writes ON paper.paperid = writes.paperid GROUP BY title;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Can you tell me the number of authors for every paper?",
        "gold_parse": "",
        "query": "SELECT title, COUNT(authorid) FROM paper JOIN writes ON paper.paperid = writes.paperid GROUP BY title;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Determine the quantity of authors for each paper.",
        "gold_parse": "",
        "query": "SELECT title, COUNT(authorid) FROM paper JOIN writes ON paper.paperid = writes.paperid GROUP BY title;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What's the total number of authors for each individual paper?",
        "gold_parse": "",
        "query": "SELECT title, COUNT(authorid) FROM paper JOIN writes ON paper.paperid = writes.paperid GROUP BY title;",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Who performed the song named \"Badlands\"? Show the first name and the last name.",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Who is the artist of the song titled 'Badlands'? Display their first and last name.",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Can you tell me the first and last name of the performer of the song 'Badlands'?",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the first and last name of the singer who performed 'Badlands'?",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Who sang the song 'Badlands'? I need their first and last name.",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "I'm looking for the first and last name of the person who performed the song 'Badlands'.",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "correctness": 0
    },
    {
        "db_id": "book_1",
        "query": "SELECT name ,  address FROM Client",
        "question": "What are the names and addressed of all clients?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  address FROM Client"
    },
    {
        "db_id": "book_1",
        "query": "SELECT name ,  address FROM Client",
        "question": "Can you provide the names and addresses of all clients?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  address FROM Client"
    },
    {
        "db_id": "book_1",
        "query": "SELECT name ,  address FROM Client",
        "question": "What are the client names and their corresponding addresses?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  address FROM Client"
    },
    {
        "db_id": "book_1",
        "query": "SELECT name ,  address FROM Client",
        "question": "Could you list all client names and addresses?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  address FROM Client"
    },
    {
        "db_id": "book_1",
        "query": "SELECT name ,  address FROM Client",
        "question": "I need to know the names and addresses of all clients.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  address FROM Client"
    },
    {
        "db_id": "book_1",
        "query": "SELECT name ,  address FROM Client",
        "question": "What are the addresses and names of all our clients?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  address FROM Client"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT COUNT (DISTINCT team) FROM elimination",
        "question": "How many different teams have had eliminated wrestlers?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT (DISTINCT team) FROM elimination"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT COUNT (DISTINCT team) FROM elimination",
        "question": "What is the count of unique teams with wrestlers who have been eliminated?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT (DISTINCT team) FROM elimination"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT COUNT (DISTINCT team) FROM elimination",
        "question": "Can you tell me the number of distinct teams that have had wrestlers eliminated?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT (DISTINCT team) FROM elimination"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT COUNT (DISTINCT team) FROM elimination",
        "question": "What's the total number of different teams that have had wrestlers knocked out?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT (DISTINCT team) FROM elimination"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT COUNT (DISTINCT team) FROM elimination",
        "question": "How many teams have had at least one wrestler eliminated?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT (DISTINCT team) FROM elimination"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT COUNT (DISTINCT team) FROM elimination",
        "question": "What is the total number of teams that have had wrestlers disqualified?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT (DISTINCT team) FROM elimination"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum transcript date for each department?",
        "gold_parse": "",
        "query": "SELECT department_name, MAX(transcript_date) FROM Departments JOIN Transcripts ON Departments.department_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the latest transcript date for each department?",
        "gold_parse": "",
        "query": "SELECT department_name, MAX(transcript_date) FROM Departments JOIN Transcripts ON Departments.department_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Can you tell me the most recent transcript date for each department?",
        "gold_parse": "",
        "query": "SELECT department_name, MAX(transcript_date) FROM Departments JOIN Transcripts ON Departments.department_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What's the last transcript date for every department?",
        "gold_parse": "",
        "query": "SELECT department_name, MAX(transcript_date) FROM Departments JOIN Transcripts ON Departments.department_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Could you find the latest date of transcript for each department?",
        "gold_parse": "",
        "query": "SELECT department_name, MAX(transcript_date) FROM Departments JOIN Transcripts ON Departments.department_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the most recent date on which a transcript was made for each department?",
        "gold_parse": "",
        "query": "SELECT department_name, MAX(transcript_date) FROM Departments JOIN Transcripts ON Departments.department_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT avg(top_speed) FROM vehicle",
        "question": "What is the average top speed of vehicles?",
        "correctness": 1,
        "gold_parse": "SELECT avg(top_speed) FROM vehicle"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT avg(top_speed) FROM vehicle",
        "question": "What's the mean maximum speed of vehicles?",
        "correctness": 1,
        "gold_parse": "SELECT avg(top_speed) FROM vehicle"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT avg(top_speed) FROM vehicle",
        "question": "Can you tell me the average maximum speed of vehicles?",
        "correctness": 1,
        "gold_parse": "SELECT avg(top_speed) FROM vehicle"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT avg(top_speed) FROM vehicle",
        "question": "What is the mean of the top speeds for all vehicles?",
        "correctness": 1,
        "gold_parse": "SELECT avg(top_speed) FROM vehicle"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT avg(top_speed) FROM vehicle",
        "question": "Could you find the average of the top speeds of vehicles?",
        "correctness": 1,
        "gold_parse": "SELECT avg(top_speed) FROM vehicle"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT avg(top_speed) FROM vehicle",
        "question": "What is the typical top speed of vehicles?",
        "correctness": 1,
        "gold_parse": "SELECT avg(top_speed) FROM vehicle"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
        "question": "What is the name of tracks whose genre is Rock?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
        "question": "Can you tell me the names of tracks that fall under the Rock genre?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
        "question": "What are the track names for the genre Rock?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
        "question": "Could you list the names of Rock genre tracks?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
        "question": "What are the names of songs in the Rock genre?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
        "question": "I'd like to know the names of tracks in the Rock genre.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date",
        "question": "For each date, return how many distinct customers visited on that day.",
        "correctness": 1,
        "gold_parse": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date",
        "question": "For each specific day, how many unique customers were there?",
        "correctness": 1,
        "gold_parse": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date",
        "question": "Can you tell me the number of unique customers for each day?",
        "correctness": 1,
        "gold_parse": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date",
        "question": "What is the count of distinct customers for every date?",
        "correctness": 1,
        "gold_parse": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date",
        "question": "On each date, how many different customers visited?",
        "correctness": 1,
        "gold_parse": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date",
        "question": "For every date, what is the number of individual customers that visited?",
        "correctness": 1,
        "gold_parse": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the names of customers who never ordered product Latte.",
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'",
        "query": "SELECT customer_name FROM Customers EXCEPT SELECT customer_name FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Identify the customers who have not purchased a Latte.",
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'",
        "query": "SELECT customer_name FROM Customers EXCEPT SELECT customer_name FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Can you list the names of customers who have not ordered a Latte?",
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'",
        "query": "SELECT customer_name FROM Customers EXCEPT SELECT customer_name FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Who are the customers that have never bought a Latte?",
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'",
        "query": "SELECT customer_name FROM Customers EXCEPT SELECT customer_name FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Show me the customers who have never placed an order for a Latte.",
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'",
        "query": "SELECT customer_name FROM Customers EXCEPT SELECT customer_name FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Which customers have never made a purchase of a Latte?",
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'",
        "query": "SELECT customer_name FROM Customers EXCEPT SELECT customer_name FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930",
        "question": "What are the locations that have works painted before 1885 and after 1930?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930"
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930",
        "question": "Can you list the places where artworks were created before 1885 and after 1930?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930"
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930",
        "question": "What are the sites where paintings were made prior to 1885 and post 1930?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930"
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930",
        "question": "Could you tell me the locations where art was produced before the year 1885 and after the year 1930?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930"
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930",
        "question": "Where are the locations that contain artworks painted before the year 1885 and after 1930?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930"
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930",
        "question": "What are the places that hold works of art created before 1885 and after 1930?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930"
    },
    {
        "db_id": "car_1",
        "question": "What is the minimum continent ID, average continent ID, and maximum country name?",
        "gold_parse": "",
        "query": "SELECT MIN(Continent), AVG(Continent), MAX(CountryName) FROM countries;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Can you tell me the smallest continent ID, the average continent ID, and the country with the longest name?",
        "gold_parse": "",
        "query": "SELECT MIN(Continent), AVG(Continent), MAX(CountryName) FROM countries;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What's the lowest continent ID, mean continent ID, and country with the maximum name?",
        "gold_parse": "",
        "query": "SELECT MIN(Continent), AVG(Continent), MAX(CountryName) FROM countries;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Could you provide the minimum value for continent ID, the average value for continent ID, and the country with the longest name?",
        "gold_parse": "",
        "query": "SELECT MIN(Continent), AVG(Continent), MAX(CountryName) FROM countries;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "I'd like to know the least continent ID, the average continent ID, and the country with the most characters in its name.",
        "gold_parse": "",
        "query": "SELECT MIN(Continent), AVG(Continent), MAX(CountryName) FROM countries;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the minimum and average continent IDs, and the country with the maximum length name?",
        "gold_parse": "",
        "query": "SELECT MIN(Continent), AVG(Continent), MAX(CountryName) FROM countries;",
        "correctness": 0
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id",
        "question": "Count the number of staff in each meeting by meeting id.",
        "correctness": 1,
        "gold_parse": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id",
        "question": "How many staff members are present in each meeting sorted by meeting id?",
        "correctness": 1,
        "gold_parse": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id",
        "question": "Can you tell me the number of staff in each meeting, grouped by meeting id?",
        "correctness": 1,
        "gold_parse": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id",
        "question": "What is the count of staff for each meeting according to meeting id?",
        "correctness": 1,
        "gold_parse": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id",
        "question": "Determine the number of staff in each meeting by their meeting id.",
        "correctness": 1,
        "gold_parse": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id",
        "question": "By meeting id, how many staff are in each meeting?",
        "correctness": 1,
        "gold_parse": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id"
    },
    {
        "db_id": "scholar",
        "question": "Sum the author IDs for each venue.",
        "gold_parse": "",
        "query": "SELECT venuename, SUM(authorid) FROM venue JOIN paper ON venue.venueid = paper.venueid JOIN writes ON paper.paperid = writes.paperid WHERE authorid IS NOT NULL GROUP BY venuename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Calculate the total of author IDs for each venue.",
        "gold_parse": "",
        "query": "SELECT venuename, SUM(authorid) FROM venue JOIN paper ON venue.venueid = paper.venueid JOIN writes ON paper.paperid = writes.paperid WHERE authorid IS NOT NULL GROUP BY venuename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What is the sum of author IDs per venue?",
        "gold_parse": "",
        "query": "SELECT venuename, SUM(authorid) FROM venue JOIN paper ON venue.venueid = paper.venueid JOIN writes ON paper.paperid = writes.paperid WHERE authorid IS NOT NULL GROUP BY venuename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "For each venue, what is the total sum of author IDs?",
        "gold_parse": "",
        "query": "SELECT venuename, SUM(authorid) FROM venue JOIN paper ON venue.venueid = paper.venueid JOIN writes ON paper.paperid = writes.paperid WHERE authorid IS NOT NULL GROUP BY venuename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Can you find the total sum of author IDs for each venue?",
        "gold_parse": "",
        "query": "SELECT venuename, SUM(authorid) FROM venue JOIN paper ON venue.venueid = paper.venueid JOIN writes ON paper.paperid = writes.paperid WHERE authorid IS NOT NULL GROUP BY venuename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What's the aggregate of author IDs for each venue?",
        "gold_parse": "",
        "query": "SELECT venuename, SUM(authorid) FROM venue JOIN paper ON venue.venueid = paper.venueid JOIN writes ON paper.paperid = writes.paperid WHERE authorid IS NOT NULL GROUP BY venuename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the number of papers for each author.",
        "gold_parse": "",
        "query": "SELECT authorname, COUNT(paperid) FROM author JOIN writes ON author.authorid = writes.authorid WHERE paperid IS NOT NULL GROUP BY authorname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "How many papers has each author written?",
        "gold_parse": "",
        "query": "SELECT authorname, COUNT(paperid) FROM author JOIN writes ON author.authorid = writes.authorid WHERE paperid IS NOT NULL GROUP BY authorname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What is the total number of papers written by each author?",
        "gold_parse": "",
        "query": "SELECT authorname, COUNT(paperid) FROM author JOIN writes ON author.authorid = writes.authorid WHERE paperid IS NOT NULL GROUP BY authorname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Can you count the papers written by each author?",
        "gold_parse": "",
        "query": "SELECT authorname, COUNT(paperid) FROM author JOIN writes ON author.authorid = writes.authorid WHERE paperid IS NOT NULL GROUP BY authorname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Determine the number of papers each author has written.",
        "gold_parse": "",
        "query": "SELECT authorname, COUNT(paperid) FROM author JOIN writes ON author.authorid = writes.authorid WHERE paperid IS NOT NULL GROUP BY authorname;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What's the count of papers for every author?",
        "gold_parse": "",
        "query": "SELECT authorname, COUNT(paperid) FROM author JOIN writes ON author.authorid = writes.authorid WHERE paperid IS NOT NULL GROUP BY authorname;",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "question": "What are the names of artists who did not have an exhibition in 2004?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "question": "Can you list the artists who didn't hold an exhibition in 2004?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "question": "Who are the artists that had no exhibitions in the year 2004?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "question": "Identify the artists who did not participate in any exhibition in 2004.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "question": "Which artists did not have any exhibitions in 2004?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "question": "Could you tell me the names of artists who had no exhibitions in 2004?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;",
        "question": "List the names and decor of rooms that have a king bed. Sort the list by their price.",
        "correctness": 1,
        "gold_parse": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;",
        "question": "Show me the names and decor of rooms with a king bed, ordered by price.",
        "correctness": 1,
        "gold_parse": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;",
        "question": "Can you provide the names and decor of rooms that contain a king bed, sorted by their cost?",
        "correctness": 1,
        "gold_parse": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;",
        "question": "I'd like to see the names and decor of rooms that have a king bed, arranged by price.",
        "correctness": 1,
        "gold_parse": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;",
        "question": "Could you list the names and decor of rooms featuring a king bed, sorted by their price?",
        "correctness": 1,
        "gold_parse": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;",
        "question": "Display the names and decor of rooms equipped with a king bed, in order of their price.",
        "correctness": 1,
        "gold_parse": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;"
    },
    {
        "db_id": "pilot_record",
        "question": "Show the names of pilots and the number of records they have.",
        "gold_parse": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name",
        "query": "SELECT Pilot_name , Count ( * ) FROM pilot GROUP BY Pilot_name",
        "correctness": 0
    },
    {
        "db_id": "pilot_record",
        "question": "Display the names of pilots along with their record count.",
        "gold_parse": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name",
        "query": "SELECT Pilot_name , Count ( * ) FROM pilot GROUP BY Pilot_name",
        "correctness": 0
    },
    {
        "db_id": "pilot_record",
        "question": "Can you list the pilots' names and their total number of records?",
        "gold_parse": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name",
        "query": "SELECT Pilot_name , Count ( * ) FROM pilot GROUP BY Pilot_name",
        "correctness": 0
    },
    {
        "db_id": "pilot_record",
        "question": "I want to see the names of pilots and how many records they have.",
        "gold_parse": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name",
        "query": "SELECT Pilot_name , Count ( * ) FROM pilot GROUP BY Pilot_name",
        "correctness": 0
    },
    {
        "db_id": "pilot_record",
        "question": "Provide the names of pilots and the count of their records.",
        "gold_parse": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name",
        "query": "SELECT Pilot_name , Count ( * ) FROM pilot GROUP BY Pilot_name",
        "correctness": 0
    },
    {
        "db_id": "pilot_record",
        "question": "Reveal the names of pilots and the quantity of their records.",
        "gold_parse": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name",
        "query": "SELECT Pilot_name , Count ( * ) FROM pilot GROUP BY Pilot_name",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010.",
        "gold_parse": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010",
        "query": "SELECT DISTINCT Winery FROM wine WHERE Year > = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the unique names of wines made before 2000 or after 2010?",
        "gold_parse": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010",
        "query": "SELECT DISTINCT Winery FROM wine WHERE Year > = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Can you list the distinct wine names that were produced either before 2000 or after 2010?",
        "gold_parse": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010",
        "query": "SELECT DISTINCT Winery FROM wine WHERE Year > = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Identify the different names of wines that were produced prior to 2000 or post 2010.",
        "gold_parse": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010",
        "query": "SELECT DISTINCT Winery FROM wine WHERE Year > = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Show me the distinct names of wines that were made either before the year 2000 or after the year 2010.",
        "gold_parse": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010",
        "query": "SELECT DISTINCT Winery FROM wine WHERE Year > = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the various wine names produced before the year 2000 or after the year 2010?",
        "gold_parse": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010",
        "query": "SELECT DISTINCT Winery FROM wine WHERE Year > = value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT text FROM tweets WHERE text LIKE '%intern%'",
        "question": "Return the text of tweets about the topic 'intern'.",
        "correctness": 1,
        "gold_parse": "SELECT text FROM tweets WHERE text LIKE '%intern%'"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT text FROM tweets WHERE text LIKE '%intern%'",
        "question": "Show the content of tweets related to 'intern'.",
        "correctness": 1,
        "gold_parse": "SELECT text FROM tweets WHERE text LIKE '%intern%'"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT text FROM tweets WHERE text LIKE '%intern%'",
        "question": "Display the text of tweets mentioning 'intern'.",
        "correctness": 1,
        "gold_parse": "SELECT text FROM tweets WHERE text LIKE '%intern%'"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT text FROM tweets WHERE text LIKE '%intern%'",
        "question": "Provide the text from tweets discussing 'intern'.",
        "correctness": 1,
        "gold_parse": "SELECT text FROM tweets WHERE text LIKE '%intern%'"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT text FROM tweets WHERE text LIKE '%intern%'",
        "question": "Can you show the tweets that mention 'intern'?",
        "correctness": 1,
        "gold_parse": "SELECT text FROM tweets WHERE text LIKE '%intern%'"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT text FROM tweets WHERE text LIKE '%intern%'",
        "question": "What are the tweets saying about 'intern'?",
        "correctness": 1,
        "gold_parse": "SELECT text FROM tweets WHERE text LIKE '%intern%'"
    },
    {
        "db_id": "flight_2",
        "question": "How many different abbreviations are there among airlines?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Abbreviation) FROM airlines;",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What is the count of unique abbreviations used by airlines?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Abbreviation) FROM airlines;",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Can you tell me the number of distinct abbreviations present among airlines?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Abbreviation) FROM airlines;",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What's the total number of different abbreviations in the airline industry?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Abbreviation) FROM airlines;",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many unique abbreviations can be found among airlines?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Abbreviation) FROM airlines;",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What is the total count of different abbreviations used by airlines?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Abbreviation) FROM airlines;",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "question": "Show all flight number from Los Angeles.",
        "correctness": 1,
        "gold_parse": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "question": "Display all flight numbers originating from Los Angeles.",
        "correctness": 1,
        "gold_parse": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "question": "Can you list all the flight numbers that are from Los Angeles?",
        "correctness": 1,
        "gold_parse": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "question": "What are all the flight numbers that depart from Los Angeles?",
        "correctness": 1,
        "gold_parse": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "question": "I need to see all flight numbers that come from Los Angeles.",
        "correctness": 1,
        "gold_parse": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "question": "Provide all flight numbers that have Los Angeles as their departure city.",
        "correctness": 1,
        "gold_parse": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT customer_id) FROM Customer_orders",
        "question": "How many customers have an order?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Customer_orders"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT customer_id) FROM Customer_orders",
        "question": "What is the count of customers with an order?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Customer_orders"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT customer_id) FROM Customer_orders",
        "question": "Can you tell me the number of customers who have placed an order?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Customer_orders"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT customer_id) FROM Customer_orders",
        "question": "What's the total number of customers who have an order?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Customer_orders"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT customer_id) FROM Customer_orders",
        "question": "How many customers have placed an order?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Customer_orders"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT customer_id) FROM Customer_orders",
        "question": "What is the total count of customers who have made an order?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Customer_orders"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT COUNT(DISTINCT property_type_code) FROM Properties;",
        "question": "How many different property types are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT property_type_code) FROM Properties;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT COUNT(DISTINCT property_type_code) FROM Properties;",
        "question": "What is the count of unique property types?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT property_type_code) FROM Properties;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT COUNT(DISTINCT property_type_code) FROM Properties;",
        "question": "Can you tell me the number of distinct property types?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT property_type_code) FROM Properties;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT COUNT(DISTINCT property_type_code) FROM Properties;",
        "question": "What's the total number of different property types?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT property_type_code) FROM Properties;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT COUNT(DISTINCT property_type_code) FROM Properties;",
        "question": "How many unique types of properties exist?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT property_type_code) FROM Properties;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT COUNT(DISTINCT property_type_code) FROM Properties;",
        "question": "What is the total count of different property types?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT property_type_code) FROM Properties;"
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.district , T2.city , T2.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which city holds the highest number of addresses? Include the city name, count of addresses, and city id.",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.district , T2.city , T2.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Can you tell me the city with the maximum number of addresses? Please provide the city name, the total number of addresses, and the city id.",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.district , T2.city , T2.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Identify the city with the greatest number of addresses. Show the city name, the count of addresses, and the city id.",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.district , T2.city , T2.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What is the city with the most addresses? Display the city name, the number of addresses, and the city id.",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.district , T2.city , T2.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which city contains the most addresses? Please list the city name, the number of addresses, and the city id.",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.district , T2.city , T2.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled < 5;",
        "question": "What are the names of courses with less than 5 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled < 5;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled < 5;",
        "question": "Can you list the courses that have fewer than 5 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled < 5;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled < 5;",
        "question": "Which courses have less than 5 students registered?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled < 5;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled < 5;",
        "question": "What are the course names where the enrollment is less than 5?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled < 5;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled < 5;",
        "question": "Could you tell me the names of courses with enrollment under 5?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled < 5;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled < 5;",
        "question": "Identify the courses with less than 5 students signed up.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled < 5;"
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length > value OR length < value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the names of catalog entries with a length less than 3 or greater than 5?",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length > value OR length < value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Can you list the catalog entries that have a length either less than 3 or more than 5?",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length > value OR length < value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Show me the catalog entries where the length is below 3 or above 5.",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length > value OR length < value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Identify the catalog contents with a length that falls below 3 or exceeds 5.",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length > value OR length < value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which entries in the catalog have a length that is either under 3 or over 5?",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length > value OR length < value",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "query": "SELECT COUNT(DISTINCT Country) FROM climber",
        "question": "Count the number of different countries that climbers are from.",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM climber"
    },
    {
        "db_id": "climbing",
        "query": "SELECT COUNT(DISTINCT Country) FROM climber",
        "question": "How many unique countries do the climbers originate from?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM climber"
    },
    {
        "db_id": "climbing",
        "query": "SELECT COUNT(DISTINCT Country) FROM climber",
        "question": "What is the total number of distinct countries that climbers come from?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM climber"
    },
    {
        "db_id": "climbing",
        "query": "SELECT COUNT(DISTINCT Country) FROM climber",
        "question": "Can you count the different countries where the climbers are from?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM climber"
    },
    {
        "db_id": "climbing",
        "query": "SELECT COUNT(DISTINCT Country) FROM climber",
        "question": "Determine the number of different countries the climbers are from.",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM climber"
    },
    {
        "db_id": "climbing",
        "query": "SELECT COUNT(DISTINCT Country) FROM climber",
        "question": "What's the count of unique countries that climbers belong to?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM climber"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "question": "What is the full name and id of the customer who has the lowest total amount of payment?",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "question": "Who is the customer with the smallest total payment, and what is their full name and id?",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "question": "Can you tell me the full name and id of the customer who has made the least total payment?",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "question": "What's the full name and id of the customer who has paid the least amount in total?",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "question": "I'd like to know the full name and id of the customer with the lowest total payment.",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "question": "Who has the lowest total payment, and what is their full name and id?",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
    },
    {
        "db_id": "match_season",
        "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
        "question": "What are the different positions of players from UCLA or Duke colleges?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
        "question": "Can you list the various positions of players who attended either UCLA or Duke colleges?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
        "question": "What positions do players from UCLA or Duke colleges hold?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
        "question": "What are the various roles of players from UCLA or Duke colleges?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
        "question": "Could you tell me the different positions of players from UCLA or Duke colleges?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
        "question": "What are the positions of players who studied at UCLA or Duke colleges?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\""
    },
    {
        "db_id": "region_building",
        "query": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\"",
        "question": "Show the number of stories of buildings in the region with name \"Abruzzo\".",
        "correctness": 1,
        "gold_parse": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\""
    },
    {
        "db_id": "region_building",
        "query": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\"",
        "question": "Display the count of stories for buildings located in the 'Abruzzo' region.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\""
    },
    {
        "db_id": "region_building",
        "query": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\"",
        "question": "What is the number of stories in buildings in the 'Abruzzo' region?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\""
    },
    {
        "db_id": "region_building",
        "query": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\"",
        "question": "Can you provide the count of stories for buildings in the 'Abruzzo' region?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\""
    },
    {
        "db_id": "region_building",
        "query": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\"",
        "question": "How many stories are there in buildings in the 'Abruzzo' region?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\""
    },
    {
        "db_id": "region_building",
        "query": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\"",
        "question": "Find the total number of stories in buildings in the 'Abruzzo' region.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code",
        "question": "List all product type codes and the number of products in each type.",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code",
        "question": "Show all product type codes along with the count of products for each type.",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code",
        "question": "Display every product type code and the corresponding number of products.",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code",
        "question": "Provide a list of all product type codes and the quantity of products in each type.",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code",
        "question": "Can you list all the product type codes and the total number of products in each type?",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code",
        "question": "I want to see all product type codes and the number of products per type.",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with accounts, and what are the total savings balances for each?",
        "gold_parse": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "query": "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Can you list the names of customers who have accounts and their total savings balances?",
        "gold_parse": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "query": "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the total savings balances of customers who have accounts, and what are their names?",
        "gold_parse": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "query": "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Could you provide the names of customers with accounts and their corresponding total savings balances?",
        "gold_parse": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "query": "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "I'd like to know the names of customers who have accounts and the total savings balances they have.",
        "gold_parse": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "query": "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Who are the customers with accounts and what are their total savings balances?",
        "gold_parse": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "query": "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Give the name of the student with the most likes.",
        "gold_parse": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Who is the student with the highest number of likes?",
        "gold_parse": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Can you tell me the name of the student who has received the most likes?",
        "gold_parse": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Which student has the most likes?",
        "gold_parse": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Identify the student with the maximum likes.",
        "gold_parse": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What is the name of the student who has the most likes?",
        "gold_parse": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC",
        "question": "List all affiliations with ascending ordered number of papers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC",
        "question": "Show all affiliations sorted by the number of papers in ascending order",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC",
        "question": "Display all affiliations in ascending order based on the number of papers",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC",
        "question": "Can you list all affiliations by increasing order of paper count?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC",
        "question": "Provide a list of all affiliations, ordered by the number of papers from lowest to highest",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC",
        "question": "I want to see all affiliations, sorted in ascending order by the number of papers",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many documents have expenses?",
        "gold_parse": "SELECT count(*) FROM Documents_with_expenses",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What is the count of documents that have expenses?",
        "gold_parse": "SELECT count(*) FROM Documents_with_expenses",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Can you tell me the number of documents with expenses?",
        "gold_parse": "SELECT count(*) FROM Documents_with_expenses",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What's the total number of documents containing expenses?",
        "gold_parse": "SELECT count(*) FROM Documents_with_expenses",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many documents include expenses?",
        "gold_parse": "SELECT count(*) FROM Documents_with_expenses",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What is the total count of documents that have expenses?",
        "gold_parse": "SELECT count(*) FROM Documents_with_expenses",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the titles and budgets of movies ordered by budget in descending order?",
        "gold_parse": "",
        "query": "SELECT title, budget FROM movie ORDER BY budget ASC;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Can you list the movie titles and their budgets in descending order of budget?",
        "gold_parse": "",
        "query": "SELECT title, budget FROM movie ORDER BY budget ASC;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the movie titles and their corresponding budgets, sorted by budget from highest to lowest?",
        "gold_parse": "",
        "query": "SELECT title, budget FROM movie ORDER BY budget ASC;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Could you provide the titles and budgets of movies, arranged in order of decreasing budget?",
        "gold_parse": "",
        "query": "SELECT title, budget FROM movie ORDER BY budget ASC;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Show me the titles and budgets of movies, ordered from the most expensive to the least expensive.",
        "gold_parse": "",
        "query": "SELECT title, budget FROM movie ORDER BY budget ASC;",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "I'd like to see the movie titles along with their budgets, sorted in a descending order by budget.",
        "gold_parse": "",
        "query": "SELECT title, budget FROM movie ORDER BY budget ASC;",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "question": "What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "question": "Can you list the names and balances of checking accounts for the customer who has the smallest savings balance?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "question": "Who is the customer with the least amount in their savings account and what are the names and balances of their checking accounts?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "question": "Identify the customer with the lowest savings balance and provide their checking account names and balances.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "question": "For the customer with the minimum balance in their savings account, what are the names and balances of their checking accounts?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "question": "What are the checking account names and balances for the customer with the least savings balance?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\"",
        "question": "What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\"",
        "question": "Can you list the titles and paper ids that Mckeown, Kathleen and Rambow, Owen have co-authored?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\"",
        "question": "What are the paper ids and titles that have been co-authored by Mckeown, Kathleen and Rambow, Owen?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\"",
        "question": "Could you provide the titles and paper ids of the works co-authored by Mckeown, Kathleen and Rambow, Owen?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\"",
        "question": "I'm looking for the titles and paper ids of the papers co-authored by Mckeown, Kathleen and Rambow, Owen. Can you find them?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\""
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\"",
        "question": "What are the titles and paper ids of the papers that Mckeown, Kathleen and Rambow, Owen have jointly written?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\""
    },
    {
        "db_id": "game_injury",
        "query": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC",
        "question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
        "correctness": 1,
        "gold_parse": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC",
        "question": "Identify the date of the game and the name of the player who got injured in each injury accident, ordered by the game season in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC",
        "question": "For every injury incident, retrieve the game date and the injured player's name, sorted by the game season in a descending manner.",
        "correctness": 1,
        "gold_parse": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC",
        "question": "In each case of injury, provide the game's date and the name of the injured player, with the results arranged in descending order by the game season.",
        "correctness": 1,
        "gold_parse": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC",
        "question": "For each injury occurrence, determine the date of the game and the name of the injured player, and arrange the findings in descending order of the game season.",
        "correctness": 1,
        "gold_parse": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC",
        "question": "In every injury event, ascertain the date of the game and the name of the player who was injured, and organize the results in descending order based on the game season.",
        "correctness": 1,
        "gold_parse": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price > (SELECT Max(vendor_requested_price) FROM Properties);",
        "question": "What is the name of the property that has the highest vendor requested price?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE vendor_requested_price > (SELECT Max(vendor_requested_price) FROM Properties);"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price > (SELECT Max(vendor_requested_price) FROM Properties);",
        "question": "Which property has the highest price requested by the vendor?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE vendor_requested_price > (SELECT Max(vendor_requested_price) FROM Properties);"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price > (SELECT Max(vendor_requested_price) FROM Properties);",
        "question": "Can you tell me the name of the property with the highest vendor asking price?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE vendor_requested_price > (SELECT Max(vendor_requested_price) FROM Properties);"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price > (SELECT Max(vendor_requested_price) FROM Properties);",
        "question": "What's the name of the property where the vendor's asking price is the highest?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE vendor_requested_price > (SELECT Max(vendor_requested_price) FROM Properties);"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price > (SELECT Max(vendor_requested_price) FROM Properties);",
        "question": "Which property is being sold at the highest price by the vendor?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE vendor_requested_price > (SELECT Max(vendor_requested_price) FROM Properties);"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price > (SELECT Max(vendor_requested_price) FROM Properties);",
        "question": "What property has the vendor priced the highest?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE vendor_requested_price > (SELECT Max(vendor_requested_price) FROM Properties);"
    },
    {
        "db_id": "book_2",
        "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
        "question": "Show different publishers together with the number of publications they have.",
        "correctness": 1,
        "gold_parse": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher"
    },
    {
        "db_id": "book_2",
        "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
        "question": "Display the various publishers along with their respective number of publications.",
        "correctness": 1,
        "gold_parse": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher"
    },
    {
        "db_id": "book_2",
        "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
        "question": "Can you list the publishers and the count of their publications?",
        "correctness": 1,
        "gold_parse": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher"
    },
    {
        "db_id": "book_2",
        "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
        "question": "Show me the publishers and how many publications each one has.",
        "correctness": 1,
        "gold_parse": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher"
    },
    {
        "db_id": "book_2",
        "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
        "question": "I want to see the different publishers and the number of publications they have.",
        "correctness": 1,
        "gold_parse": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher"
    },
    {
        "db_id": "book_2",
        "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
        "question": "Present the publishers and the quantity of their publications.",
        "correctness": 1,
        "gold_parse": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'",
        "question": "What are the id, language and original artist of the songs whose name is not 'Love'?",
        "correctness": 1,
        "gold_parse": "SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'",
        "question": "Can you provide the id, language, and original artist for songs that are not named 'Love'?",
        "correctness": 1,
        "gold_parse": "SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'",
        "question": "What is the id, language, and original artist of the tracks that don't have the title 'Love'?",
        "correctness": 1,
        "gold_parse": "SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'",
        "question": "Could you tell me the id, language, and original artist of the songs that aren't called 'Love'?",
        "correctness": 1,
        "gold_parse": "SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'",
        "question": "I'd like to know the id, language, and original artist of the songs that aren't titled 'Love'.",
        "correctness": 1,
        "gold_parse": "SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'",
        "question": "What's the id, language, and original artist of the songs not named 'Love'?",
        "correctness": 1,
        "gold_parse": "SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code",
        "question": "What are the distinct descriptions of all the detentions which have ever happened?",
        "correctness": 1,
        "gold_parse": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code",
        "question": "Can you list the unique descriptions for all recorded detentions?",
        "correctness": 1,
        "gold_parse": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code",
        "question": "What are the different descriptions for every detention that has occurred?",
        "correctness": 1,
        "gold_parse": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code",
        "question": "Could you provide the distinct descriptions of all past detentions?",
        "correctness": 1,
        "gold_parse": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code",
        "question": "What are the various descriptions associated with all detentions that have taken place?",
        "correctness": 1,
        "gold_parse": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code",
        "question": "Can you show me the unique descriptions of all detentions that have been recorded?",
        "correctness": 1,
        "gold_parse": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code"
    },
    {
        "db_id": "debate",
        "question": "How many debates are there?",
        "gold_parse": "SELECT count(*) FROM debate",
        "query": "SELECT Count ( * ) FROM people",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "What is the total count of debates?",
        "gold_parse": "SELECT count(*) FROM debate",
        "query": "SELECT Count ( * ) FROM people",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "Can you tell me the number of debates?",
        "gold_parse": "SELECT count(*) FROM debate",
        "query": "SELECT Count ( * ) FROM people",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "What's the total number of debates?",
        "gold_parse": "SELECT count(*) FROM debate",
        "query": "SELECT Count ( * ) FROM people",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "How many debates have been conducted?",
        "gold_parse": "SELECT count(*) FROM debate",
        "query": "SELECT Count ( * ) FROM people",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "What is the quantity of debates?",
        "gold_parse": "SELECT count(*) FROM debate",
        "query": "SELECT Count ( * ) FROM people",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.",
        "gold_parse": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred",
        "query": "SELECT T2.name FROM department AS T1 JOIN instructor AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name ORDER BY T3.tot_cred Asc",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Can you list the names of all instructors who are advising students in the math department, sorted by the total credits of the student?",
        "gold_parse": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred",
        "query": "SELECT T2.name FROM department AS T1 JOIN instructor AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name ORDER BY T3.tot_cred Asc",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Who are the instructors advising students in the math department, sorted by the total student credits?",
        "gold_parse": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred",
        "query": "SELECT T2.name FROM department AS T1 JOIN instructor AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name ORDER BY T3.tot_cred Asc",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "I need the names of all instructors who guide students in the math department, sorted by the total credits of the student.",
        "gold_parse": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred",
        "query": "SELECT T2.name FROM department AS T1 JOIN instructor AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name ORDER BY T3.tot_cred Asc",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Could you provide the names of all instructors who mentor students in the math department, sorted by the total credits of the student?",
        "gold_parse": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred",
        "query": "SELECT T2.name FROM department AS T1 JOIN instructor AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name ORDER BY T3.tot_cred Asc",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of all the instructors who counsel students in the math department, sorted by the total credits of the student?",
        "gold_parse": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred",
        "query": "SELECT T2.name FROM department AS T1 JOIN instructor AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name ORDER BY T3.tot_cred Asc",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the card type code with most number of cards?",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which card type code has the highest number of cards?",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Can you tell me the card type code that has the most cards?",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What's the card type code that possesses the maximum number of cards?",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Identify the card type code with the greatest number of cards.",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What card type code is associated with the most cards?",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of customers who do not have saving accounts?",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "query": "SELECT cust_name FROM customer WHERE cust_ID NOT IN ( SELECT cust_name FROM customer )",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Can you list the customers without a savings account?",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "query": "SELECT cust_name FROM customer WHERE cust_ID NOT IN ( SELECT cust_name FROM customer )",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Who are the customers that don't have savings accounts?",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "query": "SELECT cust_name FROM customer WHERE cust_ID NOT IN ( SELECT cust_name FROM customer )",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Identify the customers who lack savings accounts.",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "query": "SELECT cust_name FROM customer WHERE cust_ID NOT IN ( SELECT cust_name FROM customer )",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Which customers do not possess a savings account?",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "query": "SELECT cust_name FROM customer WHERE cust_ID NOT IN ( SELECT cust_name FROM customer )",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Could you tell me the names of customers who have no savings account?",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "query": "SELECT cust_name FROM customer WHERE cust_ID NOT IN ( SELECT cust_name FROM customer )",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM city WHERE Population < (SELECT Avg(Population) FROM city);",
        "question": "What are the names of cities that have a population below the average?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM city WHERE Population < (SELECT Avg(Population) FROM city);"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM city WHERE Population < (SELECT Avg(Population) FROM city);",
        "question": "Can you list the cities with a population less than the average?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM city WHERE Population < (SELECT Avg(Population) FROM city);"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM city WHERE Population < (SELECT Avg(Population) FROM city);",
        "question": "Which cities have a population that falls below the average?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM city WHERE Population < (SELECT Avg(Population) FROM city);"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM city WHERE Population < (SELECT Avg(Population) FROM city);",
        "question": "Identify the cities that have a population under the average.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM city WHERE Population < (SELECT Avg(Population) FROM city);"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM city WHERE Population < (SELECT Avg(Population) FROM city);",
        "question": "What cities have fewer inhabitants than the average?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM city WHERE Population < (SELECT Avg(Population) FROM city);"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM city WHERE Population < (SELECT Avg(Population) FROM city);",
        "question": "Could you tell me the names of cities with a population below the average?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM city WHERE Population < (SELECT Avg(Population) FROM city);"
    },
    {
        "db_id": "world_1",
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "gold_parse": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "query": "select T1.Code from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.Language = value except select Code from country where GovernmentForm = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Can you list the codes for countries where English is not spoken and the form of government is not a Republic?",
        "gold_parse": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "query": "select T1.Code from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.Language = value except select Code from country where GovernmentForm = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the country codes for nations where the official language isn't English and they don't have a Republic government?",
        "gold_parse": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "query": "select T1.Code from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.Language = value except select Code from country where GovernmentForm = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Could you provide the codes of the countries that neither have English as their language nor are Republics?",
        "gold_parse": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "query": "select T1.Code from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.Language = value except select Code from country where GovernmentForm = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the codes for the countries that don't use English as their language and don't have a Republic form of government?",
        "gold_parse": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "query": "select T1.Code from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.Language = value except select Code from country where GovernmentForm = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Can you tell me the codes of the countries where the language is not English and the government is not a Republic?",
        "gold_parse": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "query": "select T1.Code from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.Language = value except select Code from country where GovernmentForm = value",
        "correctness": 0
    },
    {
        "db_id": "car_racing",
        "query": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150",
        "question": "What are the countries that have drivers with points larger than 150?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150",
        "question": "Which countries have drivers with points exceeding 150?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150",
        "question": "Can you list the countries where drivers have more than 150 points?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150",
        "question": "In which countries do drivers have points greater than 150?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150",
        "question": "Identify the countries where drivers have accumulated over 150 points.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150",
        "question": "What are the nations where drivers have points that are more than 150?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150"
    },
    {
        "db_id": "school_player",
        "question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
        "gold_parse": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
        "query": "SELECT Boys_or_Girls FROM school WHERE Founded > value INTERSECT SELECT Denomination FROM school WHERE Founded < value",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Display the common denomination for schools established before 1890 and those established after 1900",
        "gold_parse": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
        "query": "SELECT Boys_or_Girls FROM school WHERE Founded > value INTERSECT SELECT Denomination FROM school WHERE Founded < value",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "What is the shared denomination of schools that were founded before 1890 and after 1900?",
        "gold_parse": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
        "query": "SELECT Boys_or_Girls FROM school WHERE Founded > value INTERSECT SELECT Denomination FROM school WHERE Founded < value",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Can you show the denomination that is common between schools founded before 1890 and those founded after 1900?",
        "gold_parse": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
        "query": "SELECT Boys_or_Girls FROM school WHERE Founded > value INTERSECT SELECT Denomination FROM school WHERE Founded < value",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Identify the denomination that schools founded before 1890 and after 1900 have in common",
        "gold_parse": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
        "query": "SELECT Boys_or_Girls FROM school WHERE Founded > value INTERSECT SELECT Denomination FROM school WHERE Founded < value",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "What denomination do schools founded before 1890 and schools founded after 1900 share?",
        "gold_parse": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
        "query": "SELECT Boys_or_Girls FROM school WHERE Founded > value INTERSECT SELECT Denomination FROM school WHERE Founded < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MAX_SALARY BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you list the job titles and salary ranges for jobs where the maximum salary is between 12000 and 18000?",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MAX_SALARY BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the positions and their salary ranges for jobs that have a maximum salary from 12000 to 18000?",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MAX_SALARY BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Could you provide the job titles and the salary ranges for jobs that offer a maximum salary between 12000 and 18000?",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MAX_SALARY BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "I'm interested in the job titles and salary ranges for jobs where the top salary is between 12000 and 18000. Can you provide this?",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MAX_SALARY BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you show me the job titles and the range of salaries for jobs that have a maximum salary in the range of 12000 to 18000?",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MAX_SALARY BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE city = 'San Francisco';",
        "question": "What are the names of businesses in San Francisco?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE city = 'San Francisco';"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE city = 'San Francisco';",
        "question": "Can you list the businesses located in San Francisco?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE city = 'San Francisco';"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE city = 'San Francisco';",
        "question": "What businesses are based in San Francisco?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE city = 'San Francisco';"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE city = 'San Francisco';",
        "question": "Could you tell me the names of businesses in San Francisco?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE city = 'San Francisco';"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE city = 'San Francisco';",
        "question": "Which businesses are situated in San Francisco?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE city = 'San Francisco';"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE city = 'San Francisco';",
        "question": "I'd like to know the names of businesses in San Francisco.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE city = 'San Francisco';"
    },
    {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
        "question": "In which locations are there more than one movie theater with capacity above 300?",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1"
    },
    {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
        "question": "In what places can you find more than one cinema that can accommodate over 300 people?",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1"
    },
    {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
        "question": "Where are the locations that have more than one film theater with a seating capacity of over 300?",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1"
    },
    {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
        "question": "Can you list the locations where there are more than one movie house with a capacity of more than 300?",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1"
    },
    {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
        "question": "What are the locations where there are multiple movie theaters that can hold more than 300 people?",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1"
    },
    {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
        "question": "Where can I find more than one movie theater that has a capacity of over 300 in the same location?",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "question": "Show all artist names who didn't have an exhibition in 2004.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "question": "Display all the artists who didn't hold an exhibition in 2004.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "question": "Can you list all the artists who had no exhibition in 2004?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "question": "Who are all the artists that didn't exhibit in 2004?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "question": "Identify all artists without an exhibition in 2004.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "question": "Provide the names of all artists who didn't have an exhibition in the year 2004.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004"
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "gold_parse": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "query": "SELECT T1.Name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Identify the manager and district of the store with the highest number of products.",
        "gold_parse": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "query": "SELECT T1.Name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Who is the manager and what is the district of the shop with the most products?",
        "gold_parse": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "query": "SELECT T1.Name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Can you tell me the manager's name and district of the store that has the maximum number of products?",
        "gold_parse": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "query": "SELECT T1.Name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "What is the name of the manager and the district of the shop that stocks the most products?",
        "gold_parse": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "query": "SELECT T1.Name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Provide the name of the manager and the district of the shop that carries the largest inventory of products.",
        "gold_parse": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "query": "SELECT T1.Name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Engineering%');",
        "question": "What are the names of departments that offer degree programs in Engineering?",
        "correctness": 1,
        "gold_parse": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Engineering%');"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Engineering%');",
        "question": "Can you list the departments that have Engineering degree programs?",
        "correctness": 1,
        "gold_parse": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Engineering%');"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Engineering%');",
        "question": "Which departments provide degree programs in Engineering?",
        "correctness": 1,
        "gold_parse": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Engineering%');"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Engineering%');",
        "question": "What departments are offering degree programs in the field of Engineering?",
        "correctness": 1,
        "gold_parse": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Engineering%');"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Engineering%');",
        "question": "Could you tell me the names of departments that offer Engineering degree programs?",
        "correctness": 1,
        "gold_parse": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Engineering%');"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Engineering%');",
        "question": "I'm looking for the departments that offer degree programs in Engineering. Can you name them?",
        "correctness": 1,
        "gold_parse": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Engineering%');"
    },
    {
        "db_id": "swimming",
        "question": "Find the names of stadiums that the most swimmers have been to.",
        "gold_parse": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM stadium GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Identify the stadiums where the highest number of swimmers have visited.",
        "gold_parse": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM stadium GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Which stadiums have been visited by the most swimmers?",
        "gold_parse": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM stadium GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Can you list the names of stadiums that have been frequented by the most swimmers?",
        "gold_parse": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM stadium GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "What are the names of the stadiums that have seen the most swimmers?",
        "gold_parse": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM stadium GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Show me the stadiums that have been visited by the greatest number of swimmers.",
        "gold_parse": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM stadium GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Name ,  LOCATION FROM wrestler",
        "question": "Give the names and locations of all wrestlers.",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  LOCATION FROM wrestler"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Name ,  LOCATION FROM wrestler",
        "question": "Can you provide the names and locations of all wrestlers?",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  LOCATION FROM wrestler"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Name ,  LOCATION FROM wrestler",
        "question": "What are the names and locations of all wrestlers?",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  LOCATION FROM wrestler"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Name ,  LOCATION FROM wrestler",
        "question": "I need to know the names and locations of all wrestlers.",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  LOCATION FROM wrestler"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Name ,  LOCATION FROM wrestler",
        "question": "Could you list the names and locations of all wrestlers?",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  LOCATION FROM wrestler"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Name ,  LOCATION FROM wrestler",
        "question": "Show me the names and locations of all wrestlers.",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  LOCATION FROM wrestler"
    },
    {
        "db_id": "journal_committee",
        "question": "List the names of editors that are not on any journal committee.",
        "gold_parse": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)",
        "query": "SELECT T1.Name FROM editor AS T1 WHERE T1.Editor_ID NOT IN ( SELECT T2.Editor_ID FROM journal_committee AS T2 WHERE T2.Journal_ID = value )",
        "correctness": 0
    },
    {
        "db_id": "journal_committee",
        "question": "Provide the names of editors who are not part of any journal committee.",
        "gold_parse": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)",
        "query": "SELECT T1.Name FROM editor AS T1 WHERE T1.Editor_ID NOT IN ( SELECT T2.Editor_ID FROM journal_committee AS T2 WHERE T2.Journal_ID = value )",
        "correctness": 0
    },
    {
        "db_id": "journal_committee",
        "question": "Can you show me the editors who aren't on any journal committee?",
        "gold_parse": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)",
        "query": "SELECT T1.Name FROM editor AS T1 WHERE T1.Editor_ID NOT IN ( SELECT T2.Editor_ID FROM journal_committee AS T2 WHERE T2.Journal_ID = value )",
        "correctness": 0
    },
    {
        "db_id": "journal_committee",
        "question": "Who are the editors that don't serve on any journal committee?",
        "gold_parse": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)",
        "query": "SELECT T1.Name FROM editor AS T1 WHERE T1.Editor_ID NOT IN ( SELECT T2.Editor_ID FROM journal_committee AS T2 WHERE T2.Journal_ID = value )",
        "correctness": 0
    },
    {
        "db_id": "journal_committee",
        "question": "I need to know the editors not involved in any journal committee.",
        "gold_parse": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)",
        "query": "SELECT T1.Name FROM editor AS T1 WHERE T1.Editor_ID NOT IN ( SELECT T2.Editor_ID FROM journal_committee AS T2 WHERE T2.Journal_ID = value )",
        "correctness": 0
    },
    {
        "db_id": "journal_committee",
        "question": "Identify the editors who are not members of any journal committee.",
        "gold_parse": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)",
        "query": "SELECT T1.Name FROM editor AS T1 WHERE T1.Editor_ID NOT IN ( SELECT T2.Editor_ID FROM journal_committee AS T2 WHERE T2.Journal_ID = value )",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the IDs of journals where papers have been published?",
        "gold_parse": "",
        "query": "SELECT journalid FROM journal WHERE journalid IN (SELECT journalid FROM paper WHERE journalid = 'unknown');",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Can you list the IDs of journals where papers have been published?",
        "gold_parse": "",
        "query": "SELECT journalid FROM journal WHERE journalid IN (SELECT journalid FROM paper WHERE journalid = 'unknown');",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the journal IDs where papers have been published?",
        "gold_parse": "",
        "query": "SELECT journalid FROM journal WHERE journalid IN (SELECT journalid FROM paper WHERE journalid = 'unknown');",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Could you provide the IDs of journals that have published papers?",
        "gold_parse": "",
        "query": "SELECT journalid FROM journal WHERE journalid IN (SELECT journalid FROM paper WHERE journalid = 'unknown');",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "I need the IDs of journals where papers have been published, can you provide them?",
        "gold_parse": "",
        "query": "SELECT journalid FROM journal WHERE journalid IN (SELECT journalid FROM paper WHERE journalid = 'unknown');",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the IDs for journals that have published papers?",
        "gold_parse": "",
        "query": "SELECT journalid FROM journal WHERE journalid IN (SELECT journalid FROM paper WHERE journalid = 'unknown');",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT T1.Issue_Date , T2.Result FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Can you provide the ceremony and results dates for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT T1.Issue_Date , T2.Result FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the ceremony and results dates for all music festivals?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT T1.Issue_Date , T2.Result FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Could you list the dates of ceremony and results for every music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT T1.Issue_Date , T2.Result FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "I'd like to know the dates of ceremony and results for each music festival.",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT T1.Issue_Date , T2.Result FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Can I get the dates of ceremony and results for all the music festivals?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT T1.Issue_Date , T2.Result FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the field IDs for each keyphrase.",
        "gold_parse": "",
        "query": "SELECT keyphrasename, SUM(fieldid) FROM keyphrase JOIN paperkeyphrase ON keyphrase.keyphraseid = paperkeyphrase.keyphraseid JOIN paper ON paperkeyphrase.paperid = paper.paperid JOIN paperfield ON paper.paperid = paperfield.paperid GROUP BY keyphrasename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Calculate the total of field IDs for each keyphrase.",
        "gold_parse": "",
        "query": "SELECT keyphrasename, SUM(fieldid) FROM keyphrase JOIN paperkeyphrase ON keyphrase.keyphraseid = paperkeyphrase.keyphraseid JOIN paper ON paperkeyphrase.paperid = paper.paperid JOIN paperfield ON paper.paperid = paperfield.paperid GROUP BY keyphrasename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What is the sum of field IDs for every keyphrase?",
        "gold_parse": "",
        "query": "SELECT keyphrasename, SUM(fieldid) FROM keyphrase JOIN paperkeyphrase ON keyphrase.keyphraseid = paperkeyphrase.keyphraseid JOIN paper ON paperkeyphrase.paperid = paper.paperid JOIN paperfield ON paper.paperid = paperfield.paperid GROUP BY keyphrasename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Compute the aggregate of field IDs per keyphrase.",
        "gold_parse": "",
        "query": "SELECT keyphrasename, SUM(fieldid) FROM keyphrase JOIN paperkeyphrase ON keyphrase.keyphraseid = paperkeyphrase.keyphraseid JOIN paper ON paperkeyphrase.paperid = paper.paperid JOIN paperfield ON paper.paperid = paperfield.paperid GROUP BY keyphrasename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Find the total sum of field IDs grouped by each keyphrase.",
        "gold_parse": "",
        "query": "SELECT keyphrasename, SUM(fieldid) FROM keyphrase JOIN paperkeyphrase ON keyphrase.keyphraseid = paperkeyphrase.keyphraseid JOIN paper ON paperkeyphrase.paperid = paper.paperid JOIN paperfield ON paper.paperid = paperfield.paperid GROUP BY keyphrasename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What's the cumulative sum of field IDs for each keyphrase?",
        "gold_parse": "",
        "query": "SELECT keyphrasename, SUM(fieldid) FROM keyphrase JOIN paperkeyphrase ON keyphrase.keyphraseid = paperkeyphrase.keyphraseid JOIN paper ON paperkeyphrase.paperid = paper.paperid JOIN paperfield ON paper.paperid = paperfield.paperid GROUP BY keyphrasename;",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT StuID FROM Student WHERE Sex  =  'M'",
        "question": "Show student ids for all male students.",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM Student WHERE Sex  =  'M'"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT StuID FROM Student WHERE Sex  =  'M'",
        "question": "Display the student IDs for all boys.",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM Student WHERE Sex  =  'M'"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT StuID FROM Student WHERE Sex  =  'M'",
        "question": "Can you list the IDs of all male students?",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM Student WHERE Sex  =  'M'"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT StuID FROM Student WHERE Sex  =  'M'",
        "question": "What are the student IDs for all the male students?",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM Student WHERE Sex  =  'M'"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT StuID FROM Student WHERE Sex  =  'M'",
        "question": "Provide the student IDs for all male students.",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM Student WHERE Sex  =  'M'"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT StuID FROM Student WHERE Sex  =  'M'",
        "question": "I want to see the student IDs for all male students.",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM Student WHERE Sex  =  'M'"
    },
    {
        "db_id": "e_learning",
        "question": "List the name and the number of enrolled student for each course.",
        "gold_parse": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
        "query": "SELECT course_name , Count ( * ) FROM Courses GROUP BY course_name",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Show the course name along with the count of students enrolled in each course.",
        "gold_parse": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
        "query": "SELECT course_name , Count ( * ) FROM Courses GROUP BY course_name",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Provide the name of each course and the total number of students enrolled.",
        "gold_parse": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
        "query": "SELECT course_name , Count ( * ) FROM Courses GROUP BY course_name",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Can you display the name of each course and the number of students enrolled?",
        "gold_parse": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
        "query": "SELECT course_name , Count ( * ) FROM Courses GROUP BY course_name",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "I want to see the course names and the number of students enrolled in each.",
        "gold_parse": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
        "query": "SELECT course_name , Count ( * ) FROM Courses GROUP BY course_name",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the names of the courses and how many students are enrolled in each?",
        "gold_parse": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
        "query": "SELECT course_name , Count ( * ) FROM Courses GROUP BY course_name",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average surface area of countries where the language is not official?",
        "gold_parse": "",
        "query": "SELECT Language, AVG(SurfaceArea) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'F';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What's the mean surface area of nations where the language isn't official?",
        "gold_parse": "",
        "query": "SELECT Language, AVG(SurfaceArea) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'F';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Can you tell me the average size of countries where the language isn't recognized as official?",
        "gold_parse": "",
        "query": "SELECT Language, AVG(SurfaceArea) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'F';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average land area of countries that don't have the language as official?",
        "gold_parse": "",
        "query": "SELECT Language, AVG(SurfaceArea) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'F';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Could you find the mean surface area of countries not having the language as official?",
        "gold_parse": "",
        "query": "SELECT Language, AVG(SurfaceArea) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'F';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the mean size of nations where the language is not considered official?",
        "gold_parse": "",
        "query": "SELECT Language, AVG(SurfaceArea) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'F';",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id",
        "question": "Show the apartment numbers, start dates, and end dates of all the apartment bookings.",
        "correctness": 1,
        "gold_parse": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id",
        "question": "Display the numbers, start dates, and end dates of all apartment bookings.",
        "correctness": 1,
        "gold_parse": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id",
        "question": "Can you list the apartment numbers, start dates, and end dates for all bookings?",
        "correctness": 1,
        "gold_parse": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id",
        "question": "I want to see the apartment numbers, start dates, and end dates of all bookings.",
        "correctness": 1,
        "gold_parse": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id",
        "question": "Provide the apartment numbers, start dates, and end dates for all apartment reservations.",
        "correctness": 1,
        "gold_parse": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id",
        "question": "Show me the apartment numbers along with the start and end dates for all bookings.",
        "correctness": 1,
        "gold_parse": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id"
    },
    {
        "db_id": "singer",
        "query": "SELECT DISTINCT Name FROM singer WHERE Citizenship = 'Canadian';",
        "question": "What are the names of Canadian singers?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Name FROM singer WHERE Citizenship = 'Canadian';"
    },
    {
        "db_id": "singer",
        "query": "SELECT DISTINCT Name FROM singer WHERE Citizenship = 'Canadian';",
        "question": "Can you list the names of singers from Canada?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Name FROM singer WHERE Citizenship = 'Canadian';"
    },
    {
        "db_id": "singer",
        "query": "SELECT DISTINCT Name FROM singer WHERE Citizenship = 'Canadian';",
        "question": "Who are the singers that are from Canada?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Name FROM singer WHERE Citizenship = 'Canadian';"
    },
    {
        "db_id": "singer",
        "query": "SELECT DISTINCT Name FROM singer WHERE Citizenship = 'Canadian';",
        "question": "I want to know the names of Canadian singers.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Name FROM singer WHERE Citizenship = 'Canadian';"
    },
    {
        "db_id": "singer",
        "query": "SELECT DISTINCT Name FROM singer WHERE Citizenship = 'Canadian';",
        "question": "Tell me the names of singers who are from Canada.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Name FROM singer WHERE Citizenship = 'Canadian';"
    },
    {
        "db_id": "singer",
        "query": "SELECT DISTINCT Name FROM singer WHERE Citizenship = 'Canadian';",
        "question": "Could you provide the names of Canadian singers?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Name FROM singer WHERE Citizenship = 'Canadian';"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)",
        "question": "Find the headphone models that are not in stock in any store.",
        "correctness": 1,
        "gold_parse": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)",
        "question": "Identify the models of headphones that are currently out of stock in all stores.",
        "correctness": 1,
        "gold_parse": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)",
        "question": "Which headphone models are unavailable in any store?",
        "correctness": 1,
        "gold_parse": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)",
        "question": "Can you list the headphone models that are not available in any store?",
        "correctness": 1,
        "gold_parse": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)",
        "question": "What are the headphone models that are out of stock in all stores?",
        "correctness": 1,
        "gold_parse": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)",
        "question": "Show me the headphone models that are not in stock in any store.",
        "correctness": 1,
        "gold_parse": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "What are the line 1 of addresses shared by some students and some teachers?",
        "gold_parse": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id",
        "query": "SELECT T1.email_address FROM Students AS T1 UNION SELECT T2.email_address FROM Teachers AS T2",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "What is the first line of addresses that both students and teachers have in common?",
        "gold_parse": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id",
        "query": "SELECT T1.email_address FROM Students AS T1 UNION SELECT T2.email_address FROM Teachers AS T2",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "Can you tell me the line 1 of addresses that are the same for some students and teachers?",
        "gold_parse": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id",
        "query": "SELECT T1.email_address FROM Students AS T1 UNION SELECT T2.email_address FROM Teachers AS T2",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "What is the line 1 of addresses that some students and teachers share?",
        "gold_parse": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id",
        "query": "SELECT T1.email_address FROM Students AS T1 UNION SELECT T2.email_address FROM Teachers AS T2",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "Identify the first line of addresses common to some students and teachers.",
        "gold_parse": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id",
        "query": "SELECT T1.email_address FROM Students AS T1 UNION SELECT T2.email_address FROM Teachers AS T2",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "What's the line 1 of addresses that are shared between some students and teachers?",
        "gold_parse": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id",
        "query": "SELECT T1.email_address FROM Students AS T1 UNION SELECT T2.email_address FROM Teachers AS T2",
        "correctness": 0
    },
    {
        "db_id": "election",
        "query": "SELECT count(DISTINCT Governor) FROM party",
        "question": "How many distinct governors are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Governor) FROM party"
    },
    {
        "db_id": "election",
        "query": "SELECT count(DISTINCT Governor) FROM party",
        "question": "What is the count of unique governors?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Governor) FROM party"
    },
    {
        "db_id": "election",
        "query": "SELECT count(DISTINCT Governor) FROM party",
        "question": "Can you tell me the number of different governors?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Governor) FROM party"
    },
    {
        "db_id": "election",
        "query": "SELECT count(DISTINCT Governor) FROM party",
        "question": "What's the total number of distinct governors?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Governor) FROM party"
    },
    {
        "db_id": "election",
        "query": "SELECT count(DISTINCT Governor) FROM party",
        "question": "How many governors are there, without counting duplicates?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Governor) FROM party"
    },
    {
        "db_id": "election",
        "query": "SELECT count(DISTINCT Governor) FROM party",
        "question": "Could you provide the count of non-repeating governors?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Governor) FROM party"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "question": "Find the location and all games score of the school that has Clemson as its team name.",
        "correctness": 1,
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "question": "What is the location and all game scores for the school with the team name Clemson?",
        "correctness": 1,
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "question": "Can you provide the location and all game scores of the school whose team name is Clemson?",
        "correctness": 1,
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "question": "I need to know the location and all game scores of the school that goes by the team name Clemson.",
        "correctness": 1,
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "question": "What's the location and all game scores of the school that has a team named Clemson?",
        "correctness": 1,
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "question": "Could you tell me the location and all game scores of the school that has Clemson as its team name?",
        "correctness": 1,
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'"
    },
    {
        "db_id": "conference",
        "query": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)",
        "question": "What are the names of all staff members who are older than average?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)"
    },
    {
        "db_id": "conference",
        "query": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)",
        "question": "Can you list the names of staff members who are above the average age?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)"
    },
    {
        "db_id": "conference",
        "query": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)",
        "question": "Who are the staff members with an age greater than the average?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)"
    },
    {
        "db_id": "conference",
        "query": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)",
        "question": "Could you provide the names of all employees who are older than the average age?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)"
    },
    {
        "db_id": "conference",
        "query": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)",
        "question": "I'd like to know the names of all staff who are older than the average.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)"
    },
    {
        "db_id": "conference",
        "query": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)",
        "question": "Show me the names of all staff members whose age is above average.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name",
        "question": "Return the names of the different planes, as well as the names of the oldest pilots who flew each.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name",
        "question": "Provide the names of the distinct aircrafts and the oldest pilots who have operated them.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name",
        "question": "Can you list the unique planes and the oldest pilots who have flown them?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name",
        "question": "I need the names of the different planes and the oldest pilots who have piloted each.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name",
        "question": "Show me the names of the various aircrafts and the oldest pilots who have flown each.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name",
        "question": "What are the names of the different planes and the oldest pilots who have flown them?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements",
        "question": "What are the type code, details, and date of each achievement?",
        "correctness": 1,
        "gold_parse": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements",
        "question": "Can you provide the type code, details, and date for each achievement?",
        "correctness": 1,
        "gold_parse": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements",
        "question": "What is the type code, details, and date for all achievements?",
        "correctness": 1,
        "gold_parse": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements",
        "question": "Could you list the type code, details, and date of every achievement?",
        "correctness": 1,
        "gold_parse": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements",
        "question": "I'd like to know the type code, details, and date of each achievement.",
        "correctness": 1,
        "gold_parse": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements",
        "question": "Show me the type code, details, and date of all achievements.",
        "correctness": 1,
        "gold_parse": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'",
        "question": "What are the names and results of battles between 1900 and 1950?",
        "correctness": 1,
        "gold_parse": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'",
        "question": "Can you list the names and outcomes of battles that took place from 1900 to 1950?",
        "correctness": 1,
        "gold_parse": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'",
        "question": "What are the titles and outcomes of conflicts that occurred between 1900 and 1950?",
        "correctness": 1,
        "gold_parse": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'",
        "question": "Could you provide the names and results of wars fought between 1900 and 1950?",
        "correctness": 1,
        "gold_parse": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'",
        "question": "What are the designations and results of battles that happened from 1900 to 1950?",
        "correctness": 1,
        "gold_parse": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'",
        "question": "Can you tell me the names and results of military engagements between 1900 and 1950?",
        "correctness": 1,
        "gold_parse": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
        "question": "Which accelerator name contains substring \"Opera\"?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\""
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
        "question": "What is the name of the accelerator that includes the substring 'Opera'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\""
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
        "question": "Can you find an accelerator name that has 'Opera' as a substring?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\""
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
        "question": "Is there an accelerator name that contains the substring 'Opera'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\""
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
        "question": "What accelerator has a name that includes the substring 'Opera'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\""
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
        "question": "Does any accelerator name contain the substring 'Opera'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\""
    },
    {
        "db_id": "aan_1",
        "query": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\"",
        "question": "Count the number of papers Columbia University had during or prior to 2009 .",
        "correctness": 1,
        "gold_parse": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\""
    },
    {
        "db_id": "aan_1",
        "query": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\"",
        "question": "How many papers did Columbia University have in 2009 or before?",
        "correctness": 1,
        "gold_parse": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\""
    },
    {
        "db_id": "aan_1",
        "query": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\"",
        "question": "What is the total number of papers Columbia University had up to 2009?",
        "correctness": 1,
        "gold_parse": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\""
    },
    {
        "db_id": "aan_1",
        "query": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\"",
        "question": "Can you count the papers Columbia University had until 2009?",
        "correctness": 1,
        "gold_parse": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\""
    },
    {
        "db_id": "aan_1",
        "query": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\"",
        "question": "What's the count of papers from Columbia University during or before the year 2009?",
        "correctness": 1,
        "gold_parse": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\""
    },
    {
        "db_id": "aan_1",
        "query": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\"",
        "question": "Determine the number of papers that Columbia University had in or before the year 2009.",
        "correctness": 1,
        "gold_parse": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\""
    },
    {
        "db_id": "battle_death",
        "query": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'",
        "question": "How many ships are there of type Destroyer?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'",
        "question": "What is the count of Destroyer type ships?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'",
        "question": "Can you tell me the total number of Destroyer ships?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'",
        "question": "What's the total count of ships that are classified as Destroyers?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'",
        "question": "How many Destroyer ships exist?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'",
        "question": "What is the total number of ships of the Destroyer type?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'"
    },
    {
        "db_id": "college_2",
        "question": "What is the course title of the prerequisite of course Mobile Computing?",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "query": "SELECT title FROM course WHERE title = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What's the name of the course that is a prerequisite for Mobile Computing?",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "query": "SELECT title FROM course WHERE title = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Can you tell me the title of the course that is needed before taking Mobile Computing?",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "query": "SELECT title FROM course WHERE title = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the prerequisite course for Mobile Computing called?",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "query": "SELECT title FROM course WHERE title = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the name of the course that must be taken before Mobile Computing?",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "query": "SELECT title FROM course WHERE title = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What course is required to be taken before Mobile Computing?",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "query": "SELECT title FROM course WHERE title = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "query": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "question": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "correctness": 1,
        "gold_parse": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "question": "What was the top speed achieved in the fastest lap during the 2008 Monaco Grand Prix?",
        "correctness": 1,
        "gold_parse": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "question": "In the 2008 Monaco Grand Prix, what was the highest speed recorded in the fastest lap?",
        "correctness": 1,
        "gold_parse": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "question": "Can you tell me the highest speed reached in the fastest lap of the Monaco Grand Prix in 2008?",
        "correctness": 1,
        "gold_parse": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "question": "What was the peak speed in the fastest lap of the Monaco Grand Prix in 2008?",
        "correctness": 1,
        "gold_parse": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "question": "During the Monaco Grand Prix in 2008, what was the maximum speed achieved in the fastest lap?",
        "correctness": 1,
        "gold_parse": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)",
        "question": "What are all the receipt numbers that have a good with a price above 10 or have the earliest date?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)",
        "question": "Can you list all the receipt numbers for goods priced over 10 or those with the earliest date?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)",
        "question": "What are the receipt numbers for items that cost more than 10 or have the earliest purchase date?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)",
        "question": "Could you provide the receipt numbers for goods that are either priced above 10 or have the earliest date?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)",
        "question": "I need the receipt numbers for all goods that are priced over 10 or have the earliest date of purchase.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)",
        "question": "Show me all the receipt numbers for goods that either cost more than 10 or have the earliest date.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)"
    },
    {
        "db_id": "csu_1",
        "question": "How many degrees were conferred at San Jose State University in 2000?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
        "query": "SELECT Sum ( T2.Graduate ) FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the count of degrees awarded by San Jose State University in the year 2000?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
        "query": "SELECT Sum ( T2.Graduate ) FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Can you tell me the total number of degrees given out at San Jose State University in 2000?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
        "query": "SELECT Sum ( T2.Graduate ) FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What was the total number of degrees conferred by San Jose State University in 2000?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
        "query": "SELECT Sum ( T2.Graduate ) FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "In 2000, how many degrees did San Jose State University confer?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
        "query": "SELECT Sum ( T2.Graduate ) FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What's the number of degrees that were awarded at San Jose State University in the year 2000?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
        "query": "SELECT Sum ( T2.Graduate ) FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "gold_parse": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "query": "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Can you tell me the id of the semester where both Masters and Bachelors students were registered?",
        "gold_parse": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "query": "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What's the id for the semester where both Masters and Bachelors students were studying?",
        "gold_parse": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "query": "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Could you provide the id of the semester that saw enrollment from both Masters and Bachelors students?",
        "gold_parse": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "query": "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Identify the semester id where both Masters and Bachelors students were enrolled.",
        "gold_parse": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "query": "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the semester id where both Masters and Bachelors students were in attendance?",
        "gold_parse": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "query": "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value",
        "correctness": 0
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT DISTINCT model FROM headphone ORDER BY model",
        "question": "Return the list of distinct headphone models ordered alphabetically.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT model FROM headphone ORDER BY model"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT DISTINCT model FROM headphone ORDER BY model",
        "question": "Provide an alphabetically sorted list of unique headphone models.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT model FROM headphone ORDER BY model"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT DISTINCT model FROM headphone ORDER BY model",
        "question": "Can you show me a list of different headphone models in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT model FROM headphone ORDER BY model"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT DISTINCT model FROM headphone ORDER BY model",
        "question": "I need a list of distinct headphone models, sorted alphabetically.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT model FROM headphone ORDER BY model"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT DISTINCT model FROM headphone ORDER BY model",
        "question": "Could you give me an alphabetically ordered list of unique headphone models?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT model FROM headphone ORDER BY model"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT DISTINCT model FROM headphone ORDER BY model",
        "question": "Display an alphabetical list of distinct headphone models.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT model FROM headphone ORDER BY model"
    },
    {
        "db_id": "singer",
        "question": "Sum the sales of songs with the highest position less than 20 for each singer.",
        "gold_parse": "",
        "query": "SELECT Name, SUM(Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position < 20;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Calculate the total sales of songs for each singer where the highest position is under 20",
        "gold_parse": "",
        "query": "SELECT Name, SUM(Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position < 20;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "For each singer, compute the sum of sales for songs that reached a position less than 20",
        "gold_parse": "",
        "query": "SELECT Name, SUM(Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position < 20;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What is the total sales of songs that peaked below the 20th position for each singer?",
        "gold_parse": "",
        "query": "SELECT Name, SUM(Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position < 20;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the sum of sales for songs with a top position less than 20 for each artist",
        "gold_parse": "",
        "query": "SELECT Name, SUM(Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position < 20;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Determine the total sales of songs that didn't exceed the 20th position for each singer",
        "gold_parse": "",
        "query": "SELECT Name, SUM(Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position < 20;",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"",
        "question": "Find the cell mobile number of the candidates whose assessment code is \"Fail\"?",
        "correctness": 1,
        "gold_parse": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\""
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"",
        "question": "What is the mobile number of the candidates who failed the assessment?",
        "correctness": 1,
        "gold_parse": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\""
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"",
        "question": "Can you provide the cell phone numbers of candidates with a 'Fail' assessment code?",
        "correctness": 1,
        "gold_parse": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\""
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"",
        "question": "I need the mobile numbers of those candidates who have 'Fail' as their assessment code.",
        "correctness": 1,
        "gold_parse": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\""
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"",
        "question": "Show me the cell phone numbers of candidates who didn't pass the assessment.",
        "correctness": 1,
        "gold_parse": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\""
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"",
        "question": "Could you find the mobile numbers of the candidates who have been marked as 'Fail' in the assessment?",
        "correctness": 1,
        "gold_parse": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\""
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
        "question": "What are the different cities where students live?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
        "question": "Can you list the cities where students reside?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
        "question": "What cities do the students come from?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
        "question": "In which cities do the students live?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
        "question": "Could you tell me the cities where students are living?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
        "question": "What are the cities of residence for the students?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id"
    },
    {
        "db_id": "singer",
        "question": "List the titles of songs that have sales less than 1,000,000 or a highest position greater than 10.",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Sales < 1000000 OR Highest_Position > 10;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Show me the song titles that have sold less than a million copies or reached a peak position above 10.",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Sales < 1000000 OR Highest_Position > 10;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the titles of songs that have either sold fewer than 1,000,000 units or peaked at a position higher than 10?",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Sales < 1000000 OR Highest_Position > 10;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Can you list the songs that have either not sold a million copies or have a top position greater than 10?",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Sales < 1000000 OR Highest_Position > 10;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "I need the titles of songs that have sales under 1,000,000 or a highest chart position over 10.",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Sales < 1000000 OR Highest_Position > 10;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Provide the song titles that have less than 1,000,000 in sales or a highest chart ranking above 10.",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Sales < 1000000 OR Highest_Position > 10;",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have destroyed a document.",
        "gold_parse": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "query": "SELECT T2.Destroyed_by_Employee_ID FROM Employees AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Employee_ID = T2.Destroyed_by_Employee_ID GROUP BY T1.Employee_ID HAVING Count ( * ) = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Display the identifiers of all employees who have destroyed a document.",
        "gold_parse": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "query": "SELECT T2.Destroyed_by_Employee_ID FROM Employees AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Employee_ID = T2.Destroyed_by_Employee_ID GROUP BY T1.Employee_ID HAVING Count ( * ) = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Can you list the ids of all employees who have ruined a document?",
        "gold_parse": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "query": "SELECT T2.Destroyed_by_Employee_ID FROM Employees AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Employee_ID = T2.Destroyed_by_Employee_ID GROUP BY T1.Employee_ID HAVING Count ( * ) = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Provide the ids of all employees who have damaged a document.",
        "gold_parse": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "query": "SELECT T2.Destroyed_by_Employee_ID FROM Employees AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Employee_ID = T2.Destroyed_by_Employee_ID GROUP BY T1.Employee_ID HAVING Count ( * ) = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Reveal the ids of all employees who have obliterated a document.",
        "gold_parse": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "query": "SELECT T2.Destroyed_by_Employee_ID FROM Employees AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Employee_ID = T2.Destroyed_by_Employee_ID GROUP BY T1.Employee_ID HAVING Count ( * ) = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Present the ids of all employees who have demolished a document.",
        "gold_parse": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "query": "SELECT T2.Destroyed_by_Employee_ID FROM Employees AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Employee_ID = T2.Destroyed_by_Employee_ID GROUP BY T1.Employee_ID HAVING Count ( * ) = value",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "Show the names of people who have been on the negative side of debates at least twice.",
        "gold_parse": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "query": "SELECT Name FROM people GROUP BY Name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "Display the names of individuals who have participated in debates on the negative side at least two times.",
        "gold_parse": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "query": "SELECT Name FROM people GROUP BY Name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "Can you list the names of people who have been on the opposing side in debates more than once?",
        "gold_parse": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "query": "SELECT Name FROM people GROUP BY Name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "Who are the people that have been on the negative side in debates at least twice?",
        "gold_parse": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "query": "SELECT Name FROM people GROUP BY Name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "Identify the individuals who have been on the negative side of debates two or more times.",
        "gold_parse": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "query": "SELECT Name FROM people GROUP BY Name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "Provide the names of those who have been on the negative side in debates at least on two occasions.",
        "gold_parse": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "query": "SELECT Name FROM people GROUP BY Name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the id of the patient who stayed in room 111 most recently?",
        "gold_parse": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1",
        "query": "SELECT Physician FROM Undergoes ORDER BY DateUndergoes Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Can you tell me the id of the most recent patient who occupied room 111?",
        "gold_parse": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1",
        "query": "SELECT Physician FROM Undergoes ORDER BY DateUndergoes Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Who is the latest patient in room 111 based on their id?",
        "gold_parse": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1",
        "query": "SELECT Physician FROM Undergoes ORDER BY DateUndergoes Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What's the id of the last patient that stayed in room 111?",
        "gold_parse": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1",
        "query": "SELECT Physician FROM Undergoes ORDER BY DateUndergoes Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Identify the id of the patient who most recently stayed in room 111.",
        "gold_parse": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1",
        "query": "SELECT Physician FROM Undergoes ORDER BY DateUndergoes Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the id of the most recent occupant of room 111?",
        "gold_parse": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1",
        "query": "SELECT Physician FROM Undergoes ORDER BY DateUndergoes Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')",
        "question": "What is the id of every painting created before the oldest painting in gallery 240?",
        "correctness": 1,
        "gold_parse": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')"
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')",
        "question": "Can you provide the id of all paintings that were created prior to the earliest painting in gallery 240?",
        "correctness": 1,
        "gold_parse": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')"
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')",
        "question": "What are the ids of the paintings that were made before the first painting in gallery 240?",
        "correctness": 1,
        "gold_parse": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')"
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')",
        "question": "Could you list the ids of all paintings that were produced before the oldest painting in gallery 240?",
        "correctness": 1,
        "gold_parse": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')"
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')",
        "question": "What's the id of each painting that was created before the oldest artwork in gallery 240?",
        "correctness": 1,
        "gold_parse": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')"
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')",
        "question": "Can I get the ids of all paintings that came into existence before the oldest painting in gallery 240?",
        "correctness": 1,
        "gold_parse": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')"
    },
    {
        "db_id": "hr_1",
        "question": "What are the first and last name for those employees who works either in department 70 or 90?",
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value OR T1.DEPARTMENT_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you provide the first and last names of employees working in either department 70 or 90?",
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value OR T1.DEPARTMENT_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Who are the employees with their first and last names working in department 70 or 90?",
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value OR T1.DEPARTMENT_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "I need the first and last names of employees in department 70 or 90.",
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value OR T1.DEPARTMENT_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Could you list the first and last names of employees in either department 70 or 90?",
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value OR T1.DEPARTMENT_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What's the first and last name of any employee in department 70 or 90?",
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value OR T1.DEPARTMENT_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'",
        "question": "What are all the different contents stored in boxes in New York?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'",
        "question": "What types of items are stored in boxes in New York?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'",
        "question": "Can you list the different contents found in boxes in New York?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'",
        "question": "What are the various items stored in New York's boxes?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'",
        "question": "What different kinds of contents are in the boxes in New York?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'",
        "question": "What variety of items can be found in boxes in New York?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
        "question": "Find the average room count of the apartments that have the \"Studio\" type code.",
        "correctness": 1,
        "gold_parse": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
        "question": "What is the average number of rooms in apartments classified as 'Studio'?",
        "correctness": 1,
        "gold_parse": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
        "question": "Can you calculate the mean room count for 'Studio' type apartments?",
        "correctness": 1,
        "gold_parse": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
        "question": "What's the average room count for apartments with the type code 'Studio'?",
        "correctness": 1,
        "gold_parse": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
        "question": "Determine the average number of rooms in 'Studio' type apartments.",
        "correctness": 1,
        "gold_parse": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
        "question": "What is the mean number of rooms in apartments that are categorized as 'Studio'?",
        "correctness": 1,
        "gold_parse": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\""
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the deparment with the highest enrollment?",
        "correctness": 1,
        "gold_parse": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Which department has the highest number of enrollments?",
        "correctness": 1,
        "gold_parse": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Can you tell me the department that has the most enrollments?",
        "correctness": 1,
        "gold_parse": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What's the name of the department with the most students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Identify the department with the maximum enrollment.",
        "correctness": 1,
        "gold_parse": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Which department name corresponds to the highest enrollment?",
        "correctness": 1,
        "gold_parse": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "soccer_1",
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "query": "SELECT T1.player_api_id FROM Player AS T1 WHERE T1.height > value INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 WHERE T2.overall_rating < value",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "Show me all player ids for players who are at least 180cm tall and have an overall rating above 85.",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "query": "SELECT T1.player_api_id FROM Player AS T1 WHERE T1.height > value INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 WHERE T2.overall_rating < value",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "Can you provide the player ids for those who are 180cm or taller and have an overall rating of more than 85?",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "query": "SELECT T1.player_api_id FROM Player AS T1 WHERE T1.height > value INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 WHERE T2.overall_rating < value",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "I need the player ids of all players who are not shorter than 180cm and have an overall rating exceeding 85.",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "query": "SELECT T1.player_api_id FROM Player AS T1 WHERE T1.height > value INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 WHERE T2.overall_rating < value",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "Find all player ids of players whose height is 180cm or more and overall rating is greater than 85.",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "query": "SELECT T1.player_api_id FROM Player AS T1 WHERE T1.height > value INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 WHERE T2.overall_rating < value",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "Retrieve all player ids for players with a height of 180cm or more and an overall rating higher than 85.",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "query": "SELECT T1.player_api_id FROM Player AS T1 WHERE T1.height > value INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 WHERE T2.overall_rating < value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of customers who have purchased at least three different products?",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Can you list the unique names of customers who have bought a minimum of three different items?",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Who are the customers that have purchased three or more distinct products?",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Identify the customers who have bought at least three different products.",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the unique customer names for those who have purchased three or more different items?",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Could you provide the distinct names of customers who have made purchases of at least three different products?",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "question": "List the votes of elections in descending order.",
        "gold_parse": "SELECT Votes FROM election ORDER BY Votes DESC",
        "query": "SELECT Votes FROM election ORDER BY Vote_Percent Desc",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "question": "Show the election votes in a descending order",
        "gold_parse": "SELECT Votes FROM election ORDER BY Votes DESC",
        "query": "SELECT Votes FROM election ORDER BY Vote_Percent Desc",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "question": "Can you list down the votes from elections in a decreasing order?",
        "gold_parse": "SELECT Votes FROM election ORDER BY Votes DESC",
        "query": "SELECT Votes FROM election ORDER BY Vote_Percent Desc",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "question": "Display the number of votes from each election in descending order",
        "gold_parse": "SELECT Votes FROM election ORDER BY Votes DESC",
        "query": "SELECT Votes FROM election ORDER BY Vote_Percent Desc",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "question": "Provide a list of election votes sorted in descending order",
        "gold_parse": "SELECT Votes FROM election ORDER BY Votes DESC",
        "query": "SELECT Votes FROM election ORDER BY Vote_Percent Desc",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "question": "Could you enumerate the votes of elections in a descending sequence?",
        "gold_parse": "SELECT Votes FROM election ORDER BY Votes DESC",
        "query": "SELECT Votes FROM election ORDER BY Vote_Percent Desc",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "How many routes go from the United States to Canada?",
        "gold_parse": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the count of routes that start in the United States and end in Canada?",
        "gold_parse": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Can you tell me the number of routes from the United States to Canada?",
        "gold_parse": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What's the total number of routes connecting the United States and Canada?",
        "gold_parse": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "How many routes are there from the United States to Canada?",
        "gold_parse": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the total count of routes from the United States to Canada?",
        "gold_parse": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2",
        "question": "List the types of engines that are used by at least two drivers.",
        "correctness": 1,
        "gold_parse": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2",
        "question": "What are the engine types used by more than one driver?",
        "correctness": 1,
        "gold_parse": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2",
        "question": "Can you show me the engine types that are utilized by at least two drivers?",
        "correctness": 1,
        "gold_parse": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2",
        "question": "Which types of engines are being used by two or more drivers?",
        "correctness": 1,
        "gold_parse": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2",
        "question": "Identify the engine types that are in use by a minimum of two drivers.",
        "correctness": 1,
        "gold_parse": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2",
        "question": "What types of engines are operated by at least two drivers?",
        "correctness": 1,
        "gold_parse": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);",
        "question": "What are the names of journals with the lowest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);",
        "question": "Can you list the names of journals that have the smallest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);",
        "question": "Which journals have the lowest journal ID in terms of their names?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);",
        "question": "What are the journal names associated with the lowest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);",
        "question": "Could you tell me the names of journals that possess the lowest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);",
        "question": "I'd like to know the names of journals with the minimum journal ID.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "How many customers are there?",
        "gold_parse": "SELECT count(*) FROM customers",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the total number of customers?",
        "gold_parse": "SELECT count(*) FROM customers",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Can you tell me the count of customers?",
        "gold_parse": "SELECT count(*) FROM customers",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What's the customer count?",
        "gold_parse": "SELECT count(*) FROM customers",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "How many customers do we have?",
        "gold_parse": "SELECT count(*) FROM customers",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the count of our customers?",
        "gold_parse": "SELECT count(*) FROM customers",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Find the delegates who are from counties with population below 100000.",
        "gold_parse": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
        "query": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Identify the delegates originating from counties with a population less than 100000.",
        "gold_parse": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
        "query": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Can you list the delegates from counties that have less than 100000 residents?",
        "gold_parse": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
        "query": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Who are the delegates from counties with fewer than 100000 inhabitants?",
        "gold_parse": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
        "query": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show me the delegates from counties where the population is under 100000.",
        "gold_parse": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
        "query": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Find out who are the delegates from counties with a population not exceeding 100000.",
        "gold_parse": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
        "query": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > value",
        "correctness": 0
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT HOST FROM performance ORDER BY Attendance ASC",
        "question": "List the hosts of performances in ascending order of attendance.",
        "correctness": 1,
        "gold_parse": "SELECT HOST FROM performance ORDER BY Attendance ASC"
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT HOST FROM performance ORDER BY Attendance ASC",
        "question": "Who are the hosts of performances sorted by attendance in ascending order?",
        "correctness": 1,
        "gold_parse": "SELECT HOST FROM performance ORDER BY Attendance ASC"
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT HOST FROM performance ORDER BY Attendance ASC",
        "question": "Can you provide the hosts of performances, ordered by attendance from lowest to highest?",
        "correctness": 1,
        "gold_parse": "SELECT HOST FROM performance ORDER BY Attendance ASC"
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT HOST FROM performance ORDER BY Attendance ASC",
        "question": "Show me the hosts of performances, arranged in increasing order of attendance.",
        "correctness": 1,
        "gold_parse": "SELECT HOST FROM performance ORDER BY Attendance ASC"
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT HOST FROM performance ORDER BY Attendance ASC",
        "question": "I'd like to see the hosts of performances, with the least attended first.",
        "correctness": 1,
        "gold_parse": "SELECT HOST FROM performance ORDER BY Attendance ASC"
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT HOST FROM performance ORDER BY Attendance ASC",
        "question": "Could you list the hosts of performances, starting with the ones with the smallest attendance?",
        "correctness": 1,
        "gold_parse": "SELECT HOST FROM performance ORDER BY Attendance ASC"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find all the ids and dates of the logs for the problem whose id is 10.",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "query": "SELECT T1.problem_log_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_id = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Retrieve all the ids and dates from the logs for the problem with an id of 10.",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "query": "SELECT T1.problem_log_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_id = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Can you show me all the ids and dates in the logs for the problem that has an id of 10?",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "query": "SELECT T1.problem_log_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_id = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "I need to see all the ids and dates of the logs for the problem identified by id 10.",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "query": "SELECT T1.problem_log_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_id = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Show me all the ids and dates of the logs for the problem that is identified by the id 10.",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "query": "SELECT T1.problem_log_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_id = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Could you find all the ids and dates in the logs for the problem with the id 10?",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "query": "SELECT T1.problem_log_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_id = value",
        "correctness": 0
    },
    {
        "db_id": "car_racing",
        "query": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\"",
        "question": "Find the average age of the drivers from the countries that use \"English\" as official native language.",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\""
    },
    {
        "db_id": "car_racing",
        "query": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\"",
        "question": "What is the mean age of drivers in countries where English is the official language?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\""
    },
    {
        "db_id": "car_racing",
        "query": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\"",
        "question": "Can you determine the average age of drivers in English-speaking countries?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\""
    },
    {
        "db_id": "car_racing",
        "query": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\"",
        "question": "What's the average age of drivers in countries where the native language is English?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\""
    },
    {
        "db_id": "car_racing",
        "query": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\"",
        "question": "Could you find out the mean age of drivers from countries that have English as their official language?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\""
    },
    {
        "db_id": "car_racing",
        "query": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\"",
        "question": "In countries where English is the native language, what is the average age of the drivers?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\""
    },
    {
        "db_id": "department_management",
        "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
        "gold_parse": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'",
        "query": "SELECT DISTINCT T1.Creation FROM department AS T1 JOIN management AS T2 ON T1.Department_ID = T2.department_ID WHERE T2.temporary_acting = value",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "Can you list the unique years when departments were created that are managed by a secretary born in Alabama?",
        "gold_parse": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'",
        "query": "SELECT DISTINCT T1.Creation FROM department AS T1 JOIN management AS T2 ON T1.Department_ID = T2.department_ID WHERE T2.temporary_acting = value",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "What are the different years of establishment for departments overseen by a secretary from Alabama?",
        "gold_parse": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'",
        "query": "SELECT DISTINCT T1.Creation FROM department AS T1 JOIN management AS T2 ON T1.Department_ID = T2.department_ID WHERE T2.temporary_acting = value",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "Could you provide the distinct years of formation for departments supervised by a secretary who was born in Alabama?",
        "gold_parse": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'",
        "query": "SELECT DISTINCT T1.Creation FROM department AS T1 JOIN management AS T2 ON T1.Department_ID = T2.department_ID WHERE T2.temporary_acting = value",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "What are the various creation years for departments that are under the management of a secretary from Alabama?",
        "gold_parse": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'",
        "query": "SELECT DISTINCT T1.Creation FROM department AS T1 JOIN management AS T2 ON T1.Department_ID = T2.department_ID WHERE T2.temporary_acting = value",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "Can you identify the unique establishment years of departments managed by a secretary who was born in Alabama?",
        "gold_parse": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'",
        "query": "SELECT DISTINCT T1.Creation FROM department AS T1 JOIN management AS T2 ON T1.Department_ID = T2.department_ID WHERE T2.temporary_acting = value",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname FROM journal WHERE journalid IN (SELECT journalid FROM paper);",
        "question": "What are the names of journals where papers have been published?",
        "correctness": 1,
        "gold_parse": "SELECT journalname FROM journal WHERE journalid IN (SELECT journalid FROM paper);"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname FROM journal WHERE journalid IN (SELECT journalid FROM paper);",
        "question": "Can you list the names of journals where papers have been published?",
        "correctness": 1,
        "gold_parse": "SELECT journalname FROM journal WHERE journalid IN (SELECT journalid FROM paper);"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname FROM journal WHERE journalid IN (SELECT journalid FROM paper);",
        "question": "What are the titles of journals that have published papers?",
        "correctness": 1,
        "gold_parse": "SELECT journalname FROM journal WHERE journalid IN (SELECT journalid FROM paper);"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname FROM journal WHERE journalid IN (SELECT journalid FROM paper);",
        "question": "Could you tell me the names of journals where papers have been published?",
        "correctness": 1,
        "gold_parse": "SELECT journalname FROM journal WHERE journalid IN (SELECT journalid FROM paper);"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname FROM journal WHERE journalid IN (SELECT journalid FROM paper);",
        "question": "What are the journals that have published papers?",
        "correctness": 1,
        "gold_parse": "SELECT journalname FROM journal WHERE journalid IN (SELECT journalid FROM paper);"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname FROM journal WHERE journalid IN (SELECT journalid FROM paper);",
        "question": "Can you provide the names of journals where papers have been published?",
        "correctness": 1,
        "gold_parse": "SELECT journalname FROM journal WHERE journalid IN (SELECT journalid FROM paper);"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "question": "Count the total number of policies used by the customer named \"Dayana Robel\".",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "question": "How many policies does the customer Dayana Robel have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "question": "What is the total number of policies that Dayana Robel uses?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "question": "Can you count the policies used by Dayana Robel?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "question": "What's the count of policies used by Dayana Robel?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "question": "Determine the total number of policies used by Dayana Robel.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show all the Store_Name of drama workshop groups.",
        "gold_parse": "SELECT Store_Name FROM Drama_Workshop_Groups",
        "query": "SELECT Store_Name FROM Stores",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Display all the Store_Name for drama workshop groups.",
        "gold_parse": "SELECT Store_Name FROM Drama_Workshop_Groups",
        "query": "SELECT Store_Name FROM Stores",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Can you list all the Store_Name associated with drama workshop groups?",
        "gold_parse": "SELECT Store_Name FROM Drama_Workshop_Groups",
        "query": "SELECT Store_Name FROM Stores",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are all the Store_Name of drama workshop groups?",
        "gold_parse": "SELECT Store_Name FROM Drama_Workshop_Groups",
        "query": "SELECT Store_Name FROM Stores",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Provide a list of all Store_Name for drama workshop groups.",
        "gold_parse": "SELECT Store_Name FROM Drama_Workshop_Groups",
        "query": "SELECT Store_Name FROM Stores",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "I want to see all the Store_Name of drama workshop groups.",
        "gold_parse": "SELECT Store_Name FROM Drama_Workshop_Groups",
        "query": "SELECT Store_Name FROM Stores",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the id and name of the staff who has been assigned for the least amount of time?",
        "gold_parse": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "query": "SELECT staff_id , staff_name FROM Staff GROUP BY staff_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Who is the staff member with the shortest assignment duration, and what is their id and name?",
        "gold_parse": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "query": "SELECT staff_id , staff_name FROM Staff GROUP BY staff_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Can you tell me the id and name of the staff member who has been assigned for the shortest period?",
        "gold_parse": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "query": "SELECT staff_id , staff_name FROM Staff GROUP BY staff_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the id and name of the staff member who has the shortest assignment time?",
        "gold_parse": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "query": "SELECT staff_id , staff_name FROM Staff GROUP BY staff_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Who is the staff member assigned for the least amount of time, and what are their id and name?",
        "gold_parse": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "query": "SELECT staff_id , staff_name FROM Staff GROUP BY staff_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "I'd like to know the id and name of the staff member who has been on assignment for the least amount of time.",
        "gold_parse": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "query": "SELECT staff_id , staff_name FROM Staff GROUP BY staff_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Give the maximum price and score for wines produced in the appelation St. Helena.",
        "gold_parse": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"",
        "query": "SELECT Max ( Price ) , Min ( Score ) FROM wine WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What is the highest price and score for wines from the St. Helena appelation?",
        "gold_parse": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"",
        "query": "SELECT Max ( Price ) , Min ( Score ) FROM wine WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Can you tell me the maximum price and score for wines made in St. Helena appelation?",
        "gold_parse": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"",
        "query": "SELECT Max ( Price ) , Min ( Score ) FROM wine WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What's the top price and score for wines that come from the St. Helena appelation?",
        "gold_parse": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"",
        "query": "SELECT Max ( Price ) , Min ( Score ) FROM wine WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "I'd like to know the maximum price and score for wines originating from the St. Helena appelation.",
        "gold_parse": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"",
        "query": "SELECT Max ( Price ) , Min ( Score ) FROM wine WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Could you provide the highest price and score for wines produced in the St. Helena appelation?",
        "gold_parse": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"",
        "query": "SELECT Max ( Price ) , Min ( Score ) FROM wine WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Best Buy');",
        "question": "What are the names of businesses that have the same name as 'Best Buy'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Best Buy');"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Best Buy');",
        "question": "Can you list the businesses that are named 'Best Buy'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Best Buy');"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Best Buy');",
        "question": "Which businesses go by the name 'Best Buy'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Best Buy');"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Best Buy');",
        "question": "Identify the businesses that carry the name 'Best Buy'.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Best Buy');"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Best Buy');",
        "question": "What businesses are called 'Best Buy'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Best Buy');"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Best Buy');",
        "question": "Could you tell me the businesses that have 'Best Buy' as their name?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Best Buy');"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "question": "Who is the customer with the lowest total payment, who has made at least one payment? Provide their first name, last name, and id.",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "question": "Can you find the customer who has spent the least amount of money but has made at least one payment? I need their first name, last name, and id.",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "question": "Identify the customer who, having made at least one payment, has the smallest total expenditure. What are their first name, last name, and id?",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "question": "Who is the customer that has made at least one payment and has the smallest total spend? I need their first name, last name, and id.",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "question": "Which customer, having made at least one payment, has the lowest total spend? Give me their first name, last name, and id.",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
        "question": "How many female students have milk or egg allergies?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
        "question": "What is the count of female students who are allergic to milk or eggs?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
        "question": "Can you tell me the number of female students with allergies to milk or eggs?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
        "question": "What's the total number of female students having milk or egg allergies?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
        "question": "How many girl students are there who have allergies to milk or eggs?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
        "question": "What is the total count of female students who have allergies to either milk or eggs?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\""
    },
    {
        "db_id": "country_language",
        "query": "SELECT count(DISTINCT language_id) FROM official_languages",
        "question": "How many different official languages are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT language_id) FROM official_languages"
    },
    {
        "db_id": "country_language",
        "query": "SELECT count(DISTINCT language_id) FROM official_languages",
        "question": "What is the total count of unique official languages?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT language_id) FROM official_languages"
    },
    {
        "db_id": "country_language",
        "query": "SELECT count(DISTINCT language_id) FROM official_languages",
        "question": "Can you tell me the number of distinct official languages?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT language_id) FROM official_languages"
    },
    {
        "db_id": "country_language",
        "query": "SELECT count(DISTINCT language_id) FROM official_languages",
        "question": "What's the quantity of different official languages?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT language_id) FROM official_languages"
    },
    {
        "db_id": "country_language",
        "query": "SELECT count(DISTINCT language_id) FROM official_languages",
        "question": "How many unique official languages exist?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT language_id) FROM official_languages"
    },
    {
        "db_id": "country_language",
        "query": "SELECT count(DISTINCT language_id) FROM official_languages",
        "question": "What is the count of different official languages?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT language_id) FROM official_languages"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_selling_price , typical_selling_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Can you provide the name and usual buying and selling prices of the products with the color 'yellow'?",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_selling_price , typical_selling_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the name and standard buying and selling prices of 'yellow' colored products?",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_selling_price , typical_selling_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Could you tell me the name and average buying and selling prices of the products that are colored yellow?",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_selling_price , typical_selling_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "I need to know the name and common buying and selling prices of the products that are yellow in color.",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_selling_price , typical_selling_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical purchase and sale prices of the products that are described as 'yellow' in color?",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_selling_price , typical_selling_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "List property IDs and sum of house feature 3 where the vendor requested price is equal to the property type code.",
        "gold_parse": "",
        "query": "SELECT property_id, SUM(hse_feature_3) FROM Properties WHERE vendor_requested_price = (SELECT property_type_code FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Show the property IDs and the total of house feature 3 where the asking price matches the property type code.",
        "gold_parse": "",
        "query": "SELECT property_id, SUM(hse_feature_3) FROM Properties WHERE vendor_requested_price = (SELECT property_type_code FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Can you provide the property IDs and the sum of house feature 3 for properties where the vendor's asking price is the same as the property type code?",
        "gold_parse": "",
        "query": "SELECT property_id, SUM(hse_feature_3) FROM Properties WHERE vendor_requested_price = (SELECT property_type_code FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the property IDs and the sum of house feature 3 for properties with a vendor requested price equal to the property type code?",
        "gold_parse": "",
        "query": "SELECT property_id, SUM(hse_feature_3) FROM Properties WHERE vendor_requested_price = (SELECT property_type_code FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Display the property IDs and the total of house feature 3 for properties where the vendor's price request matches the property type code.",
        "gold_parse": "",
        "query": "SELECT property_id, SUM(hse_feature_3) FROM Properties WHERE vendor_requested_price = (SELECT property_type_code FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Could you list the property IDs and the sum of house feature 3 where the vendor's price request is equivalent to the property type code?",
        "gold_parse": "",
        "query": "SELECT property_id, SUM(hse_feature_3) FROM Properties WHERE vendor_requested_price = (SELECT property_type_code FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "query": "SELECT COUNT(DISTINCT Country) FROM climber",
        "question": "How many distinct countries are the climbers from?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM climber"
    },
    {
        "db_id": "climbing",
        "query": "SELECT COUNT(DISTINCT Country) FROM climber",
        "question": "What is the count of unique countries the climbers come from?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM climber"
    },
    {
        "db_id": "climbing",
        "query": "SELECT COUNT(DISTINCT Country) FROM climber",
        "question": "Can you tell me the number of different countries the climbers are from?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM climber"
    },
    {
        "db_id": "climbing",
        "query": "SELECT COUNT(DISTINCT Country) FROM climber",
        "question": "What's the total number of distinct countries of the climbers?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM climber"
    },
    {
        "db_id": "climbing",
        "query": "SELECT COUNT(DISTINCT Country) FROM climber",
        "question": "How many different countries do the climbers originate from?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM climber"
    },
    {
        "db_id": "climbing",
        "query": "SELECT COUNT(DISTINCT Country) FROM climber",
        "question": "What is the total count of unique countries where the climbers are from?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM climber"
    },
    {
        "db_id": "world_1",
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "gold_parse": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "query": "SELECT Avg ( GNP ) , Avg ( Population ) FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the mean GNP and cumulative population of all countries governed as US territories?",
        "gold_parse": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "query": "SELECT Avg ( GNP ) , Avg ( Population ) FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Can you tell me the average Gross National Product and total number of inhabitants in countries that are US territories?",
        "gold_parse": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "query": "SELECT Avg ( GNP ) , Avg ( Population ) FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What's the average GNP and total populace in nations under US jurisdiction?",
        "gold_parse": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "query": "SELECT Avg ( GNP ) , Avg ( Population ) FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Could you provide the average GNP and total population for all nations that are considered US territories?",
        "gold_parse": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "query": "SELECT Avg ( GNP ) , Avg ( Population ) FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average Gross National Product and the total population of nations that are territories of the United States?",
        "gold_parse": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "query": "SELECT Avg ( GNP ) , Avg ( Population ) FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35",
        "question": "What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35",
        "question": "Can you list the distinct plane names where the average age of pilots is less than 35 and the number of pilots who have flown them?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35",
        "question": "What are the unique names of planes that have been flown by pilots with an average age under 35, and the count of pilots for each?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35",
        "question": "Could you provide the different names of planes piloted by individuals averaging under 35 years of age, along with the number of pilots for each plane?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35",
        "question": "What are the various aircraft names where the mean age of pilots is below 35, and how many pilots have operated each?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35",
        "question": "Can you identify the different plane types where the average pilot's age is under 35, and the count of pilots who have flown each type?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35"
    },
    {
        "db_id": "music_2",
        "question": "What is the first and last name of artist who performed \"Le Pop\"?",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"",
        "query": "SELECT Firstname , Lastname FROM Band WHERE Firstname = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Can you tell me the first and last name of the artist who performed 'Le Pop'?",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"",
        "query": "SELECT Firstname , Lastname FROM Band WHERE Firstname = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Who is the artist with the first and last name that performed 'Le Pop'?",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"",
        "query": "SELECT Firstname , Lastname FROM Band WHERE Firstname = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What's the name of the artist who performed the song 'Le Pop'?",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"",
        "query": "SELECT Firstname , Lastname FROM Band WHERE Firstname = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "I'd like to know the first and last name of the artist who performed 'Le Pop'.",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"",
        "query": "SELECT Firstname , Lastname FROM Band WHERE Firstname = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Could you provide the first and last name of the artist who performed 'Le Pop'?",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"",
        "query": "SELECT Firstname , Lastname FROM Band WHERE Firstname = value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "How many residents does each property have? List property id and resident count.",
        "gold_parse": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id",
        "query": "SELECT resident_id , Count ( * ) FROM Residents GROUP BY resident_id",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What is the count of residents for each property? Include property id and resident count.",
        "gold_parse": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id",
        "query": "SELECT resident_id , Count ( * ) FROM Residents GROUP BY resident_id",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "Can you provide the number of residents per property? Please include property id and resident count.",
        "gold_parse": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id",
        "query": "SELECT resident_id , Count ( * ) FROM Residents GROUP BY resident_id",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What's the total number of residents for each property? Please list property id and resident count.",
        "gold_parse": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id",
        "query": "SELECT resident_id , Count ( * ) FROM Residents GROUP BY resident_id",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "Could you tell me the number of residents living in each property? Include property id and resident count.",
        "gold_parse": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id",
        "query": "SELECT resident_id , Count ( * ) FROM Residents GROUP BY resident_id",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "I'd like to know the resident count for each property. Please list property id and resident count.",
        "gold_parse": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id",
        "query": "SELECT resident_id , Count ( * ) FROM Residents GROUP BY resident_id",
        "correctness": 0
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse",
        "question": "Select the warehouse code and the average value of the boxes in each warehouse.",
        "correctness": 1,
        "gold_parse": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse",
        "question": "What is the warehouse code and the average box value for each warehouse?",
        "correctness": 1,
        "gold_parse": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse",
        "question": "Can you provide the warehouse code and the mean value of boxes in each warehouse?",
        "correctness": 1,
        "gold_parse": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse",
        "question": "Show me the warehouse code and the average worth of boxes in each warehouse.",
        "correctness": 1,
        "gold_parse": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse",
        "question": "I want to know the warehouse code and the average box value in each warehouse.",
        "correctness": 1,
        "gold_parse": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse",
        "question": "Could you tell me the warehouse code and the average value of boxes in every warehouse?",
        "correctness": 1,
        "gold_parse": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse"
    },
    {
        "db_id": "region_building",
        "query": "SELECT DISTINCT Address FROM building",
        "question": "Give me a list of distinct building addresses.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Address FROM building"
    },
    {
        "db_id": "region_building",
        "query": "SELECT DISTINCT Address FROM building",
        "question": "Can you provide a unique list of building addresses?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Address FROM building"
    },
    {
        "db_id": "region_building",
        "query": "SELECT DISTINCT Address FROM building",
        "question": "I need a list of different building addresses.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Address FROM building"
    },
    {
        "db_id": "region_building",
        "query": "SELECT DISTINCT Address FROM building",
        "question": "Could you generate a list of non-repeating building addresses?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Address FROM building"
    },
    {
        "db_id": "region_building",
        "query": "SELECT DISTINCT Address FROM building",
        "question": "Show me a list of unique building addresses.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Address FROM building"
    },
    {
        "db_id": "region_building",
        "query": "SELECT DISTINCT Address FROM building",
        "question": "I'd like to see a list of distinct addresses of buildings.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Address FROM building"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT DISTINCT product_size FROM Products",
        "question": "What are the different product sizes?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT product_size FROM Products"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT DISTINCT product_size FROM Products",
        "question": "Can you list the various product sizes?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT product_size FROM Products"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT DISTINCT product_size FROM Products",
        "question": "What are the various sizes of the products?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT product_size FROM Products"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT DISTINCT product_size FROM Products",
        "question": "Could you tell me the different sizes of products?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT product_size FROM Products"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT DISTINCT product_size FROM Products",
        "question": "What different sizes do the products come in?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT product_size FROM Products"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT DISTINCT product_size FROM Products",
        "question": "Can you tell me the different sizes available for the products?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT product_size FROM Products"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
        "question": "How many courses are provided in each semester and year?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
        "question": "What is the count of courses offered each semester and year?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
        "question": "Can you tell me the number of courses available in each semester and year?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
        "question": "What's the total number of courses given in each semester and year?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
        "question": "How many classes are offered each semester and year?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
        "question": "What is the total count of courses provided every semester and year?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR"
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Provide all details for employees earning between 8000 and 12000 and have a non-null commission or are not in department 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Show all data for employees whose salary ranges from 8000 to 12000, who either have a commission or are not part of department 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you list all the employees who earn between 8000 and 12000, have a commission, or are not in department 40?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "I need all information on employees who make between 8000 and 12000, have a commission, or don't belong to department 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Display all employee records with salaries between 8000 and 12000, who either receive a commission or are not in department 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;",
        "question": "What are the name and id of the three highest priced rooms?",
        "correctness": 1,
        "gold_parse": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;",
        "question": "Can you list the names and ids of the top three most expensive rooms?",
        "correctness": 1,
        "gold_parse": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;",
        "question": "What are the ids and names of the three rooms with the highest prices?",
        "correctness": 1,
        "gold_parse": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;",
        "question": "Could you provide the names and ids of the three rooms with the highest cost?",
        "correctness": 1,
        "gold_parse": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;",
        "question": "I need the names and ids of the three priciest rooms, can you provide that?",
        "correctness": 1,
        "gold_parse": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;",
        "question": "What are the names and ids of the three rooms that cost the most?",
        "correctness": 1,
        "gold_parse": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT COUNT(DISTINCT Country) FROM singer;",
        "question": "How many different countries are represented by the singers?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM singer;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT COUNT(DISTINCT Country) FROM singer;",
        "question": "What is the count of unique countries from which the singers come?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM singer;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT COUNT(DISTINCT Country) FROM singer;",
        "question": "Can you tell me the number of distinct countries the singers represent?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM singer;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT COUNT(DISTINCT Country) FROM singer;",
        "question": "What's the total number of different countries where the singers are from?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM singer;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT COUNT(DISTINCT Country) FROM singer;",
        "question": "How many countries do the singers come from?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM singer;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT COUNT(DISTINCT Country) FROM singer;",
        "question": "What is the diversity of countries represented by the singers?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM singer;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID < 5;",
        "question": "What are the names of conductors with IDs less than 5?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID < 5;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID < 5;",
        "question": "Can you list the names of conductors whose IDs are less than 5?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID < 5;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID < 5;",
        "question": "What are the conductor names for IDs under 5?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID < 5;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID < 5;",
        "question": "Could you provide the names of conductors with IDs below 5?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID < 5;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID < 5;",
        "question": "I need the names of conductors with IDs that are less than 5.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID < 5;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID < 5;",
        "question": "Show me the names of conductors with IDs less than 5.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID < 5;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;",
        "question": "What is the total shipments in each planet? List the planet name and total shipments.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;",
        "question": "Can you provide the total number of shipments for each planet along with the planet name?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;",
        "question": "What's the sum of shipments on each planet? Please include the planet name.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;",
        "question": "Could you list the total shipments per planet and include the planet's name?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;",
        "question": "I'd like to know the total shipments on each planet. Can you list the planet name as well?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;",
        "question": "Please show the total shipments for each planet and also mention the planet name.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;"
    },
    {
        "db_id": "phone_1",
        "question": "Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.",
        "gold_parse": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'",
        "query": "SELECT T1.Pixels FROM screen_mode AS T1 WHERE T1.Type = value INTERSECT SELECT T1.Pixels FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Accreditation_type = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "Identify the screen resolution of modes used by both fully accredited and provisionally accredited phones.",
        "gold_parse": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'",
        "query": "SELECT T1.Pixels FROM screen_mode AS T1 WHERE T1.Type = value INTERSECT SELECT T1.Pixels FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Accreditation_type = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "What are the pixel counts of the display modes used by phones with both full and provisional accreditations?",
        "gold_parse": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'",
        "query": "SELECT T1.Pixels FROM screen_mode AS T1 WHERE T1.Type = value INTERSECT SELECT T1.Pixels FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Accreditation_type = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "Can you list the screen pixels of modes that are common to phones with full and provisional accreditation types?",
        "gold_parse": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'",
        "query": "SELECT T1.Pixels FROM screen_mode AS T1 WHERE T1.Type = value INTERSECT SELECT T1.Pixels FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Accreditation_type = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "What are the screen modes in terms of pixels that are utilized by both fully accredited and provisionally accredited phones?",
        "gold_parse": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'",
        "query": "SELECT T1.Pixels FROM screen_mode AS T1 WHERE T1.Type = value INTERSECT SELECT T1.Pixels FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Accreditation_type = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "Determine the pixel dimensions of the screen modes used by phones with both full and provisional accreditation types.",
        "gold_parse": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'",
        "query": "SELECT T1.Pixels FROM screen_mode AS T1 WHERE T1.Type = value INTERSECT SELECT T1.Pixels FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Accreditation_type = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Give me the name of the customer who ordered the most items in total.",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Who is the customer with the highest total number of ordered items?",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Can you tell me the name of the customer who has ordered the most items?",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "I'd like to know the customer who has the highest total order count.",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Who has ordered the most items among all customers?",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Which customer has the highest total quantity of ordered items?",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT CONTENTS FROM boxes",
        "question": "What are the different contents in boxes?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT CONTENTS FROM boxes"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT CONTENTS FROM boxes",
        "question": "What types of items are stored in the boxes?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT CONTENTS FROM boxes"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT CONTENTS FROM boxes",
        "question": "Can you list the various contents found in the boxes?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT CONTENTS FROM boxes"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT CONTENTS FROM boxes",
        "question": "What are the various items contained in the boxes?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT CONTENTS FROM boxes"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT CONTENTS FROM boxes",
        "question": "What different items do the boxes hold?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT CONTENTS FROM boxes"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT CONTENTS FROM boxes",
        "question": "What variety of contents can be found in the boxes?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT CONTENTS FROM boxes"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year = 2021",
        "question": "What papers were published in the year 2021?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year = 2021"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year = 2021",
        "question": "Which articles were released in 2021?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year = 2021"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year = 2021",
        "question": "Can you list the papers that were published in 2021?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year = 2021"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year = 2021",
        "question": "What are the papers that came out in the year 2021?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year = 2021"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year = 2021",
        "question": "Identify the papers published in the year 2021.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year = 2021"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year = 2021",
        "question": "Show me the papers that were made public in 2021.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year = 2021"
    },
    {
        "db_id": "body_builder",
        "question": "List the snatch score and clean jerk score of body builders in ascending order of snatch score.",
        "gold_parse": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC",
        "query": "SELECT Total , Clean_Jerk FROM body_builder ORDER BY Total Asc",
        "correctness": 0
    },
    {
        "db_id": "body_builder",
        "question": "Show the snatch score and clean jerk score of body builders, sorted by snatch score in ascending order.",
        "gold_parse": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC",
        "query": "SELECT Total , Clean_Jerk FROM body_builder ORDER BY Total Asc",
        "correctness": 0
    },
    {
        "db_id": "body_builder",
        "question": "Can you provide the snatch score and clean jerk score of body builders, ordered by snatch score from lowest to highest?",
        "gold_parse": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC",
        "query": "SELECT Total , Clean_Jerk FROM body_builder ORDER BY Total Asc",
        "correctness": 0
    },
    {
        "db_id": "body_builder",
        "question": "I'd like to see the snatch score and clean jerk score of body builders, arranged in increasing order of snatch score.",
        "gold_parse": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC",
        "query": "SELECT Total , Clean_Jerk FROM body_builder ORDER BY Total Asc",
        "correctness": 0
    },
    {
        "db_id": "body_builder",
        "question": "Could you list the snatch score and clean jerk score of body builders, with the snatch score in ascending order?",
        "gold_parse": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC",
        "query": "SELECT Total , Clean_Jerk FROM body_builder ORDER BY Total Asc",
        "correctness": 0
    },
    {
        "db_id": "body_builder",
        "question": "Display the snatch score and clean jerk score of body builders, sorted in ascending order by snatch score.",
        "gold_parse": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC",
        "query": "SELECT Total , Clean_Jerk FROM body_builder ORDER BY Total Asc",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the different names of the colleges involved in the tryout in alphabetical order?",
        "gold_parse": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
        "query": "SELECT DISTINCT cName FROM College ORDER BY cName Asc",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Can you list the distinct names of colleges participating in the tryout in alphabetical order?",
        "gold_parse": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
        "query": "SELECT DISTINCT cName FROM College ORDER BY cName Asc",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the unique names of the colleges taking part in the tryout sorted alphabetically?",
        "gold_parse": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
        "query": "SELECT DISTINCT cName FROM College ORDER BY cName Asc",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Could you provide the different college names involved in the tryout in an alphabetical sequence?",
        "gold_parse": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
        "query": "SELECT DISTINCT cName FROM College ORDER BY cName Asc",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the various college names associated with the tryout, arranged in alphabetical order?",
        "gold_parse": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
        "query": "SELECT DISTINCT cName FROM College ORDER BY cName Asc",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Can you enumerate the different colleges involved in the tryout, sorted alphabetically?",
        "gold_parse": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
        "query": "SELECT DISTINCT cName FROM College ORDER BY cName Asc",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "gold_parse": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "query": "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Provide the unique document ids and their respective paragraph counts, sorted by id.",
        "gold_parse": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "query": "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Can you show me the distinct document ids and the number of paragraphs each one has, arranged by id?",
        "gold_parse": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "query": "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "I need to see the different document ids and the count of paragraphs for each, ordered by id.",
        "gold_parse": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "query": "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Display the various document ids with the corresponding number of paragraphs, sorted by id.",
        "gold_parse": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "query": "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Could you list the distinct document ids and the number of paragraphs for each, arranged in order of id?",
        "gold_parse": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "query": "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Show the job title and the difference between the lowest and highest salaries for jobs with a maximum salary between 12000 and 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you list the job titles and the salary range for jobs where the maximum salary is between 12000 and 18000?",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "I want to see the job title and the gap between the minimum and maximum salaries for jobs that have a maximum salary within 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Provide the job title and the difference in minimum and maximum salaries for jobs where the maximum salary falls between 12000 and 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Display the job title along with the difference between the minimum and maximum salaries for jobs that offer a maximum salary in the range of 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "book_1",
        "query": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book",
        "question": "Give the average purchase price and average sale price for books.",
        "correctness": 1,
        "gold_parse": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book"
    },
    {
        "db_id": "book_1",
        "query": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book",
        "question": "What is the average buying and selling price for books?",
        "correctness": 1,
        "gold_parse": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book"
    },
    {
        "db_id": "book_1",
        "query": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book",
        "question": "Can you tell me the average cost of purchase and sale for books?",
        "correctness": 1,
        "gold_parse": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book"
    },
    {
        "db_id": "book_1",
        "query": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book",
        "question": "What's the mean purchase and sale price for books?",
        "correctness": 1,
        "gold_parse": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book"
    },
    {
        "db_id": "book_1",
        "query": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book",
        "question": "Could you provide the average purchase and sale price for books?",
        "correctness": 1,
        "gold_parse": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book"
    },
    {
        "db_id": "book_1",
        "query": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book",
        "question": "I'd like to know the average price for buying and selling books.",
        "correctness": 1,
        "gold_parse": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book"
    },
    {
        "db_id": "college_2",
        "query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "question": "What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?",
        "correctness": 1,
        "gold_parse": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100"
    },
    {
        "db_id": "college_2",
        "query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "question": "Can you list the room numbers and buildings for classrooms that have a seating capacity of 50 to 100 students?",
        "correctness": 1,
        "gold_parse": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100"
    },
    {
        "db_id": "college_2",
        "query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "question": "What are the buildings and room numbers for classrooms that can accommodate 50 to 100 students?",
        "correctness": 1,
        "gold_parse": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100"
    },
    {
        "db_id": "college_2",
        "query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "question": "Could you provide the room numbers and buildings for classrooms with a capacity between 50 and 100 students?",
        "correctness": 1,
        "gold_parse": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100"
    },
    {
        "db_id": "college_2",
        "query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "question": "I need the room numbers and buildings for classrooms that can hold 50 to 100 students. Can you provide that?",
        "correctness": 1,
        "gold_parse": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100"
    },
    {
        "db_id": "college_2",
        "query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "question": "What are the room numbers and associated buildings for classrooms that can fit between 50 to 100 students?",
        "correctness": 1,
        "gold_parse": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?",
        "correctness": 1,
        "gold_parse": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "Can you provide the email addresses, cities, and counties of all customers from the gender that makes fewer orders?",
        "correctness": 1,
        "gold_parse": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "What are the email addresses, cities, and counties of customers belonging to the gender that places the least orders?",
        "correctness": 1,
        "gold_parse": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "Could you list the email addresses, cities, and counties of all customers from the gender that has fewer orders?",
        "correctness": 1,
        "gold_parse": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "I need the email addresses, cities, and counties of all customers from the gender that orders less frequently.",
        "correctness": 1,
        "gold_parse": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "Show me the email addresses, cities, and counties of all customers from the gender that doesn't order as much.",
        "correctness": 1,
        "gold_parse": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT DISTINCT Nationality FROM conductor;",
        "question": "What are the different nationalities of conductors?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Nationality FROM conductor;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT DISTINCT Nationality FROM conductor;",
        "question": "Can you list the various nationalities of conductors?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Nationality FROM conductor;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT DISTINCT Nationality FROM conductor;",
        "question": "What nationalities do the conductors belong to?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Nationality FROM conductor;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT DISTINCT Nationality FROM conductor;",
        "question": "Could you tell me the different nationalities of the conductors?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Nationality FROM conductor;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT DISTINCT Nationality FROM conductor;",
        "question": "What are the nationalities of the conductors?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Nationality FROM conductor;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT DISTINCT Nationality FROM conductor;",
        "question": "Can you tell me the nationalities of all the conductors?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Nationality FROM conductor;"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222",
        "question": "What are the titles of all paintings and sculpture works made by the artist whose id is 222?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222",
        "question": "Can you list the titles of all artworks, including paintings and sculptures, created by the artist with the id 222?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222",
        "question": "What are the names of all the paintings and sculptures created by the artist with id 222?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222",
        "question": "Could you provide the titles of all the paintings and sculptures made by the artist who has the id 222?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222",
        "question": "I'd like to know the titles of all the paintings and sculptures by the artist with the id 222.",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222",
        "question": "What are the titles of all the art pieces, specifically paintings and sculptures, by the artist identified by the id 222?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222"
    },
    {
        "db_id": "music_1",
        "question": "List the names of all genres in alphabetical oder, together with its ratings.",
        "gold_parse": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "query": "SELECT g_name FROM genre ORDER BY rating Asc",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Can you show me the names of all genres sorted alphabetically along with their ratings?",
        "gold_parse": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "query": "SELECT g_name FROM genre ORDER BY rating Asc",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Could you provide a list of all genre names in alphabetical order with their respective ratings?",
        "gold_parse": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "query": "SELECT g_name FROM genre ORDER BY rating Asc",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "I'd like to see all genre names in alphabetical order, including their ratings.",
        "gold_parse": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "query": "SELECT g_name FROM genre ORDER BY rating Asc",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Please display all genre names in alphabetical sequence with their ratings.",
        "gold_parse": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "query": "SELECT g_name FROM genre ORDER BY rating Asc",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Can I get a list of all genres, arranged alphabetically, with their ratings?",
        "gold_parse": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "query": "SELECT g_name FROM genre ORDER BY rating Asc",
        "correctness": 0
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1",
        "question": "What is the name and age of the customer with the most membership credit?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1",
        "question": "Who is the customer with the highest membership credit and what is their age?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1",
        "question": "Can you tell me the name and age of the customer who has the most membership credit?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1",
        "question": "What's the name and age of the customer with the maximum membership credit?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1",
        "question": "I'd like to know the name and age of the customer with the most membership credit.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1",
        "question": "Could you provide the name and age of the customer with the highest membership credit?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "query": "SELECT venueid FROM venue WHERE venueid IN (SELECT venueid FROM paper);",
        "question": "What are the IDs of venues where papers have been published?",
        "correctness": 1,
        "gold_parse": "SELECT venueid FROM venue WHERE venueid IN (SELECT venueid FROM paper);"
    },
    {
        "db_id": "scholar",
        "query": "SELECT venueid FROM venue WHERE venueid IN (SELECT venueid FROM paper);",
        "question": "Can you list the IDs of venues where papers were published?",
        "correctness": 1,
        "gold_parse": "SELECT venueid FROM venue WHERE venueid IN (SELECT venueid FROM paper);"
    },
    {
        "db_id": "scholar",
        "query": "SELECT venueid FROM venue WHERE venueid IN (SELECT venueid FROM paper);",
        "question": "What are the venue IDs where papers have been published?",
        "correctness": 1,
        "gold_parse": "SELECT venueid FROM venue WHERE venueid IN (SELECT venueid FROM paper);"
    },
    {
        "db_id": "scholar",
        "query": "SELECT venueid FROM venue WHERE venueid IN (SELECT venueid FROM paper);",
        "question": "Could you provide the IDs of venues where papers have been published?",
        "correctness": 1,
        "gold_parse": "SELECT venueid FROM venue WHERE venueid IN (SELECT venueid FROM paper);"
    },
    {
        "db_id": "scholar",
        "query": "SELECT venueid FROM venue WHERE venueid IN (SELECT venueid FROM paper);",
        "question": "I need the IDs of venues where papers have been published, can you provide them?",
        "correctness": 1,
        "gold_parse": "SELECT venueid FROM venue WHERE venueid IN (SELECT venueid FROM paper);"
    },
    {
        "db_id": "scholar",
        "query": "SELECT venueid FROM venue WHERE venueid IN (SELECT venueid FROM paper);",
        "question": "What are the IDs for venues where papers have been published?",
        "correctness": 1,
        "gold_parse": "SELECT venueid FROM venue WHERE venueid IN (SELECT venueid FROM paper);"
    },
    {
        "db_id": "scholar",
        "question": "Show the year and the venue name for all papers.",
        "gold_parse": "",
        "query": "SELECT T1.year, T2.venuename FROM paper AS T1 JOIN venue AS T2 ON T1.venueid = T2.venueid;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Display the year and the name of the venue for all papers.",
        "gold_parse": "",
        "query": "SELECT T1.year, T2.venuename FROM paper AS T1 JOIN venue AS T2 ON T1.venueid = T2.venueid;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Can you list the year and venue name for every paper?",
        "gold_parse": "",
        "query": "SELECT T1.year, T2.venuename FROM paper AS T1 JOIN venue AS T2 ON T1.venueid = T2.venueid;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "I want to see the year and venue name for all papers.",
        "gold_parse": "",
        "query": "SELECT T1.year, T2.venuename FROM paper AS T1 JOIN venue AS T2 ON T1.venueid = T2.venueid;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Provide the year and venue name for all papers.",
        "gold_parse": "",
        "query": "SELECT T1.year, T2.venuename FROM paper AS T1 JOIN venue AS T2 ON T1.venueid = T2.venueid;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What is the year and venue name for all papers?",
        "gold_parse": "",
        "query": "SELECT T1.year, T2.venuename FROM paper AS T1 JOIN venue AS T2 ON T1.venueid = T2.venueid;",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
        "question": "How many orders does Lucas Mancini has?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
        "question": "What is the total number of orders placed by Lucas Mancini?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
        "question": "Can you tell me the count of orders Lucas Mancini has?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
        "question": "What's the quantity of orders Lucas Mancini has?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
        "question": "How many orders has Lucas Mancini placed?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
        "question": "What is the order count for Lucas Mancini?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average section ID for each student's email address?",
        "gold_parse": "",
        "query": "SELECT email_address, AVG(section_id) FROM Students JOIN Sections ON Students.student_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What's the mean section ID associated with each student's email?",
        "gold_parse": "",
        "query": "SELECT email_address, AVG(section_id) FROM Students JOIN Sections ON Students.student_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Can you find the average section ID per student email?",
        "gold_parse": "",
        "query": "SELECT email_address, AVG(section_id) FROM Students JOIN Sections ON Students.student_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the mean section ID for every student's email?",
        "gold_parse": "",
        "query": "SELECT email_address, AVG(section_id) FROM Students JOIN Sections ON Students.student_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Could you tell me the average section ID for each student's email?",
        "gold_parse": "",
        "query": "SELECT email_address, AVG(section_id) FROM Students JOIN Sections ON Students.student_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average of section IDs for each student's email address?",
        "gold_parse": "",
        "query": "SELECT email_address, AVG(section_id) FROM Students JOIN Sections ON Students.student_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Show the three highest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Give me the top three support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the three greatest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Can you display the top 3 support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "I want to see the three highest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;",
        "question": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.",
        "correctness": 1,
        "gold_parse": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;",
        "question": "Who is the shipping agent with the highest number of shipped documents? Include the agent's name and the document count.",
        "correctness": 1,
        "gold_parse": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;",
        "question": "Can you tell me the shipping agent who has shipped the most documents? Please provide the agent's name and the total number of documents.",
        "correctness": 1,
        "gold_parse": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;",
        "question": "Identify the shipping agent responsible for shipping the most documents. Show the agent's name and the number of documents.",
        "correctness": 1,
        "gold_parse": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;",
        "question": "Which shipping agent has the highest document shipment record? Display the agent's name and the number of documents.",
        "correctness": 1,
        "gold_parse": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;",
        "question": "I want to know the shipping agent who has shipped the most number of documents. Please list the agent's name and the document count.",
        "correctness": 1,
        "gold_parse": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;"
    },
    {
        "db_id": "hospital_1",
        "question": "Find the number of patients who are not using the medication of Procrastin-X.",
        "gold_parse": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
        "query": "SELECT Count ( * ) FROM Patient AS T1 WHERE T1.SSN NOT IN ( SELECT T2.Medication FROM Prescribes AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "How many patients are not taking Procrastin-X medication?",
        "gold_parse": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
        "query": "SELECT Count ( * ) FROM Patient AS T1 WHERE T1.SSN NOT IN ( SELECT T2.Medication FROM Prescribes AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the count of patients not on Procrastin-X?",
        "gold_parse": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
        "query": "SELECT Count ( * ) FROM Patient AS T1 WHERE T1.SSN NOT IN ( SELECT T2.Medication FROM Prescribes AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Can you tell me the number of patients not using Procrastin-X?",
        "gold_parse": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
        "query": "SELECT Count ( * ) FROM Patient AS T1 WHERE T1.SSN NOT IN ( SELECT T2.Medication FROM Prescribes AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What's the total number of patients not using Procrastin-X as their medication?",
        "gold_parse": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
        "query": "SELECT Count ( * ) FROM Patient AS T1 WHERE T1.SSN NOT IN ( SELECT T2.Medication FROM Prescribes AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Determine the number of patients who aren't on the medication Procrastin-X.",
        "gold_parse": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
        "query": "SELECT Count ( * ) FROM Patient AS T1 WHERE T1.SSN NOT IN ( SELECT T2.Medication FROM Prescribes AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "How many products have prices of at least 180?",
        "gold_parse": "SELECT count(*) FROM products WHERE price >= 180",
        "query": "SELECT Count ( * ) FROM Products WHERE Price < value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What is the count of products priced at 180 or more?",
        "gold_parse": "SELECT count(*) FROM products WHERE price >= 180",
        "query": "SELECT Count ( * ) FROM Products WHERE Price < value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Can you tell me the number of products that are priced at least 180?",
        "gold_parse": "SELECT count(*) FROM products WHERE price >= 180",
        "query": "SELECT Count ( * ) FROM Products WHERE Price < value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "How many products are there with a price tag of 180 or above?",
        "gold_parse": "SELECT count(*) FROM products WHERE price >= 180",
        "query": "SELECT Count ( * ) FROM Products WHERE Price < value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What's the total number of products that cost 180 or more?",
        "gold_parse": "SELECT count(*) FROM products WHERE price >= 180",
        "query": "SELECT Count ( * ) FROM Products WHERE Price < value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Can you count the products that have a price of 180 or higher?",
        "gold_parse": "SELECT count(*) FROM products WHERE price >= 180",
        "query": "SELECT Count ( * ) FROM Products WHERE Price < value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
        "question": "For every student who is registered for some course, how many courses are they registered for?",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
        "question": "How many courses does each registered student have?",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
        "question": "What is the count of courses for each student who has registered?",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
        "question": "For each student enrolled in a course, what is the total number of courses they are enrolled in?",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
        "question": "Can you tell me the number of courses each student is registered for?",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
        "question": "What's the total number of courses each student who has enrolled in a course has?",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"",
        "question": "What is the phone and email for customer with first name Aniyah and last name Feest?",
        "correctness": 1,
        "gold_parse": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"",
        "question": "Can you provide the phone number and email address for a customer named Aniyah Feest?",
        "correctness": 1,
        "gold_parse": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"",
        "question": "What are the contact details (phone and email) for Aniyah Feest?",
        "correctness": 1,
        "gold_parse": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"",
        "question": "I need the phone and email for a customer with the name Aniyah Feest, can you provide that?",
        "correctness": 1,
        "gold_parse": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"",
        "question": "Could you tell me the phone and email for the customer Aniyah Feest?",
        "correctness": 1,
        "gold_parse": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"",
        "question": "What's the phone and email for our customer Aniyah Feest?",
        "correctness": 1,
        "gold_parse": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\""
    },
    {
        "db_id": "election_representative",
        "query": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2",
        "question": "What states have at least two representatives?",
        "correctness": 1,
        "gold_parse": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2",
        "question": "Which states are represented by at least two representatives?",
        "correctness": 1,
        "gold_parse": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2",
        "question": "Can you list the states with two or more representatives?",
        "correctness": 1,
        "gold_parse": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2",
        "question": "What are the states that have a minimum of two representatives?",
        "correctness": 1,
        "gold_parse": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2",
        "question": "Identify the states that have two or more representatives.",
        "correctness": 1,
        "gold_parse": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2",
        "question": "In which states do at least two representatives serve?",
        "correctness": 1,
        "gold_parse": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT name FROM people WHERE height  >  200 OR height  <  190",
        "question": "find the names of people who are taller than 200 or lower than 190.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM people WHERE height  >  200 OR height  <  190"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT name FROM people WHERE height  >  200 OR height  <  190",
        "question": "Can you list the names of individuals who are either over 200 or under 190 in height?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM people WHERE height  >  200 OR height  <  190"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT name FROM people WHERE height  >  200 OR height  <  190",
        "question": "Who are the people with a height greater than 200 or less than 190?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM people WHERE height  >  200 OR height  <  190"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT name FROM people WHERE height  >  200 OR height  <  190",
        "question": "Could you provide the names of those who are taller than 200 or shorter than 190?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM people WHERE height  >  200 OR height  <  190"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT name FROM people WHERE height  >  200 OR height  <  190",
        "question": "I need the names of people who stand taller than 200 or shorter than 190.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM people WHERE height  >  200 OR height  <  190"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT name FROM people WHERE height  >  200 OR height  <  190",
        "question": "Who are the individuals with a height exceeding 200 or falling below 190?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM people WHERE height  >  200 OR height  <  190"
    },
    {
        "db_id": "city_record",
        "question": "Find the GDP of the city with the largest regional population.",
        "gold_parse": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
        "query": "SELECT City FROM city ORDER BY Regional_Population Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is the GDP of the city that has the highest regional population?",
        "gold_parse": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
        "query": "SELECT City FROM city ORDER BY Regional_Population Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Can you tell me the GDP of the city with the most people in its region?",
        "gold_parse": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
        "query": "SELECT City FROM city ORDER BY Regional_Population Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What's the GDP of the city with the biggest population in its region?",
        "gold_parse": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
        "query": "SELECT City FROM city ORDER BY Regional_Population Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Identify the GDP of the city with the maximum regional population.",
        "gold_parse": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
        "query": "SELECT City FROM city ORDER BY Regional_Population Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Determine the GDP of the city that has the largest population in its region.",
        "gold_parse": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
        "query": "SELECT City FROM city ORDER BY Regional_Population Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
        "question": "Show ids for all employees who don't have a certificate.",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
        "question": "Display the ids of all employees without a certificate.",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
        "question": "Can you list the ids of employees who are not certified?",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
        "question": "Provide the ids of all non-certified employees.",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
        "question": "I want to see the ids of all employees who lack a certificate.",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
        "question": "Show me the ids of employees who don't possess a certificate.",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";",
        "question": "What is maximum and minimum RAM size of phone produced by company named \"Nokia Corporation\"?",
        "correctness": 1,
        "gold_parse": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";",
        "question": "What is the highest and lowest RAM size of phones manufactured by 'Nokia Corporation'?",
        "correctness": 1,
        "gold_parse": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";",
        "question": "Can you tell me the maximum and minimum RAM size of phones made by 'Nokia Corporation'?",
        "correctness": 1,
        "gold_parse": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";",
        "question": "What's the range of RAM sizes for phones from 'Nokia Corporation'?",
        "correctness": 1,
        "gold_parse": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";",
        "question": "What are the smallest and largest RAM sizes for phones by 'Nokia Corporation'?",
        "correctness": 1,
        "gold_parse": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";",
        "question": "Could you provide the maximum and minimum RAM size of phones produced by 'Nokia Corporation'?",
        "correctness": 1,
        "gold_parse": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";"
    },
    {
        "db_id": "book_press",
        "query": "SELECT avg(age) ,  gender FROM author GROUP BY gender",
        "question": "For each gender, return gender and the average age of authors.",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  gender FROM author GROUP BY gender"
    },
    {
        "db_id": "book_press",
        "query": "SELECT avg(age) ,  gender FROM author GROUP BY gender",
        "question": "For each sex, provide the sex and the mean age of writers.",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  gender FROM author GROUP BY gender"
    },
    {
        "db_id": "book_press",
        "query": "SELECT avg(age) ,  gender FROM author GROUP BY gender",
        "question": "Can you show the gender and the average age of authors for each gender?",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  gender FROM author GROUP BY gender"
    },
    {
        "db_id": "book_press",
        "query": "SELECT avg(age) ,  gender FROM author GROUP BY gender",
        "question": "Display each gender along with the average age of authors of that gender.",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  gender FROM author GROUP BY gender"
    },
    {
        "db_id": "book_press",
        "query": "SELECT avg(age) ,  gender FROM author GROUP BY gender",
        "question": "For every gender, can you give the gender and the average age of authors?",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  gender FROM author GROUP BY gender"
    },
    {
        "db_id": "book_press",
        "query": "SELECT avg(age) ,  gender FROM author GROUP BY gender",
        "question": "Could you list each gender and the corresponding average age of authors?",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  gender FROM author GROUP BY gender"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid;",
        "question": "What are the titles of papers and their authors?",
        "correctness": 1,
        "gold_parse": "SELECT title, authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid;",
        "question": "Can you list the titles of papers along with their authors?",
        "correctness": 1,
        "gold_parse": "SELECT title, authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid;",
        "question": "What are the names of authors and the titles of their papers?",
        "correctness": 1,
        "gold_parse": "SELECT title, authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid;",
        "question": "Could you provide the titles of papers and the names of their authors?",
        "correctness": 1,
        "gold_parse": "SELECT title, authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid;",
        "question": "I need to know the titles of papers and who wrote them.",
        "correctness": 1,
        "gold_parse": "SELECT title, authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid;",
        "question": "Show me the titles of papers and their corresponding authors.",
        "correctness": 1,
        "gold_parse": "SELECT title, authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid;"
    },
    {
        "db_id": "world_1",
        "question": "What language is predominantly spoken in Aruba?",
        "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "query": "SELECT Name FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the main language spoken in Aruba?",
        "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "query": "SELECT Name FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which language is most commonly used in Aruba?",
        "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "query": "SELECT Name FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the primary language in Aruba?",
        "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "query": "SELECT Name FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which language is widely spoken in Aruba?",
        "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "query": "SELECT Name FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the most used language in Aruba?",
        "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "query": "SELECT Name FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Driver FROM driver ORDER BY Age ASC",
        "question": "Sort the driver names by age in ascending order.",
        "correctness": 1,
        "gold_parse": "SELECT Driver FROM driver ORDER BY Age ASC"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Driver FROM driver ORDER BY Age ASC",
        "question": "Arrange the driver names in order of increasing age.",
        "correctness": 1,
        "gold_parse": "SELECT Driver FROM driver ORDER BY Age ASC"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Driver FROM driver ORDER BY Age ASC",
        "question": "Can you list the driver names in ascending order by age?",
        "correctness": 1,
        "gold_parse": "SELECT Driver FROM driver ORDER BY Age ASC"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Driver FROM driver ORDER BY Age ASC",
        "question": "Please order the driver names from youngest to oldest.",
        "correctness": 1,
        "gold_parse": "SELECT Driver FROM driver ORDER BY Age ASC"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Driver FROM driver ORDER BY Age ASC",
        "question": "Could you sort the names of the drivers by age in ascending order?",
        "correctness": 1,
        "gold_parse": "SELECT Driver FROM driver ORDER BY Age ASC"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Driver FROM driver ORDER BY Age ASC",
        "question": "I'd like to see the driver names sorted by age, from youngest to oldest.",
        "correctness": 1,
        "gold_parse": "SELECT Driver FROM driver ORDER BY Age ASC"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
        "question": "For each origin, how many flights came from there?",
        "correctness": 1,
        "gold_parse": "SELECT origin ,  count(*) FROM Flight GROUP BY origin"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
        "question": "Can you count the number of flights from each origin?",
        "correctness": 1,
        "gold_parse": "SELECT origin ,  count(*) FROM Flight GROUP BY origin"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
        "question": "What is the total number of flights from each origin?",
        "correctness": 1,
        "gold_parse": "SELECT origin ,  count(*) FROM Flight GROUP BY origin"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
        "question": "From each origin, how many flights were there?",
        "correctness": 1,
        "gold_parse": "SELECT origin ,  count(*) FROM Flight GROUP BY origin"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
        "question": "Could you tell me the number of flights from each origin?",
        "correctness": 1,
        "gold_parse": "SELECT origin ,  count(*) FROM Flight GROUP BY origin"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
        "question": "What's the count of flights that came from each origin?",
        "correctness": 1,
        "gold_parse": "SELECT origin ,  count(*) FROM Flight GROUP BY origin"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_name FROM Courses WHERE course_name LIKE '%Programming%';",
        "question": "What are the names of courses that have 'Programming' in their name?",
        "correctness": 1,
        "gold_parse": "SELECT course_name FROM Courses WHERE course_name LIKE '%Programming%';"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_name FROM Courses WHERE course_name LIKE '%Programming%';",
        "question": "Can you list the courses with 'Programming' in their title?",
        "correctness": 1,
        "gold_parse": "SELECT course_name FROM Courses WHERE course_name LIKE '%Programming%';"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_name FROM Courses WHERE course_name LIKE '%Programming%';",
        "question": "Which courses include 'Programming' in their name?",
        "correctness": 1,
        "gold_parse": "SELECT course_name FROM Courses WHERE course_name LIKE '%Programming%';"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_name FROM Courses WHERE course_name LIKE '%Programming%';",
        "question": "What are the course names that contain 'Programming'?",
        "correctness": 1,
        "gold_parse": "SELECT course_name FROM Courses WHERE course_name LIKE '%Programming%';"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_name FROM Courses WHERE course_name LIKE '%Programming%';",
        "question": "Could you tell me the names of courses that have 'Programming' in them?",
        "correctness": 1,
        "gold_parse": "SELECT course_name FROM Courses WHERE course_name LIKE '%Programming%';"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_name FROM Courses WHERE course_name LIKE '%Programming%';",
        "question": "I'm looking for courses that have 'Programming' in their name. Can you list them?",
        "correctness": 1,
        "gold_parse": "SELECT course_name FROM Courses WHERE course_name LIKE '%Programming%';"
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the names of manufacturers with revenue greater than the average of all revenues?",
        "gold_parse": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)",
        "query": "SELECT T2.Name FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T1.Revenue > ( SELECT Avg ( T1.Revenue ) FROM Manufacturers AS T1 )",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Can you list the manufacturers whose revenue exceeds the average revenue?",
        "gold_parse": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)",
        "query": "SELECT T2.Name FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T1.Revenue > ( SELECT Avg ( T1.Revenue ) FROM Manufacturers AS T1 )",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Which manufacturers have a revenue that is higher than the average revenue?",
        "gold_parse": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)",
        "query": "SELECT T2.Name FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T1.Revenue > ( SELECT Avg ( T1.Revenue ) FROM Manufacturers AS T1 )",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Identify the manufacturers that have a revenue greater than the average of all revenues.",
        "gold_parse": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)",
        "query": "SELECT T2.Name FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T1.Revenue > ( SELECT Avg ( T1.Revenue ) FROM Manufacturers AS T1 )",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Who are the manufacturers with revenue surpassing the average revenue?",
        "gold_parse": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)",
        "query": "SELECT T2.Name FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T1.Revenue > ( SELECT Avg ( T1.Revenue ) FROM Manufacturers AS T1 )",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Show me the manufacturers that have a revenue above the average revenue.",
        "gold_parse": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)",
        "query": "SELECT T2.Name FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T1.Revenue > ( SELECT Avg ( T1.Revenue ) FROM Manufacturers AS T1 )",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "query": "SELECT mean_temperature_f FROM weather WHERE zip_code = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the top 3 frequent cloud covers in the 94107 zip code?",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "query": "SELECT mean_temperature_f FROM weather WHERE zip_code = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Can you list the 3 most prevalent cloud covers in the 94107 zip code?",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "query": "SELECT mean_temperature_f FROM weather WHERE zip_code = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the three most usual cloud covers in the zip code 94107?",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "query": "SELECT mean_temperature_f FROM weather WHERE zip_code = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "In the zip code 94107, what are the three most common types of cloud cover?",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "query": "SELECT mean_temperature_f FROM weather WHERE zip_code = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Identify the 3 most common cloud covers in the zip code 94107.",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "query": "SELECT mean_temperature_f FROM weather WHERE zip_code = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "question": "What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?",
        "correctness": 1,
        "gold_parse": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "question": "Can you provide the last names and ids of drivers who made 11 pit stops and took part in over 5 races?",
        "correctness": 1,
        "gold_parse": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "question": "Who are the drivers with their last names and ids who had 11 pit stops and were in more than 5 races?",
        "correctness": 1,
        "gold_parse": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "question": "I need the last names and ids of all drivers who stopped at the pit 11 times and raced more than 5 times.",
        "correctness": 1,
        "gold_parse": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "question": "Could you list the last names and ids of drivers who had 11 pit stops and participated in more than 5 races?",
        "correctness": 1,
        "gold_parse": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "question": "Show me the last names and ids of all drivers who had 11 pit stops and were involved in over 5 races.",
        "correctness": 1,
        "gold_parse": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000",
        "question": "In the year 2000, what is the campus fee for San Francisco State University?",
        "correctness": 1,
        "gold_parse": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000",
        "question": "What was the campus fee for San Francisco State University in the year 2000?",
        "correctness": 1,
        "gold_parse": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000",
        "question": "Can you tell me the campus fee of San Francisco State University for the year 2000?",
        "correctness": 1,
        "gold_parse": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000",
        "question": "In 2000, how much was the campus fee at San Francisco State University?",
        "correctness": 1,
        "gold_parse": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000",
        "question": "What was the cost of the campus fee at San Francisco State University in 2000?",
        "correctness": 1,
        "gold_parse": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000",
        "question": "Could you find out the campus fee for San Francisco State University in the year 2000?",
        "correctness": 1,
        "gold_parse": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000"
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which kind of part has the least number of faults? List the part name.",
        "gold_parse": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1",
        "query": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T2.part_fault_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "What type of part has the minimum number of defects? Provide the part name.",
        "gold_parse": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1",
        "query": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T2.part_fault_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Identify the part type that has the smallest number of faults. Mention the part name.",
        "gold_parse": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1",
        "query": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T2.part_fault_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which part type registers the lowest number of faults? State the part name.",
        "gold_parse": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1",
        "query": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T2.part_fault_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Can you tell me the part type with the fewest faults? Include the part name.",
        "gold_parse": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1",
        "query": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T2.part_fault_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "What is the part type with the least faults? Give the part name.",
        "gold_parse": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1",
        "query": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T2.part_fault_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the color description of the product with name \"catnip\"?",
        "gold_parse": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
        "query": "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What color is the product named 'catnip'?",
        "gold_parse": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
        "query": "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Can you tell me the color of the product 'catnip'?",
        "gold_parse": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
        "query": "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the color of the 'catnip' product?",
        "gold_parse": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
        "query": "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Could you provide the color description for the product 'catnip'?",
        "gold_parse": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
        "query": "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What's the color description for the 'catnip' product?",
        "gold_parse": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
        "query": "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name = value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List all the names of schools with an endowment amount smaller than or equal to 10.",
        "gold_parse": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
        "query": "SELECT School_name FROM School WHERE Enrollment > value OR Enrollment < value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Can you provide the names of all schools with an endowment amount of 10 or less?",
        "gold_parse": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
        "query": "SELECT School_name FROM School WHERE Enrollment > value OR Enrollment < value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Which schools have an endowment amount that is less than or equal to 10?",
        "gold_parse": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
        "query": "SELECT School_name FROM School WHERE Enrollment > value OR Enrollment < value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show me the schools that have an endowment amount not exceeding 10.",
        "gold_parse": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
        "query": "SELECT School_name FROM School WHERE Enrollment > value OR Enrollment < value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "I need to know the schools with an endowment amount of no more than 10.",
        "gold_parse": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
        "query": "SELECT School_name FROM School WHERE Enrollment > value OR Enrollment < value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "What are the names of schools with an endowment amount equal to or less than 10?",
        "gold_parse": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
        "query": "SELECT School_name FROM School WHERE Enrollment > value OR Enrollment < value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Show the country names and the count of their occurrences.",
        "gold_parse": "",
        "query": "SELECT CountryName, COUNT(*) FROM countries;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Display the names of the countries and their frequency of occurrence.",
        "gold_parse": "",
        "query": "SELECT CountryName, COUNT(*) FROM countries;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Can you list the countries and how many times they appear?",
        "gold_parse": "",
        "query": "SELECT CountryName, COUNT(*) FROM countries;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Show me the names of the countries and their count.",
        "gold_parse": "",
        "query": "SELECT CountryName, COUNT(*) FROM countries;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "I want to see the country names and their number of occurrences.",
        "gold_parse": "",
        "query": "SELECT CountryName, COUNT(*) FROM countries;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Provide the names of the countries and their occurrence count.",
        "gold_parse": "",
        "query": "SELECT CountryName, COUNT(*) FROM countries;",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.",
        "gold_parse": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
        "query": "SELECT Count ( * ) , Affiliation FROM university WHERE Founded < value GROUP BY Affiliation",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What is the total count of students in colleges established post 1850 for each type of affiliation?",
        "gold_parse": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
        "query": "SELECT Count ( * ) , Affiliation FROM university WHERE Founded < value GROUP BY Affiliation",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Can you provide the total student count for each affiliation type in colleges that were set up after 1850?",
        "gold_parse": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
        "query": "SELECT Count ( * ) , Affiliation FROM university WHERE Founded < value GROUP BY Affiliation",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "How many students are there in total for each affiliation type in colleges founded after 1850?",
        "gold_parse": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
        "query": "SELECT Count ( * ) , Affiliation FROM university WHERE Founded < value GROUP BY Affiliation",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What's the total student population for each affiliation type in colleges that were started after the year 1850?",
        "gold_parse": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
        "query": "SELECT Count ( * ) , Affiliation FROM university WHERE Founded < value GROUP BY Affiliation",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Give the total number of students for each affiliation type in colleges that were founded post the year 1850.",
        "gold_parse": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
        "query": "SELECT Count ( * ) , Affiliation FROM university WHERE Founded < value GROUP BY Affiliation",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "query": "SELECT SourceAirport, COUNT(*) FROM flights GROUP BY SourceAirport;",
        "question": "How many flights are there from each source airport?",
        "correctness": 1,
        "gold_parse": "SELECT SourceAirport, COUNT(*) FROM flights GROUP BY SourceAirport;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT SourceAirport, COUNT(*) FROM flights GROUP BY SourceAirport;",
        "question": "What is the count of flights departing from each source airport?",
        "correctness": 1,
        "gold_parse": "SELECT SourceAirport, COUNT(*) FROM flights GROUP BY SourceAirport;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT SourceAirport, COUNT(*) FROM flights GROUP BY SourceAirport;",
        "question": "Can you tell me the number of flights from each originating airport?",
        "correctness": 1,
        "gold_parse": "SELECT SourceAirport, COUNT(*) FROM flights GROUP BY SourceAirport;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT SourceAirport, COUNT(*) FROM flights GROUP BY SourceAirport;",
        "question": "What's the total number of flights from each source airport?",
        "correctness": 1,
        "gold_parse": "SELECT SourceAirport, COUNT(*) FROM flights GROUP BY SourceAirport;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT SourceAirport, COUNT(*) FROM flights GROUP BY SourceAirport;",
        "question": "How many flights originate from each airport?",
        "correctness": 1,
        "gold_parse": "SELECT SourceAirport, COUNT(*) FROM flights GROUP BY SourceAirport;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT SourceAirport, COUNT(*) FROM flights GROUP BY SourceAirport;",
        "question": "From each source airport, how many flights are there?",
        "correctness": 1,
        "gold_parse": "SELECT SourceAirport, COUNT(*) FROM flights GROUP BY SourceAirport;"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with a higher checking balance than savings balance?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Can you list the customers who have a higher checking balance than their savings balance?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Who are the customers with a checking balance that exceeds their savings balance?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Identify the customers whose checking balance is greater than their savings balance.",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Which customers have a checking balance that is more than their savings balance?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Show me the names of customers whose checking balance surpasses their savings balance.",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What degrees were conferred in San Francisco State University in the year 2001?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "query": "SELECT T2.Graduate FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T1.Id = T2.Campus JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T1.Campus = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What were the degrees awarded at San Francisco State University in 2001?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "query": "SELECT T2.Graduate FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T1.Id = T2.Campus JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T1.Campus = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "In 2001, what degrees did San Francisco State University confer?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "query": "SELECT T2.Graduate FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T1.Id = T2.Campus JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T1.Campus = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Can you list the degrees that were given out at San Francisco State University in 2001?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "query": "SELECT T2.Graduate FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T1.Id = T2.Campus JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T1.Campus = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What types of degrees were granted by San Francisco State University in the year 2001?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "query": "SELECT T2.Graduate FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T1.Id = T2.Campus JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T1.Campus = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "In the year 2001, what were the degrees conferred by San Francisco State University?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "query": "SELECT T2.Graduate FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T1.Id = T2.Campus JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T1.Campus = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the average latitude and longitude in San Jose?",
        "gold_parse": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
        "query": "SELECT Avg ( long ) , Avg ( long ) FROM station WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Can you tell me the average latitude and longitude in San Jose?",
        "gold_parse": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
        "query": "SELECT Avg ( long ) , Avg ( long ) FROM station WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What's the mean latitude and longitude in San Jose?",
        "gold_parse": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
        "query": "SELECT Avg ( long ) , Avg ( long ) FROM station WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Could you provide the average coordinates for San Jose?",
        "gold_parse": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
        "query": "SELECT Avg ( long ) , Avg ( long ) FROM station WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the average geographical coordinates for San Jose?",
        "gold_parse": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
        "query": "SELECT Avg ( long ) , Avg ( long ) FROM station WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Can you find the average latitude and longitude for San Jose?",
        "gold_parse": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
        "query": "SELECT Avg ( long ) , Avg ( long ) FROM station WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show all the planned delivery dates and actual delivery dates of bookings.",
        "gold_parse": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",
        "query": "SELECT Planned_Delivery_Date , Order_Date FROM Bookings",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Display all the scheduled and actual delivery dates for bookings.",
        "gold_parse": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",
        "query": "SELECT Planned_Delivery_Date , Order_Date FROM Bookings",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Can you provide all the expected and real delivery dates of bookings?",
        "gold_parse": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",
        "query": "SELECT Planned_Delivery_Date , Order_Date FROM Bookings",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "List all the projected and actual delivery dates for bookings.",
        "gold_parse": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",
        "query": "SELECT Planned_Delivery_Date , Order_Date FROM Bookings",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show me all the intended and actual delivery dates of bookings.",
        "gold_parse": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",
        "query": "SELECT Planned_Delivery_Date , Order_Date FROM Bookings",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "I want to see all the planned and actual delivery dates for bookings.",
        "gold_parse": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",
        "query": "SELECT Planned_Delivery_Date , Order_Date FROM Bookings",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "How many proteins are associated with an institution in a building with at least 20 floors?",
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20",
        "query": "SELECT Count ( * ) FROM building WHERE Floors < value",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "What is the count of proteins linked to an institution located in a building having no less than 20 floors?",
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20",
        "query": "SELECT Count ( * ) FROM building WHERE Floors < value",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Can you tell me the number of proteins that are connected with an institution in a building that has 20 or more floors?",
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20",
        "query": "SELECT Count ( * ) FROM building WHERE Floors < value",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "What's the total number of proteins associated with an institution housed in a building with a minimum of 20 floors?",
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20",
        "query": "SELECT Count ( * ) FROM building WHERE Floors < value",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "How many proteins are linked to an institution that is situated in a building with at least 20 stories?",
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20",
        "query": "SELECT Count ( * ) FROM building WHERE Floors < value",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Can you determine the quantity of proteins related to an institution in a building that consists of 20 or more floors?",
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20",
        "query": "SELECT Count ( * ) FROM building WHERE Floors < value",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990",
        "question": "Count the number of artists who are older than 46 and joined after 1990.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990",
        "question": "How many artists are there who are above 46 years old and joined after the year 1990?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990",
        "question": "Can you tell me the count of artists who are more than 46 years old and have joined post 1990?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990",
        "question": "What is the number of artists who are older than 46 and became members after 1990?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990",
        "question": "Find the count of artists who are over 46 years of age and joined after 1990.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990",
        "question": "Determine the number of artists who are aged more than 46 and joined after the year 1990.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )",
        "question": "What are the prices and sizes of all products whose price is above the mean?",
        "correctness": 1,
        "gold_parse": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )",
        "question": "Can you list the prices and sizes of all products that are priced higher than the average?",
        "correctness": 1,
        "gold_parse": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )",
        "question": "What are the sizes and prices of all products that have a price greater than the average?",
        "correctness": 1,
        "gold_parse": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )",
        "question": "Could you show me the sizes and prices of all products with a price exceeding the mean?",
        "correctness": 1,
        "gold_parse": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )",
        "question": "I'd like to see the prices and sizes of all products that are more expensive than the average.",
        "correctness": 1,
        "gold_parse": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )",
        "question": "Can I get the sizes and prices of all products whose price surpasses the mean?",
        "correctness": 1,
        "gold_parse": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )"
    },
    {
        "db_id": "flight_4",
        "question": "For each  airport name, how many routes start at that airport, ordered from most to least?",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC",
        "query": "SELECT T2.name , Count ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.dst_apid ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Can you list the airports by the number of routes originating from them, in descending order?",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC",
        "query": "SELECT T2.name , Count ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.dst_apid ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the count of routes starting from each airport, sorted from the highest to the lowest?",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC",
        "query": "SELECT T2.name , Count ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.dst_apid ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "How many routes begin at each airport, arranged from the most to the least?",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC",
        "query": "SELECT T2.name , Count ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.dst_apid ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Could you provide the number of routes that start at every airport, ordered from the most to the fewest?",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC",
        "query": "SELECT T2.name , Count ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.dst_apid ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Order the airports by the quantity of routes that start there, from most to least.",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC",
        "query": "SELECT T2.name , Count ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.dst_apid ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "What is the name of the event that happened in the most recent year?",
        "gold_parse": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1",
        "query": "SELECT T2.Name FROM stadium AS T1 JOIN event AS T2 ON T1.ID = T2.Stadium_ID ORDER BY T1.Opening_year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Can you tell me the name of the event that occurred in the latest year?",
        "gold_parse": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1",
        "query": "SELECT T2.Name FROM stadium AS T1 JOIN event AS T2 ON T1.ID = T2.Stadium_ID ORDER BY T1.Opening_year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "What's the title of the event that took place in the most recent year?",
        "gold_parse": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1",
        "query": "SELECT T2.Name FROM stadium AS T1 JOIN event AS T2 ON T1.ID = T2.Stadium_ID ORDER BY T1.Opening_year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Could you provide the name of the event from the most recent year?",
        "gold_parse": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1",
        "query": "SELECT T2.Name FROM stadium AS T1 JOIN event AS T2 ON T1.ID = T2.Stadium_ID ORDER BY T1.Opening_year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "What event happened in the latest year?",
        "gold_parse": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1",
        "query": "SELECT T2.Name FROM stadium AS T1 JOIN event AS T2 ON T1.ID = T2.Stadium_ID ORDER BY T1.Opening_year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "What is the event that took place in the most recent year called?",
        "gold_parse": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1",
        "query": "SELECT T2.Name FROM stadium AS T1 JOIN event AS T2 ON T1.ID = T2.Stadium_ID ORDER BY T1.Opening_year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "query": "SELECT T1.date_of_latest_logon , T2.date_of_completion FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the enrollment and completion dates for the student named Bernie Zieme?",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "query": "SELECT T1.date_of_latest_logon , T2.date_of_completion FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Can you provide the dates of enrollment and completion for Bernie Zieme?",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "query": "SELECT T1.date_of_latest_logon , T2.date_of_completion FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Show me the dates when Bernie Zieme enrolled and completed his studies.",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "query": "SELECT T1.date_of_latest_logon , T2.date_of_completion FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "I need to know the enrollment and completion dates for the student Bernie Zieme.",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "query": "SELECT T1.date_of_latest_logon , T2.date_of_completion FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the dates of beginning and ending of studies for the student Bernie Zieme?",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "query": "SELECT T1.date_of_latest_logon , T2.date_of_completion FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);",
        "question": "What are the names of the oldest singers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);",
        "question": "Who are the eldest singers by name?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);",
        "question": "Can you list the names of the oldest singers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);",
        "question": "Who are the most aged singers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);",
        "question": "Could you tell me the names of the oldest singers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);",
        "question": "I'd like to know the names of the oldest singers.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1",
        "question": "What are the clean and jerk score of the body builder with the highest total score?",
        "correctness": 1,
        "gold_parse": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1",
        "question": "What is the clean and jerk score for the bodybuilder who has the top total score?",
        "correctness": 1,
        "gold_parse": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1",
        "question": "Can you tell me the clean and jerk score of the bodybuilder with the maximum total score?",
        "correctness": 1,
        "gold_parse": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1",
        "question": "What's the clean and jerk score of the bodybuilder who has the highest overall score?",
        "correctness": 1,
        "gold_parse": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1",
        "question": "Could you provide the clean and jerk score of the bodybuilder with the greatest total score?",
        "correctness": 1,
        "gold_parse": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1",
        "question": "I'd like to know the clean and jerk score of the bodybuilder who has the best total score.",
        "correctness": 1,
        "gold_parse": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1"
    },
    {
        "db_id": "student_1",
        "question": "Report the total number of students for each fourth-grade classroom.",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What is the total count of students in each fourth-grade classroom?",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Can you provide the total student count for each fourth-grade classroom?",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What's the total number of students in every fourth-grade classroom?",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Could you report the total student population in each fourth-grade classroom?",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "How many students are there in each fourth-grade classroom in total?",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id",
        "question": "What are the guest first name, start date, and end date of each apartment booking?",
        "correctness": 1,
        "gold_parse": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id",
        "question": "Can you provide the first name of the guest, start date, and end date for each apartment booking?",
        "correctness": 1,
        "gold_parse": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id",
        "question": "What is the first name of the guest, start date, and end date for all apartment bookings?",
        "correctness": 1,
        "gold_parse": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id",
        "question": "Could you list the guest's first name, start date, and end date for each apartment reservation?",
        "correctness": 1,
        "gold_parse": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id",
        "question": "I need to know the guest's first name, start date, and end date for every apartment booking.",
        "correctness": 1,
        "gold_parse": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id",
        "question": "Can I get the first name of the guest, start date, and end date for each apartment booking?",
        "correctness": 1,
        "gold_parse": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"",
        "question": "Find the maximum and minimum millisecond lengths of pop tracks.",
        "correctness": 1,
        "gold_parse": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"",
        "question": "What are the longest and shortest durations of pop tracks in milliseconds?",
        "correctness": 1,
        "gold_parse": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"",
        "question": "Can you determine the shortest and longest pop track lengths in milliseconds?",
        "correctness": 1,
        "gold_parse": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"",
        "question": "What is the range of pop track lengths in milliseconds?",
        "correctness": 1,
        "gold_parse": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"",
        "question": "Identify the pop tracks with the maximum and minimum lengths in milliseconds.",
        "correctness": 1,
        "gold_parse": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"",
        "question": "Show the pop tracks with the shortest and longest durations in milliseconds.",
        "correctness": 1,
        "gold_parse": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\""
    },
    {
        "db_id": "world_1",
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "gold_parse": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "query": "SELECT Name , Population , Capital FROM country WHERE Continent = value ORDER BY SurfaceArea Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the name, population, and life expectancy of the largest Asian country by area?",
        "gold_parse": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "query": "SELECT Name , Population , Capital FROM country WHERE Continent = value ORDER BY SurfaceArea Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Can you tell me the name, population, and expected lifespan of the Asian country with the most land area?",
        "gold_parse": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "query": "SELECT Name , Population , Capital FROM country WHERE Continent = value ORDER BY SurfaceArea Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Identify the Asian country with the greatest area and provide its name, population, and life expectancy.",
        "gold_parse": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "query": "SELECT Name , Population , Capital FROM country WHERE Continent = value ORDER BY SurfaceArea Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What's the name, population, and average life span of the biggest Asian country in terms of area?",
        "gold_parse": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "query": "SELECT Name , Population , Capital FROM country WHERE Continent = value ORDER BY SurfaceArea Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Provide the name, population, and life expectancy of the Asian country with the largest geographical area.",
        "gold_parse": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "query": "SELECT Name , Population , Capital FROM country WHERE Continent = value ORDER BY SurfaceArea Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Return the names of all regions other than Denmark.",
        "gold_parse": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
        "query": "SELECT Region_name FROM region GROUP BY Region_name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Provide the names of all regions excluding Denmark.",
        "gold_parse": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
        "query": "SELECT Region_name FROM region GROUP BY Region_name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Can you list all the regions that are not Denmark?",
        "gold_parse": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
        "query": "SELECT Region_name FROM region GROUP BY Region_name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Show me all regions that aren't Denmark.",
        "gold_parse": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
        "query": "SELECT Region_name FROM region GROUP BY Region_name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "I want to see the names of all regions except for Denmark.",
        "gold_parse": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
        "query": "SELECT Region_name FROM region GROUP BY Region_name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the names of all regions, not including Denmark?",
        "gold_parse": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
        "query": "SELECT Region_name FROM region GROUP BY Region_name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many students are there for each course description?",
        "gold_parse": "",
        "query": "SELECT course_description, COUNT(student_id) FROM Courses JOIN Students ON Courses.course_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the count of students for each course description?",
        "gold_parse": "",
        "query": "SELECT course_description, COUNT(student_id) FROM Courses JOIN Students ON Courses.course_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Can you tell me the number of students for every course description?",
        "gold_parse": "",
        "query": "SELECT course_description, COUNT(student_id) FROM Courses JOIN Students ON Courses.course_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What's the total number of students per course description?",
        "gold_parse": "",
        "query": "SELECT course_description, COUNT(student_id) FROM Courses JOIN Students ON Courses.course_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Could you provide the student count for each course description?",
        "gold_parse": "",
        "query": "SELECT course_description, COUNT(student_id) FROM Courses JOIN Students ON Courses.course_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many pupils are registered for each course description?",
        "gold_parse": "",
        "query": "SELECT course_description, COUNT(student_id) FROM Courses JOIN Students ON Courses.course_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Can you list the names, details, and data types of the characteristics that are not used by any product?",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the characteristics' names, details, and data types that have never been used by any product?",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Could you provide the names, details, and data types of the characteristics that are not associated with any product?",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details, and data types of the characteristics that have not been utilized by any product?",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Can you identify the characteristics' names, details, and data types that have never been applied to any product?",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "What are the different names of mountains ascended by climbers from the country of West Germany?",
        "gold_parse": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "query": "SELECT DISTINCT Name FROM mountain WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "Can you list the various mountains that have been climbed by mountaineers from West Germany?",
        "gold_parse": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "query": "SELECT DISTINCT Name FROM mountain WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "What are the names of the mountains that West German climbers have ascended?",
        "gold_parse": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "query": "SELECT DISTINCT Name FROM mountain WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "Which mountains have been scaled by climbers hailing from West Germany?",
        "gold_parse": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "query": "SELECT DISTINCT Name FROM mountain WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "Identify the mountains that have been ascended by climbers from West Germany.",
        "gold_parse": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "query": "SELECT DISTINCT Name FROM mountain WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "What are the mountains that climbers from West Germany have successfully climbed?",
        "gold_parse": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "query": "SELECT DISTINCT Name FROM mountain WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Return all the distinct secretary votes made in the fall election cycle.",
        "gold_parse": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"",
        "query": "SELECT DISTINCT Advisor FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Show all unique votes cast by secretaries in the fall election cycle.",
        "gold_parse": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"",
        "query": "SELECT DISTINCT Advisor FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Retrieve all distinct votes from secretaries during the fall election period.",
        "gold_parse": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"",
        "query": "SELECT DISTINCT Advisor FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Display all the different votes made by secretaries in the fall elections.",
        "gold_parse": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"",
        "query": "SELECT DISTINCT Advisor FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Can you list all the unique votes by secretaries in the fall election cycle?",
        "gold_parse": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"",
        "query": "SELECT DISTINCT Advisor FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Provide all distinct votes submitted by secretaries in the fall election cycle.",
        "gold_parse": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"",
        "query": "SELECT DISTINCT Advisor FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT max_temperature_f FROM weather WHERE max_sea_level_pressure_inches < value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the count of days where the average humidity was over 50 and the average visibility was more than 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT max_temperature_f FROM weather WHERE max_sea_level_pressure_inches < value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Can you tell me the number of days when the mean humidity exceeded 50 and the mean visibility was greater than 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT max_temperature_f FROM weather WHERE max_sea_level_pressure_inches < value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days were there when both the average humidity was above 50 and the average visibility was over 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT max_temperature_f FROM weather WHERE max_sea_level_pressure_inches < value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What's the total number of days with mean humidity over 50 and mean visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT max_temperature_f FROM weather WHERE max_sea_level_pressure_inches < value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Can you count the days where both the mean humidity was more than 50 and the mean visibility was higher than 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT max_temperature_f FROM weather WHERE max_sea_level_pressure_inches < value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'David'));",
        "question": "What are the names of highschoolers who are friends with David?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'David'));"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'David'));",
        "question": "Who are the high school students that are friends with David?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'David'));"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'David'));",
        "question": "Can you list the highschoolers who are friends with David?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'David'));"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'David'));",
        "question": "Identify the highschoolers who have David as a friend.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'David'));"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'David'));",
        "question": "Which highschoolers have a friendship with David?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'David'));"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'David'));",
        "question": "Could you tell me the names of highschoolers who are friends with David?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'David'));"
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.PrepNurse ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Who is the nurse with the highest number of appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.PrepNurse ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Can you tell me the name of the nurse who has the most appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.PrepNurse ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which nurse has the maximum number of appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.PrepNurse ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "I want to know the nurse who has the most appointments.",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.PrepNurse ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Identify the nurse with the most appointments.",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.PrepNurse ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Show storm name with at least two regions and 10 cities affected.",
        "gold_parse": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Display the names of storms that have affected at least two regions and ten cities.",
        "gold_parse": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Can you list the storms that have impacted a minimum of two regions and ten cities?",
        "gold_parse": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the names of storms that have hit at least two regions and ten cities?",
        "gold_parse": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Identify storms that have affected no less than two regions and ten cities.",
        "gold_parse": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Provide the names of storms that have impacted at least two regions and ten cities.",
        "gold_parse": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the name of aircrafts with top three lowest distances.",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Display the names of the aircrafts with the three shortest distances.",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Can you list the aircraft names with the three smallest distances?",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the names of the aircrafts with the top three shortest distances?",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Identify the aircrafts with the three least distances.",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Provide the names of the aircrafts with the three lowest distances.",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Chemistry');",
        "question": "What are the names of journals that have the same name as 'Journal of Chemistry'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Chemistry');"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Chemistry');",
        "question": "Can you list the names of journals identical to 'Journal of Chemistry'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Chemistry');"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Chemistry');",
        "question": "What are the journal names identical to 'Journal of Chemistry'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Chemistry');"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Chemistry');",
        "question": "Could you provide the names of journals that match 'Journal of Chemistry'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Chemistry');"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Chemistry');",
        "question": "What are the names of journals that are the same as 'Journal of Chemistry'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Chemistry');"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Chemistry');",
        "question": "Can you tell me the names of journals that go by 'Journal of Chemistry'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Chemistry');"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",
        "question": "What are the names of the technicians  and how many machines are they assigned to repair?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",
        "question": "Can you list the technicians and the number of machines they are responsible for repairing?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",
        "question": "Who are the technicians and how many machines are they fixing?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",
        "question": "What are the names of the technicians and the count of machines they are tasked to repair?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",
        "question": "Identify the technicians and the quantity of machines they are assigned to fix?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",
        "question": "Could you tell me the names of the technicians and how many machines they are in charge of repairing?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name"
    },
    {
        "db_id": "book_1",
        "query": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\"",
        "question": "Give the average sale price of books authored by George Orwell.",
        "correctness": 1,
        "gold_parse": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\"",
        "question": "What is the mean sale price for books written by George Orwell?",
        "correctness": 1,
        "gold_parse": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\"",
        "question": "Can you tell me the average selling price of George Orwell's books?",
        "correctness": 1,
        "gold_parse": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\"",
        "question": "What's the average price at which George Orwell's books are sold?",
        "correctness": 1,
        "gold_parse": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\"",
        "question": "Find the average price of books authored by George Orwell.",
        "correctness": 1,
        "gold_parse": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\"",
        "question": "What is the typical sale price for books by George Orwell?",
        "correctness": 1,
        "gold_parse": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\""
    },
    {
        "db_id": "news_report",
        "query": "SELECT Nationality ,  Age FROM journalist",
        "question": "What are the nationalities and ages of journalists?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality ,  Age FROM journalist"
    },
    {
        "db_id": "news_report",
        "query": "SELECT Nationality ,  Age FROM journalist",
        "question": "Can you list the nationalities and ages of all journalists?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality ,  Age FROM journalist"
    },
    {
        "db_id": "news_report",
        "query": "SELECT Nationality ,  Age FROM journalist",
        "question": "What is the age and nationality of each journalist?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality ,  Age FROM journalist"
    },
    {
        "db_id": "news_report",
        "query": "SELECT Nationality ,  Age FROM journalist",
        "question": "Could you provide the ages and nationalities of journalists?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality ,  Age FROM journalist"
    },
    {
        "db_id": "news_report",
        "query": "SELECT Nationality ,  Age FROM journalist",
        "question": "I'd like to know the nationalities and ages of journalists.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality ,  Age FROM journalist"
    },
    {
        "db_id": "news_report",
        "query": "SELECT Nationality ,  Age FROM journalist",
        "question": "Show me the ages and nationalities of journalists.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality ,  Age FROM journalist"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT count(DISTINCT Hometown) FROM people",
        "question": "How many distinct hometowns did these people have?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Hometown) FROM people"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT count(DISTINCT Hometown) FROM people",
        "question": "What is the count of unique hometowns of these individuals?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Hometown) FROM people"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT count(DISTINCT Hometown) FROM people",
        "question": "Can you tell me the number of different hometowns these people are from?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Hometown) FROM people"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT count(DISTINCT Hometown) FROM people",
        "question": "What's the total number of distinct hometowns these people had?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Hometown) FROM people"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT count(DISTINCT Hometown) FROM people",
        "question": "How many unique hometowns can be found among these people?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Hometown) FROM people"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT count(DISTINCT Hometown) FROM people",
        "question": "What is the total count of different hometowns these people came from?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Hometown) FROM people"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
        "question": "Find the first name and major of the students who are not allegry to soy.",
        "correctness": 1,
        "gold_parse": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
        "question": "Retrieve the first name and major of students who have no soy allergy.",
        "correctness": 1,
        "gold_parse": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
        "question": "Can you show me the first name and major of students who don't have a soy allergy?",
        "correctness": 1,
        "gold_parse": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
        "question": "I need to know the first name and major of students who aren't allergic to soy.",
        "correctness": 1,
        "gold_parse": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
        "question": "What are the first names and majors of students who have no soy allergy?",
        "correctness": 1,
        "gold_parse": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
        "question": "Could you list the first name and major of students who are not allergic to soy?",
        "correctness": 1,
        "gold_parse": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"",
        "question": "Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names.",
        "correctness": 1,
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"",
        "question": "Can you provide the names of customers who have utilized the 'Close a policy' or 'Upgrade a policy' service?",
        "correctness": 1,
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"",
        "question": "Who are the customers that have used either the 'Close a policy' or 'Upgrade a policy' service?",
        "correctness": 1,
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"",
        "question": "I need the names of customers who have used the 'Close a policy' or 'Upgrade a policy' service.",
        "correctness": 1,
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"",
        "question": "Could you list the customers who have used the services 'Close a policy' or 'Upgrade a policy'?",
        "correctness": 1,
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"",
        "question": "Which of our customers have used the services named 'Close a policy' or 'Upgrade a policy'?",
        "correctness": 1,
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\""
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM countries ORDER BY education_score DESC",
        "question": "List names of countries in descending order of education_score.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM countries ORDER BY education_score DESC"
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM countries ORDER BY education_score DESC",
        "question": "Can you show me the names of countries sorted by education_score in a descending order?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM countries ORDER BY education_score DESC"
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM countries ORDER BY education_score DESC",
        "question": "I need to see the countries' names ordered by education_score from highest to lowest.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM countries ORDER BY education_score DESC"
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM countries ORDER BY education_score DESC",
        "question": "Display the country names in order of decreasing education_score.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM countries ORDER BY education_score DESC"
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM countries ORDER BY education_score DESC",
        "question": "Could you list the countries by education_score in a reverse order?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM countries ORDER BY education_score DESC"
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM countries ORDER BY education_score DESC",
        "question": "Please provide the names of countries ranked by education_score in a descending manner.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM countries ORDER BY education_score DESC"
    },
    {
        "db_id": "election",
        "question": "Who were the governors of the parties associated with delegates from district 1?",
        "gold_parse": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
        "query": "SELECT T2.Comptroller FROM county AS T1 JOIN party AS T2 JOIN election AS T3 ON T1.County_Id = T3.District AND T3.Party = T2.Party_ID WHERE T1.Population = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Can you list the governors from the parties that have delegates in district 1?",
        "gold_parse": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
        "query": "SELECT T2.Comptroller FROM county AS T1 JOIN party AS T2 JOIN election AS T3 ON T1.County_Id = T3.District AND T3.Party = T2.Party_ID WHERE T1.Population = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Who are the governors representing the parties with delegates in the first district?",
        "gold_parse": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
        "query": "SELECT T2.Comptroller FROM county AS T1 JOIN party AS T2 JOIN election AS T3 ON T1.County_Id = T3.District AND T3.Party = T2.Party_ID WHERE T1.Population = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Identify the governors of the parties that have delegates from district 1.",
        "gold_parse": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
        "query": "SELECT T2.Comptroller FROM county AS T1 JOIN party AS T2 JOIN election AS T3 ON T1.County_Id = T3.District AND T3.Party = T2.Party_ID WHERE T1.Population = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Who are the governors from the parties linked with delegates in district 1?",
        "gold_parse": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
        "query": "SELECT T2.Comptroller FROM county AS T1 JOIN party AS T2 JOIN election AS T3 ON T1.County_Id = T3.District AND T3.Party = T2.Party_ID WHERE T1.Population = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which governors are associated with the parties that have delegates in district 1?",
        "gold_parse": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
        "query": "SELECT T2.Comptroller FROM county AS T1 JOIN party AS T2 JOIN election AS T3 ON T1.County_Id = T3.District AND T3.Party = T2.Party_ID WHERE T1.Population = value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC;",
        "question": "Show the property types and the number of properties in each, ordered by the number of properties in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC;",
        "question": "Display the types of properties along with their respective counts, sorted in descending order based on the count.",
        "correctness": 1,
        "gold_parse": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC;",
        "question": "Can you list the property types and their corresponding counts, arranged in descending order by count?",
        "correctness": 1,
        "gold_parse": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC;",
        "question": "I want to see the property types and how many of each there are, sorted from most to least.",
        "correctness": 1,
        "gold_parse": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC;",
        "question": "Provide a list of property types and the number of each, ordered from highest to lowest.",
        "correctness": 1,
        "gold_parse": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC;",
        "question": "Could you show me the types of properties and the quantity of each, arranged in order of decreasing quantity?",
        "correctness": 1,
        "gold_parse": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC;"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
        "query": "SELECT T2.Name FROM Features AS T1 JOIN Tourist_Attractions AS T2 JOIN Tourist_Attraction_Features AS T3 ON T1.Feature_ID = T3.Feature_ID AND T3.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Feature_Details = value OR T1.Feature_Details = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Can you list the tourist spots that offer parking or shopping facilities?",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
        "query": "SELECT T2.Name FROM Features AS T1 JOIN Tourist_Attractions AS T2 JOIN Tourist_Attraction_Features AS T3 ON T1.Feature_ID = T3.Feature_ID AND T3.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Feature_Details = value OR T1.Feature_Details = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the tourist places that include parking or shopping in their features?",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
        "query": "SELECT T2.Name FROM Features AS T1 JOIN Tourist_Attractions AS T2 JOIN Tourist_Attraction_Features AS T3 ON T1.Feature_ID = T3.Feature_ID AND T3.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Feature_Details = value OR T1.Feature_Details = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Identify the tourist attractions that have either parking or shopping as part of their amenities.",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
        "query": "SELECT T2.Name FROM Features AS T1 JOIN Tourist_Attractions AS T2 JOIN Tourist_Attraction_Features AS T3 ON T1.Feature_ID = T3.Feature_ID AND T3.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Feature_Details = value OR T1.Feature_Details = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which tourist attractions have parking or shopping listed in their feature details?",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
        "query": "SELECT T2.Name FROM Features AS T1 JOIN Tourist_Attractions AS T2 JOIN Tourist_Attraction_Features AS T3 ON T1.Feature_ID = T3.Feature_ID AND T3.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Feature_Details = value OR T1.Feature_Details = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show me the tourist attractions that have parking or shopping as their amenities.",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
        "query": "SELECT T2.Name FROM Features AS T1 JOIN Tourist_Attractions AS T2 JOIN Tourist_Attraction_Features AS T3 ON T1.Feature_ID = T3.Feature_ID AND T3.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Feature_Details = value OR T1.Feature_Details = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What is the average weight of all players?",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "query": "SELECT Avg ( agility ) FROM Player_Attributes",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What's the mean weight of all players?",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "query": "SELECT Avg ( agility ) FROM Player_Attributes",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "Can you tell me the average weight of all players?",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "query": "SELECT Avg ( agility ) FROM Player_Attributes",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What is the mean weight for all players?",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "query": "SELECT Avg ( agility ) FROM Player_Attributes",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "Could you find the average weight of all players?",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "query": "SELECT Avg ( agility ) FROM Player_Attributes",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "I'd like to know the average weight of all players.",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "query": "SELECT Avg ( agility ) FROM Player_Attributes",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
        "question": "What are the names of students who haven't taken any Biology courses?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
        "question": "Can you list the students who have not enrolled in any Biology classes?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
        "question": "Who are the students that haven't participated in any Biology courses?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
        "question": "Identify the students who have not taken Biology courses.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
        "question": "Which students have not registered for any Biology classes?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
        "question": "Could you tell me the names of students who have not attended any Biology courses?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')"
    },
    {
        "db_id": "geography",
        "question": "Which state has the maximum population in its smallest city?",
        "gold_parse": "",
        "query": "SELECT state_name, MIN(population) FROM city GROUP BY state_name;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "In which state is the smallest city with the highest population located?",
        "gold_parse": "",
        "query": "SELECT state_name, MIN(population) FROM city GROUP BY state_name;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What state is home to the smallest city with the largest population?",
        "gold_parse": "",
        "query": "SELECT state_name, MIN(population) FROM city GROUP BY state_name;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which state's smallest city has the highest population?",
        "gold_parse": "",
        "query": "SELECT state_name, MIN(population) FROM city GROUP BY state_name;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "The smallest city with the maximum population is in which state?",
        "gold_parse": "",
        "query": "SELECT state_name, MIN(population) FROM city GROUP BY state_name;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "In what state can the smallest city with the most population be found?",
        "gold_parse": "",
        "query": "SELECT state_name, MIN(population) FROM city GROUP BY state_name;",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Company FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Who is the investor with the most number of entrepreneurs invested in?",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Company FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Identify the investor who has funded the highest number of entrepreneurs.",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Company FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Can you find the investor who has invested in the maximum number of entrepreneurs?",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Company FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Which investor has the most investments in entrepreneurs?",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Company FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Who is the investor that has backed the most entrepreneurs?",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Company FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many debit cards do we have?",
        "gold_parse": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
        "query": "SELECT Count ( DISTINCT card_number ) FROM Customers_Cards",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What is the total count of debit cards we possess?",
        "gold_parse": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
        "query": "SELECT Count ( DISTINCT card_number ) FROM Customers_Cards",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Can you tell me the number of debit cards we have?",
        "gold_parse": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
        "query": "SELECT Count ( DISTINCT card_number ) FROM Customers_Cards",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What's the total number of our debit cards?",
        "gold_parse": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
        "query": "SELECT Count ( DISTINCT card_number ) FROM Customers_Cards",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Do you know how many debit cards we own?",
        "gold_parse": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
        "query": "SELECT Count ( DISTINCT card_number ) FROM Customers_Cards",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Could you tell me the quantity of debit cards we have?",
        "gold_parse": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
        "query": "SELECT Count ( DISTINCT card_number ) FROM Customers_Cards",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);",
        "question": "What are the names of businesses with the lowest business ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);",
        "question": "Which businesses have the smallest business ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);",
        "question": "Can you list the businesses with the minimum business ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);",
        "question": "What are the businesses that have the least business ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);",
        "question": "Identify the businesses with the lowest business ID.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);",
        "question": "Show me the names of businesses with the lowest business ID.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);"
    },
    {
        "db_id": "wine_1",
        "question": "What is the county that produces the most wines scoring higher than 90?",
        "gold_parse": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.County FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > value GROUP BY T2.State ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Which county is the top producer of wines with scores above 90?",
        "gold_parse": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.County FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > value GROUP BY T2.State ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Can you tell me the county that produces the highest number of wines rated over 90?",
        "gold_parse": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.County FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > value GROUP BY T2.State ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What's the name of the county that has the most wines with a score greater than 90?",
        "gold_parse": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.County FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > value GROUP BY T2.State ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Identify the county that produces the most wines that have a score higher than 90.",
        "gold_parse": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.County FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > value GROUP BY T2.State ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "In which county are the most wines with a rating over 90 produced?",
        "gold_parse": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.County FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > value GROUP BY T2.State ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT avg(ERP_kW) FROM radio",
        "question": "What is the average ERP across all radios?",
        "correctness": 1,
        "gold_parse": "SELECT avg(ERP_kW) FROM radio"
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT avg(ERP_kW) FROM radio",
        "question": "What's the mean ERP for all radios?",
        "correctness": 1,
        "gold_parse": "SELECT avg(ERP_kW) FROM radio"
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT avg(ERP_kW) FROM radio",
        "question": "Can you tell me the average ERP for all radios?",
        "correctness": 1,
        "gold_parse": "SELECT avg(ERP_kW) FROM radio"
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT avg(ERP_kW) FROM radio",
        "question": "What is the mean ERP value across all radios?",
        "correctness": 1,
        "gold_parse": "SELECT avg(ERP_kW) FROM radio"
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT avg(ERP_kW) FROM radio",
        "question": "Could you find the average ERP of all radios?",
        "correctness": 1,
        "gold_parse": "SELECT avg(ERP_kW) FROM radio"
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT avg(ERP_kW) FROM radio",
        "question": "What is the overall average ERP for all radios?",
        "correctness": 1,
        "gold_parse": "SELECT avg(ERP_kW) FROM radio"
    },
    {
        "db_id": "perpetrator",
        "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
        "query": "SELECT T2.Name FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Country = value OR T1.Location = value",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "Can you list the names of perpetrators from either China or Japan?",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
        "query": "SELECT T2.Name FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Country = value OR T1.Location = value",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "Who are the perpetrators based in China or Japan?",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
        "query": "SELECT T2.Name FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Country = value OR T1.Location = value",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "Identify the perpetrators who are from China or Japan.",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
        "query": "SELECT T2.Name FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Country = value OR T1.Location = value",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "Could you provide the names of perpetrators in China or Japan?",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
        "query": "SELECT T2.Name FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Country = value OR T1.Location = value",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "I need to know the names of perpetrators from China or Japan.",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
        "query": "SELECT T2.Name FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Country = value OR T1.Location = value",
        "correctness": 0
    },
    {
        "db_id": "book_1",
        "query": "SELECT title ,  isbn ,  SalePrice FROM Book",
        "question": "What are the titles, ISBNs, and sale prices for all books?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  isbn ,  SalePrice FROM Book"
    },
    {
        "db_id": "book_1",
        "query": "SELECT title ,  isbn ,  SalePrice FROM Book",
        "question": "Can you list the titles, ISBNs, and sale prices of all books?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  isbn ,  SalePrice FROM Book"
    },
    {
        "db_id": "book_1",
        "query": "SELECT title ,  isbn ,  SalePrice FROM Book",
        "question": "What are the names, ISBNs, and cost of all books?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  isbn ,  SalePrice FROM Book"
    },
    {
        "db_id": "book_1",
        "query": "SELECT title ,  isbn ,  SalePrice FROM Book",
        "question": "Could you provide the titles, ISBNs, and selling prices for every book?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  isbn ,  SalePrice FROM Book"
    },
    {
        "db_id": "book_1",
        "query": "SELECT title ,  isbn ,  SalePrice FROM Book",
        "question": "I need to know the titles, ISBNs, and sale prices for all books.",
        "correctness": 1,
        "gold_parse": "SELECT title ,  isbn ,  SalePrice FROM Book"
    },
    {
        "db_id": "book_1",
        "query": "SELECT title ,  isbn ,  SalePrice FROM Book",
        "question": "What are the book titles, ISBNs, and their sale prices?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  isbn ,  SalePrice FROM Book"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the type of powertrain with most number of vehicles.",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1",
        "question": "Which powertrain type is found in the most number of vehicles?",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1",
        "question": "What kind of powertrain is most common in vehicles?",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the most frequently used powertrain type in vehicles?",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1",
        "question": "What powertrain type is most prevalent in vehicles?",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1",
        "question": "Which type of powertrain is most commonly used in vehicles?",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'",
        "question": "Which address do not have any member with the black membership card?",
        "correctness": 1,
        "gold_parse": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'",
        "question": "Which addresses lack members with a black membership card?",
        "correctness": 1,
        "gold_parse": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'",
        "question": "Can you list the addresses that don't have any members with black membership cards?",
        "correctness": 1,
        "gold_parse": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'",
        "question": "What are the addresses where no member has a black membership card?",
        "correctness": 1,
        "gold_parse": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'",
        "question": "Identify the addresses without any members holding a black membership card.",
        "correctness": 1,
        "gold_parse": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'",
        "question": "Show me the addresses where no one has a black membership card.",
        "correctness": 1,
        "gold_parse": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'"
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes for each source airport and the airport name.",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "query": "SELECT name , Count ( * ) FROM airports GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the count of routes for each originating airport along with the airport name?",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "query": "SELECT name , Count ( * ) FROM airports GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Can you provide the total number of routes for each source airport and their names?",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "query": "SELECT name , Count ( * ) FROM airports GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What are the numbers of routes for each departure airport and the name of the airport?",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "query": "SELECT name , Count ( * ) FROM airports GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Could you tell me the quantity of routes for each starting airport and the airport's name?",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "query": "SELECT name , Count ( * ) FROM airports GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "I need to know the total routes for each source airport and the corresponding airport name.",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "query": "SELECT name , Count ( * ) FROM airports GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )",
        "question": "Count the number of drivers who have not driven any vehicles.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )",
        "question": "How many drivers have never driven a vehicle?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )",
        "question": "What is the total number of drivers who haven't operated any vehicles?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )",
        "question": "Can you count the drivers who have never been behind the wheel?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )",
        "question": "What's the count of drivers who have not driven any vehicles?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )",
        "question": "Determine the number of drivers who have not driven any vehicles.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )"
    },
    {
        "db_id": "farm",
        "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
        "question": "Please show the themes of competitions with host cities having populations larger than 1000.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000"
    },
    {
        "db_id": "farm",
        "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
        "question": "Can you display the themes of competitions where the host cities have a population greater than 1000?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000"
    },
    {
        "db_id": "farm",
        "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
        "question": "What are the themes of competitions in host cities with populations exceeding 1000?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000"
    },
    {
        "db_id": "farm",
        "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
        "question": "I'd like to see the themes of competitions in cities with more than 1000 residents.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000"
    },
    {
        "db_id": "farm",
        "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
        "question": "Could you list the themes of competitions held in cities with a population over 1000?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000"
    },
    {
        "db_id": "farm",
        "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
        "question": "Show me the competition themes in cities that have a population of more than 1000.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000"
    },
    {
        "db_id": "flight_2",
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "gold_parse": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "query": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What is the count of 'United Airlines' flights taking off from 'AHD' airport?",
        "gold_parse": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "query": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Can you tell me the number of 'United Airlines' flights that depart from 'AHD'?",
        "gold_parse": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "query": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many flights does 'United Airlines' have departing from 'AHD'?",
        "gold_parse": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "query": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What's the total number of 'United Airlines' flights leaving from 'AHD'?",
        "gold_parse": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "query": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Can you count the 'United Airlines' flights that are departing from 'AHD'?",
        "gold_parse": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "query": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        "correctness": 0
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "What are the names of the products tht have been shipped, and on what days were they shipped?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "Can you list the products that have been shipped and their respective shipping dates?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "What are the product names and their shipping dates for the items that have been shipped?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "Could you tell me the names of the shipped products and the dates they were shipped?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "I'd like to know the names of the products that have been shipped and when they were shipped.",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "What are the names and shipping dates of the products that have been dispatched?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "poker_player",
        "question": "What are the names of poker players?",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "query": "SELECT Name FROM people",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "Can you list the names of poker players?",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "query": "SELECT Name FROM people",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "Who are the poker players by name?",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "query": "SELECT Name FROM people",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "Could you provide the names of poker players?",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "query": "SELECT Name FROM people",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "I'd like to know the names of poker players.",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "query": "SELECT Name FROM people",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "What are the poker players called?",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "query": "SELECT Name FROM people",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What are the degrees conferred in \"San Francisco State University\" in 2001.",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "query": "SELECT T2.Graduate FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T1.Id = T2.Campus JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T1.Campus = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What degrees were awarded at 'San Francisco State University' in the year 2001?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "query": "SELECT T2.Graduate FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T1.Id = T2.Campus JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T1.Campus = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Can you list the degrees that were conferred at 'San Francisco State University' in 2001?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "query": "SELECT T2.Graduate FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T1.Id = T2.Campus JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T1.Campus = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What are the different degrees that 'San Francisco State University' conferred in 2001?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "query": "SELECT T2.Graduate FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T1.Id = T2.Campus JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T1.Campus = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "In 2001, what degrees were conferred by 'San Francisco State University'?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "query": "SELECT T2.Graduate FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T1.Id = T2.Campus JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T1.Campus = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What types of degrees were given out at 'San Francisco State University' in 2001?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "query": "SELECT T2.Graduate FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T1.Id = T2.Campus JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T1.Campus = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "How many products are not made by Sony?",
        "gold_parse": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')",
        "query": "SELECT Count ( * ) FROM Manufacturers AS T1 WHERE T1.Code NOT IN ( SELECT T2.Manufacturer FROM Products AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What is the count of products not manufactured by Sony?",
        "gold_parse": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')",
        "query": "SELECT Count ( * ) FROM Manufacturers AS T1 WHERE T1.Code NOT IN ( SELECT T2.Manufacturer FROM Products AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Can you tell me the number of products not produced by Sony?",
        "gold_parse": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')",
        "query": "SELECT Count ( * ) FROM Manufacturers AS T1 WHERE T1.Code NOT IN ( SELECT T2.Manufacturer FROM Products AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What's the total number of products that aren't made by Sony?",
        "gold_parse": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')",
        "query": "SELECT Count ( * ) FROM Manufacturers AS T1 WHERE T1.Code NOT IN ( SELECT T2.Manufacturer FROM Products AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "How many items are there that aren't Sony products?",
        "gold_parse": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')",
        "query": "SELECT Count ( * ) FROM Manufacturers AS T1 WHERE T1.Code NOT IN ( SELECT T2.Manufacturer FROM Products AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What is the quantity of products not made by Sony?",
        "gold_parse": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')",
        "query": "SELECT Count ( * ) FROM Manufacturers AS T1 WHERE T1.Code NOT IN ( SELECT T2.Manufacturer FROM Products AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name",
        "question": "What is the average number of stars that each reviewer awards for a movie?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name",
        "question": "What's the mean star rating given by each reviewer for a film?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name",
        "question": "Can you tell me the average star rating that each critic gives to a movie?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name",
        "question": "What is the mean number of stars awarded by each reviewer for a movie?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name",
        "question": "What is the typical number of stars that each critic awards for a film?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name",
        "question": "Can you find out the average star rating that each reviewer assigns to a film?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
        "question": "How many albums has Billy Cobam released?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
        "question": "What is the total number of albums released by Billy Cobam?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
        "question": "Can you count the albums Billy Cobam has released?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
        "question": "What's the count of Billy Cobam's released albums?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
        "question": "How many times has Billy Cobam released an album?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
        "question": "What is the quantity of albums that Billy Cobam has released?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";"
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "query": "SELECT T1.cName , T1.enr , T1.state FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.HS > value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Identify the name and enrollment of colleges in LA state with a size greater than 10000.",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "query": "SELECT T1.cName , T1.enr , T1.state FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.HS > value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Can you list the colleges in LA state with more than 10000 students and provide their names and enrollment?",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "query": "SELECT T1.cName , T1.enr , T1.state FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.HS > value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names and enrollments of colleges in LA state that have a size exceeding 10000?",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "query": "SELECT T1.cName , T1.enr , T1.state FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.HS > value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Show me the colleges in LA state that have over 10000 students, along with their names and enrollments.",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "query": "SELECT T1.cName , T1.enr , T1.state FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.HS > value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Provide the names and enrollments of colleges located in LA state with a student body larger than 10000.",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "query": "SELECT T1.cName , T1.enr , T1.state FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.HS > value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value OR T1.GDP < value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Can you provide a list of cities where the temperature in March is less than July or more than October?",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value OR T1.GDP < value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities have a lower temperature in March compared to July or a higher temperature compared to October?",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value OR T1.GDP < value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "I need to know the cities where the temperature in March falls below that of July or rises above that of October.",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value OR T1.GDP < value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Could you list the cities that experience lower temperatures in March than in July or higher temperatures than in October?",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value OR T1.GDP < value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What are the cities where the temperature in March is either below that in July or above that in October?",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value OR T1.GDP < value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
        "question": "What is the average unit price of tracks that belong to Jazz genre?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
        "question": "What's the mean unit price for tracks in the Jazz genre?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
        "question": "Can you tell me the average cost per unit for Jazz tracks?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
        "question": "What is the typical unit price for Jazz genre tracks?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
        "question": "Could you find the average unit price for tracks under the Jazz genre?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
        "question": "What is the usual unit price for tracks of the Jazz genre?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\""
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";",
        "question": "How long does student Linda Smith spend on the restaurant in total?",
        "correctness": 1,
        "gold_parse": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";",
        "question": "What is the total time Linda Smith spends at the restaurant?",
        "correctness": 1,
        "gold_parse": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";",
        "question": "Can you tell me the total duration Linda Smith stays in the restaurant?",
        "correctness": 1,
        "gold_parse": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";",
        "question": "What is the cumulative time Linda Smith has spent in the restaurant?",
        "correctness": 1,
        "gold_parse": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";",
        "question": "How much time in total has Linda Smith spent in the restaurant?",
        "correctness": 1,
        "gold_parse": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";",
        "question": "What's the total amount of time Linda Smith has spent at the restaurant?",
        "correctness": 1,
        "gold_parse": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";"
    },
    {
        "db_id": "tracking_orders",
        "question": "What are the dates of the orders made by the customer named \"Jeramie\"?",
        "gold_parse": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "query": "SELECT T3.shipment_date FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Shipments AS T3 ON T2.order_id = T3.order_id WHERE T1.customer_name = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Can you tell me the dates when Jeramie placed his orders?",
        "gold_parse": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "query": "SELECT T3.shipment_date FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Shipments AS T3 ON T2.order_id = T3.order_id WHERE T1.customer_name = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What are the order dates for the customer Jeramie?",
        "gold_parse": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "query": "SELECT T3.shipment_date FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Shipments AS T3 ON T2.order_id = T3.order_id WHERE T1.customer_name = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Could you list the dates of the orders placed by Jeramie?",
        "gold_parse": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "query": "SELECT T3.shipment_date FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Shipments AS T3 ON T2.order_id = T3.order_id WHERE T1.customer_name = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "When did the customer Jeramie make his orders?",
        "gold_parse": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "query": "SELECT T3.shipment_date FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Shipments AS T3 ON T2.order_id = T3.order_id WHERE T1.customer_name = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What are the dates of the transactions made by the customer Jeramie?",
        "gold_parse": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "query": "SELECT T3.shipment_date FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Shipments AS T3 ON T2.order_id = T3.order_id WHERE T1.customer_name = value",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT(DISTINCT name) FROM domain;",
        "question": "How many different domain names are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT name) FROM domain;"
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT(DISTINCT name) FROM domain;",
        "question": "What is the count of unique domain names?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT name) FROM domain;"
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT(DISTINCT name) FROM domain;",
        "question": "Can you tell me the number of distinct domain names?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT name) FROM domain;"
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT(DISTINCT name) FROM domain;",
        "question": "What's the total number of different domain names?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT name) FROM domain;"
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT(DISTINCT name) FROM domain;",
        "question": "How many unique domain names exist?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT name) FROM domain;"
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT(DISTINCT name) FROM domain;",
        "question": "What is the total count of different domain names?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT name) FROM domain;"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which store owns most items?",
        "correctness": 1,
        "gold_parse": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which store has the highest number of items?",
        "correctness": 1,
        "gold_parse": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which store possesses the greatest quantity of items?",
        "correctness": 1,
        "gold_parse": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which store holds the maximum amount of items?",
        "correctness": 1,
        "gold_parse": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which store is the owner of the most items?",
        "correctness": 1,
        "gold_parse": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which store has the largest inventory?",
        "correctness": 1,
        "gold_parse": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees who are managers?",
        "gold_parse": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "query": "SELECT * FROM regions",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you provide all the details about employees holding managerial positions?",
        "gold_parse": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "query": "SELECT * FROM regions",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the details for employees who have the role of a manager?",
        "gold_parse": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "query": "SELECT * FROM regions",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "I need all the information about employees who are in managerial positions.",
        "gold_parse": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "query": "SELECT * FROM regions",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Could you show me all the data related to employees who are managers?",
        "gold_parse": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "query": "SELECT * FROM regions",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What's all the data on employees who serve as managers?",
        "gold_parse": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "query": "SELECT * FROM regions",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "question": "What is the average fee on a CSU campus in 2005?",
        "correctness": 1,
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "question": "What's the mean fee at a CSU campus in 2005?",
        "correctness": 1,
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "question": "Can you tell me the average cost on a CSU campus in 2005?",
        "correctness": 1,
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "question": "What was the typical fee on a CSU campus in 2005?",
        "correctness": 1,
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "question": "In 2005, what was the average fee at a CSU campus?",
        "correctness": 1,
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "question": "Could you find out the average fee on a CSU campus in the year 2005?",
        "correctness": 1,
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005"
    },
    {
        "db_id": "tvshow",
        "question": "List all cartoon directed by \"Ben Jones\".",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "Show all cartoons that were directed by Ben Jones",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "Can you list all the cartoons directed by Ben Jones?",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What are all the cartoons directed by Ben Jones?",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "Provide a list of all cartoons directed by Ben Jones",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "I want to see all cartoons directed by Ben Jones",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "What are the titles and authors or editors that correspond to books made after 1989?",
        "gold_parse": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",
        "query": "SELECT T2.Title , T1.Author_or_Editor FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id WHERE T1.Year > value",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "Can you list the titles and authors or editors for books published post 1989?",
        "gold_parse": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",
        "query": "SELECT T2.Title , T1.Author_or_Editor FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id WHERE T1.Year > value",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "What are the names and authors or editors of books that were produced after 1989?",
        "gold_parse": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",
        "query": "SELECT T2.Title , T1.Author_or_Editor FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id WHERE T1.Year > value",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "Could you provide the titles and authors or editors of books created after the year 1989?",
        "gold_parse": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",
        "query": "SELECT T2.Title , T1.Author_or_Editor FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id WHERE T1.Year > value",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "I'd like to know the titles and authors or editors of books that were published after 1989.",
        "gold_parse": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",
        "query": "SELECT T2.Title , T1.Author_or_Editor FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id WHERE T1.Year > value",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "Show me the titles and authors or editors related to books that came out after 1989.",
        "gold_parse": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",
        "query": "SELECT T2.Title , T1.Author_or_Editor FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id WHERE T1.Year > value",
        "correctness": 0
    },
    {
        "db_id": "university_rank",
        "query": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5",
        "question": "What is the total enrollment of universities with a overall rank 5 or below?",
        "correctness": 1,
        "gold_parse": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5",
        "question": "What's the sum of enrollments for universities ranked 5 or less?",
        "correctness": 1,
        "gold_parse": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5",
        "question": "Can you tell me the total number of students in universities that are ranked 5 or below?",
        "correctness": 1,
        "gold_parse": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5",
        "question": "What is the aggregate enrollment of universities that have an overall rank of 5 or lower?",
        "correctness": 1,
        "gold_parse": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5",
        "question": "How many students are enrolled in universities with a ranking of 5 or less?",
        "correctness": 1,
        "gold_parse": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5",
        "question": "What is the cumulative enrollment of universities with a rank of 5 or below?",
        "correctness": 1,
        "gold_parse": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";",
        "question": "How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?",
        "correctness": 1,
        "gold_parse": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";",
        "question": "What is the count of children in the room where DAMIEN TRACHSEL checked in on Sep 21, 2010?",
        "correctness": 1,
        "gold_parse": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";",
        "question": "Can you tell me the number of kids in the room where DAMIEN TRACHSEL stayed on Sep 21, 2010?",
        "correctness": 1,
        "gold_parse": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";",
        "question": "What's the total number of children in the room DAMIEN TRACHSEL checked into on Sep 21, 2010?",
        "correctness": 1,
        "gold_parse": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";",
        "question": "How many children were staying in the room that DAMIEN TRACHSEL checked into on Sep 21, 2010?",
        "correctness": 1,
        "gold_parse": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";",
        "question": "What is the quantity of kids in the room where DAMIEN TRACHSEL was checked in on Sep 21, 2010?",
        "correctness": 1,
        "gold_parse": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";"
    },
    {
        "db_id": "music_1",
        "question": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "query": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Can you tell me the name and country of origin of the artist who has a song with 'love' in its title?",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "query": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Who is the artist from which country that has released a song with 'love' in the title?",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "query": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What's the name and nationality of the artist who has a song with 'love' in its title?",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "query": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "I want to know the artist's name and their country who released a song that includes 'love' in its title.",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "query": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Could you provide the name and the country of the artist who has a song with 'love' in its title?",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "query": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct first names of all the students who have vice president votes and whose city code is not PIT.",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"",
        "query": "SELECT DISTINCT Fname FROM Student WHERE Advisor = value AND Advisor ! = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Identify the unique first names of students who received votes for vice president and do not reside in the city with code PIT.",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"",
        "query": "SELECT DISTINCT Fname FROM Student WHERE Advisor = value AND Advisor ! = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct first names of students who got vice president votes and are not from the city with the code PIT?",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"",
        "query": "SELECT DISTINCT Fname FROM Student WHERE Advisor = value AND Advisor ! = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Can you list the different first names of students who have votes for the position of vice president and whose city code isn't PIT?",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"",
        "query": "SELECT DISTINCT Fname FROM Student WHERE Advisor = value AND Advisor ! = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Show me the unique first names of students who have been voted for vice president and don't live in the city coded as PIT.",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"",
        "query": "SELECT DISTINCT Fname FROM Student WHERE Advisor = value AND Advisor ! = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Provide the distinct first names of students who have vice president votes and whose city code is not identified as PIT.",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"",
        "query": "SELECT DISTINCT Fname FROM Student WHERE Advisor = value AND Advisor ! = value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "query": "SELECT Official_Name FROM city ORDER BY Population DESC",
        "question": "What are the official names of cities, ordered descending by population?",
        "correctness": 1,
        "gold_parse": "SELECT Official_Name FROM city ORDER BY Population DESC"
    },
    {
        "db_id": "farm",
        "query": "SELECT Official_Name FROM city ORDER BY Population DESC",
        "question": "Can you list the formal names of cities in descending order of their population?",
        "correctness": 1,
        "gold_parse": "SELECT Official_Name FROM city ORDER BY Population DESC"
    },
    {
        "db_id": "farm",
        "query": "SELECT Official_Name FROM city ORDER BY Population DESC",
        "question": "What are the cities with their official names, sorted by population in a descending order?",
        "correctness": 1,
        "gold_parse": "SELECT Official_Name FROM city ORDER BY Population DESC"
    },
    {
        "db_id": "farm",
        "query": "SELECT Official_Name FROM city ORDER BY Population DESC",
        "question": "Could you provide the official names of cities, ranked from the most populated to the least?",
        "correctness": 1,
        "gold_parse": "SELECT Official_Name FROM city ORDER BY Population DESC"
    },
    {
        "db_id": "farm",
        "query": "SELECT Official_Name FROM city ORDER BY Population DESC",
        "question": "I need the official names of cities, arranged by population in a decreasing order.",
        "correctness": 1,
        "gold_parse": "SELECT Official_Name FROM city ORDER BY Population DESC"
    },
    {
        "db_id": "farm",
        "query": "SELECT Official_Name FROM city ORDER BY Population DESC",
        "question": "What are the cities' official names, sorted from highest to lowest population?",
        "correctness": 1,
        "gold_parse": "SELECT Official_Name FROM city ORDER BY Population DESC"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(DISTINCT student_id) FROM Detention",
        "question": "How many students have gone through a detention?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT student_id) FROM Detention"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(DISTINCT student_id) FROM Detention",
        "question": "What is the count of students who have experienced detention?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT student_id) FROM Detention"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(DISTINCT student_id) FROM Detention",
        "question": "Can you tell me the number of students who have been in detention?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT student_id) FROM Detention"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(DISTINCT student_id) FROM Detention",
        "question": "What's the total number of students that have gone through detention?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT student_id) FROM Detention"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(DISTINCT student_id) FROM Detention",
        "question": "How many pupils have had a detention?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT student_id) FROM Detention"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(DISTINCT student_id) FROM Detention",
        "question": "What is the total count of students who have been through detention?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT student_id) FROM Detention"
    },
    {
        "db_id": "climbing",
        "query": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "question": "What are the different names of mountains ascended by climbers from the country of West Germany?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\""
    },
    {
        "db_id": "climbing",
        "query": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "question": "Can you list the various mountains that have been climbed by mountaineers from West Germany?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\""
    },
    {
        "db_id": "climbing",
        "query": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "question": "What are the names of the mountains that West German climbers have ascended?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\""
    },
    {
        "db_id": "climbing",
        "query": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "question": "Which mountains have been scaled by climbers hailing from West Germany?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\""
    },
    {
        "db_id": "climbing",
        "query": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "question": "Identify the mountains that have been ascended by individuals from West Germany.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\""
    },
    {
        "db_id": "climbing",
        "query": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "question": "What are the different mountains that West German mountaineers have climbed?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\""
    },
    {
        "db_id": "car_1",
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "gold_parse": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3",
        "query": "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Can you list the ids and makers of car manufacturers who produce a minimum of 2 models and manufacture over 3 cars?",
        "gold_parse": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3",
        "query": "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Which are the ids and makers of all car manufacturers that have at least 2 models and produce more than 3 cars?",
        "gold_parse": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3",
        "query": "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Could you provide the ids and makers of all car makers that produce no less than 2 models and manufacture more than 3 cars?",
        "gold_parse": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3",
        "query": "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Identify the ids and makers of all car manufacturers that produce at least 2 models and make in excess of 3 cars?",
        "gold_parse": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3",
        "query": "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the ids and makers of all car manufacturers that have 2 or more models and produce over 3 cars?",
        "gold_parse": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3",
        "query": "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information about the department Marketing.",
        "gold_parse": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
        "query": "SELECT * FROM regions",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Show all data related to the Marketing department.",
        "gold_parse": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
        "query": "SELECT * FROM regions",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you provide all details for the Marketing department?",
        "gold_parse": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
        "query": "SELECT * FROM regions",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "I need all information on the Marketing department.",
        "gold_parse": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
        "query": "SELECT * FROM regions",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Retrieve all details about the Marketing department.",
        "gold_parse": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
        "query": "SELECT * FROM regions",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information available for the Marketing department?",
        "gold_parse": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
        "query": "SELECT * FROM regions",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum transcript ID for each department description?",
        "gold_parse": "",
        "query": "SELECT department_description, MIN(transcript_id) FROM Departments JOIN Transcripts ON Departments.department_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Can you find the smallest transcript ID for each department description?",
        "gold_parse": "",
        "query": "SELECT department_description, MIN(transcript_id) FROM Departments JOIN Transcripts ON Departments.department_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What's the lowest transcript ID associated with each department description?",
        "gold_parse": "",
        "query": "SELECT department_description, MIN(transcript_id) FROM Departments JOIN Transcripts ON Departments.department_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Could you tell me the least transcript ID for every department description?",
        "gold_parse": "",
        "query": "SELECT department_description, MIN(transcript_id) FROM Departments JOIN Transcripts ON Departments.department_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Identify the minimum transcript ID for each department description.",
        "gold_parse": "",
        "query": "SELECT department_description, MIN(transcript_id) FROM Departments JOIN Transcripts ON Departments.department_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the lowest transcript ID for every department description?",
        "gold_parse": "",
        "query": "SELECT department_description, MIN(transcript_id) FROM Departments JOIN Transcripts ON Departments.department_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "question": "Please show the different statuses of cities and the average population of cities with each status.",
        "correctness": 1,
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "question": "Can you display the various city statuses and the mean population for each status?",
        "correctness": 1,
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "question": "Could you provide the different city statuses and their corresponding average populations?",
        "correctness": 1,
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "question": "I'd like to see the different statuses of cities along with the average population for each status.",
        "correctness": 1,
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "question": "Please list the different city statuses and the average population of cities under each status.",
        "correctness": 1,
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "question": "Can you show the different city statuses and the average population of cities for each status?",
        "correctness": 1,
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status"
    },
    {
        "db_id": "product_catalog",
        "question": "Find the names of catalog entries with level number 8.",
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the names of catalog entries that have a level number of 8?",
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Can you list the names of catalog entries where the level number is 8?",
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Show me the names of catalog entries with a level number equal to 8.",
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "I need to know the names of catalog entries that are at level number 8.",
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Provide the names of catalog entries that have 8 as their level number.",
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds = value",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "What is the name and country for the artist with most number of exhibitions?",
        "gold_parse": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name , Country FROM artist GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "Who is the artist with the highest number of exhibitions and what country are they from?",
        "gold_parse": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name , Country FROM artist GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "Can you tell me the name and country of the artist who has the most exhibitions?",
        "gold_parse": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name , Country FROM artist GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "What's the name and nationality of the artist with the most exhibitions?",
        "gold_parse": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name , Country FROM artist GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "I'd like to know the name and country of the artist with the most number of exhibitions.",
        "gold_parse": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name , Country FROM artist GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "Who is the artist with the most exhibitions and what is their country?",
        "gold_parse": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name , Country FROM artist GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job ids and dates of hire for employees hired after November 5th, 2007 and before July 5th, 2009?",
        "gold_parse": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "query": "SELECT T2.EMPLOYEE_ID , T1.MIN_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.FIRST_NAME = value AND T2.LAST_NAME > value AND T2.LAST_NAME < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you provide the job ids and hire dates for employees who were hired post November 5th, 2007 and prior to July 5th, 2009?",
        "gold_parse": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "query": "SELECT T2.EMPLOYEE_ID , T1.MIN_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.FIRST_NAME = value AND T2.LAST_NAME > value AND T2.LAST_NAME < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the hire dates and job ids for employees who joined after November 5th, 2007 but before July 5th, 2009?",
        "gold_parse": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "query": "SELECT T2.EMPLOYEE_ID , T1.MIN_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.FIRST_NAME = value AND T2.LAST_NAME > value AND T2.LAST_NAME < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Could you list the job ids and dates of hire for staff who were employed after the 5th of November, 2007 and before the 5th of July, 2009?",
        "gold_parse": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "query": "SELECT T2.EMPLOYEE_ID , T1.MIN_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.FIRST_NAME = value AND T2.LAST_NAME > value AND T2.LAST_NAME < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "I need the job ids and hiring dates for workers who were recruited after November 5th, 2007 and before July 5th, 2009.",
        "gold_parse": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "query": "SELECT T2.EMPLOYEE_ID , T1.MIN_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.FIRST_NAME = value AND T2.LAST_NAME > value AND T2.LAST_NAME < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Show me the job ids and dates of hire for employees who were brought on board after November 5th, 2007 and before July 5th, 2009.",
        "gold_parse": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "query": "SELECT T2.EMPLOYEE_ID , T1.MIN_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.FIRST_NAME = value AND T2.LAST_NAME > value AND T2.LAST_NAME < value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the IDs of properties that do not have any features?",
        "gold_parse": "",
        "query": "SELECT property_id FROM Properties EXCEPT SELECT feature_id FROM Other_Available_Features;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Can you list the IDs of properties that lack features?",
        "gold_parse": "",
        "query": "SELECT property_id FROM Properties EXCEPT SELECT feature_id FROM Other_Available_Features;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the IDs of properties without any features?",
        "gold_parse": "",
        "query": "SELECT property_id FROM Properties EXCEPT SELECT feature_id FROM Other_Available_Features;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Could you provide the IDs for properties that have no features?",
        "gold_parse": "",
        "query": "SELECT property_id FROM Properties EXCEPT SELECT feature_id FROM Other_Available_Features;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Identify the IDs of properties that are devoid of features.",
        "gold_parse": "",
        "query": "SELECT property_id FROM Properties EXCEPT SELECT feature_id FROM Other_Available_Features;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the property IDs that have zero features?",
        "gold_parse": "",
        "query": "SELECT property_id FROM Properties EXCEPT SELECT feature_id FROM Other_Available_Features;",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "How many artworks are there?",
        "gold_parse": "SELECT count(*) FROM artwork",
        "query": "SELECT Count ( * ) FROM festival_detail",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "What is the total count of artworks?",
        "gold_parse": "SELECT count(*) FROM artwork",
        "query": "SELECT Count ( * ) FROM festival_detail",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "Can you tell me the number of artworks?",
        "gold_parse": "SELECT count(*) FROM artwork",
        "query": "SELECT Count ( * ) FROM festival_detail",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "What's the total number of artworks?",
        "gold_parse": "SELECT count(*) FROM artwork",
        "query": "SELECT Count ( * ) FROM festival_detail",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "How many pieces of art are there?",
        "gold_parse": "SELECT count(*) FROM artwork",
        "query": "SELECT Count ( * ) FROM festival_detail",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "What is the quantity of artworks?",
        "gold_parse": "SELECT count(*) FROM artwork",
        "query": "SELECT Count ( * ) FROM festival_detail",
        "correctness": 0
    },
    {
        "db_id": "address_1",
        "query": "SELECT state ,  count(*) FROM City GROUP BY state",
        "question": "How many cities are in each state?",
        "correctness": 1,
        "gold_parse": "SELECT state ,  count(*) FROM City GROUP BY state"
    },
    {
        "db_id": "address_1",
        "query": "SELECT state ,  count(*) FROM City GROUP BY state",
        "question": "What is the count of cities in every state?",
        "correctness": 1,
        "gold_parse": "SELECT state ,  count(*) FROM City GROUP BY state"
    },
    {
        "db_id": "address_1",
        "query": "SELECT state ,  count(*) FROM City GROUP BY state",
        "question": "Can you tell me the number of cities in each state?",
        "correctness": 1,
        "gold_parse": "SELECT state ,  count(*) FROM City GROUP BY state"
    },
    {
        "db_id": "address_1",
        "query": "SELECT state ,  count(*) FROM City GROUP BY state",
        "question": "What's the total number of cities per state?",
        "correctness": 1,
        "gold_parse": "SELECT state ,  count(*) FROM City GROUP BY state"
    },
    {
        "db_id": "address_1",
        "query": "SELECT state ,  count(*) FROM City GROUP BY state",
        "question": "Could you provide the quantity of cities for each state?",
        "correctness": 1,
        "gold_parse": "SELECT state ,  count(*) FROM City GROUP BY state"
    },
    {
        "db_id": "address_1",
        "query": "SELECT state ,  count(*) FROM City GROUP BY state",
        "question": "How many cities does each state have?",
        "correctness": 1,
        "gold_parse": "SELECT state ,  count(*) FROM City GROUP BY state"
    },
    {
        "db_id": "match_season",
        "question": "What are the official languages of the countries of players from Maryland or Duke college?",
        "gold_parse": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
        "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = value OR T2.College = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the national languages of the countries where players from Maryland or Duke college come from?",
        "gold_parse": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
        "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = value OR T2.College = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Can you tell me the official languages of the countries of origin of players from Maryland or Duke college?",
        "gold_parse": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
        "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = value OR T2.College = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official languages spoken in the countries of players who attended Maryland or Duke college?",
        "gold_parse": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
        "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = value OR T2.College = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official languages of the countries where players from Maryland or Duke college were born?",
        "gold_parse": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
        "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = value OR T2.College = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official languages of the countries that players from Maryland or Duke college represent?",
        "gold_parse": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
        "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = value OR T2.College = value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT DISTINCT card_type_code FROM Customers_Cards",
        "question": "Show all card type codes.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT card_type_code FROM Customers_Cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT DISTINCT card_type_code FROM Customers_Cards",
        "question": "Display all the card type codes.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT card_type_code FROM Customers_Cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT DISTINCT card_type_code FROM Customers_Cards",
        "question": "Can you list all the card type codes?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT card_type_code FROM Customers_Cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT DISTINCT card_type_code FROM Customers_Cards",
        "question": "I want to see all card type codes.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT card_type_code FROM Customers_Cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT DISTINCT card_type_code FROM Customers_Cards",
        "question": "Provide a list of all card type codes.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT card_type_code FROM Customers_Cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT DISTINCT card_type_code FROM Customers_Cards",
        "question": "Reveal all card type codes.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT card_type_code FROM Customers_Cards"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum semester ID for each student?",
        "gold_parse": "",
        "query": "SELECT first_name, MAX(semester_id) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the highest semester ID for each student?",
        "gold_parse": "",
        "query": "SELECT first_name, MAX(semester_id) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Can you tell me the maximum semester ID for every student?",
        "gold_parse": "",
        "query": "SELECT first_name, MAX(semester_id) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What's the top semester ID for each student?",
        "gold_parse": "",
        "query": "SELECT first_name, MAX(semester_id) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Could you find the maximum semester ID for each student?",
        "gold_parse": "",
        "query": "SELECT first_name, MAX(semester_id) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the utmost semester ID assigned to each student?",
        "gold_parse": "",
        "query": "SELECT first_name, MAX(semester_id) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id;",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Which customers made orders between 2009-01-01 and 2010-01-01? Find their names.",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
        "query": "SELECT customer_name FROM Customers WHERE customer_details BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Can you list the names of customers who placed orders between 2009-01-01 and 2010-01-01?",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
        "query": "SELECT customer_name FROM Customers WHERE customer_details BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Who are the customers that made orders from 2009-01-01 to 2010-01-01?",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
        "query": "SELECT customer_name FROM Customers WHERE customer_details BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Identify the customers who ordered between the first day of 2009 and the first day of 2010.",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
        "query": "SELECT customer_name FROM Customers WHERE customer_details BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What are the names of the customers who made orders between the start of 2009 and the start of 2010?",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
        "query": "SELECT customer_name FROM Customers WHERE customer_details BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Between 2009-01-01 and 2010-01-01, which customers placed orders?",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
        "query": "SELECT customer_name FROM Customers WHERE customer_details BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT Position FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Which official native languages include the term 'English'?",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT Position FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Can you list the official native languages that have 'English' in them?",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT Position FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the native languages officially recognized that have 'English' in their names?",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT Position FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Identify the official native languages that contain the word 'English'.",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT Position FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show me the official native languages where 'English' appears in the name.",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT Position FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "When and in what zip code did max temperature reach 80?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code , min_humidity FROM weather WHERE min_visibility_miles > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "When and where did the maximum temperature hit 80 degrees in terms of zip code?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code , min_humidity FROM weather WHERE min_visibility_miles > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Can you tell me the date and zip code when the maximum temperature was 80?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code , min_humidity FROM weather WHERE min_visibility_miles > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "On what date and in which zip code did the temperature peak at 80?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code , min_humidity FROM weather WHERE min_visibility_miles > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "When and in which zip code did the temperature reach a maximum of 80?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code , min_humidity FROM weather WHERE min_visibility_miles > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What was the date and zip code when the highest temperature recorded was 80?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code , min_humidity FROM weather WHERE min_visibility_miles > value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What is all the product data, as well as  each product's manufacturer?",
        "gold_parse": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code",
        "query": "SELECT Revenue , Revenue FROM Manufacturers",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Can you provide all the information about the products and their manufacturers?",
        "gold_parse": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code",
        "query": "SELECT Revenue , Revenue FROM Manufacturers",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the details of each product and who manufactures them?",
        "gold_parse": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code",
        "query": "SELECT Revenue , Revenue FROM Manufacturers",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "I need all the data on the products and the companies that manufacture them.",
        "gold_parse": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code",
        "query": "SELECT Revenue , Revenue FROM Manufacturers",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Could you show me all the product data and the manufacturers of each product?",
        "gold_parse": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code",
        "query": "SELECT Revenue , Revenue FROM Manufacturers",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What is the complete data for each product and its respective manufacturer?",
        "gold_parse": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code",
        "query": "SELECT Revenue , Revenue FROM Manufacturers",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many employees who are IT staff are from each city?",
        "gold_parse": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
        "query": "SELECT city , Count ( * ) FROM employees GROUP BY city",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the count of IT staff employees from each city?",
        "gold_parse": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
        "query": "SELECT city , Count ( * ) FROM employees GROUP BY city",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Can you tell me the number of IT staff employees in each city?",
        "gold_parse": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
        "query": "SELECT city , Count ( * ) FROM employees GROUP BY city",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What's the total number of IT staff employees per city?",
        "gold_parse": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
        "query": "SELECT city , Count ( * ) FROM employees GROUP BY city",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many IT staff members are there in each city?",
        "gold_parse": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
        "query": "SELECT city , Count ( * ) FROM employees GROUP BY city",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Give me the count of IT staff employees from every city.",
        "gold_parse": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
        "query": "SELECT city , Count ( * ) FROM employees GROUP BY city",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "Find the details for all chip models.",
        "gold_parse": "SELECT * FROM chip_model",
        "query": "SELECT used_kb FROM screen_mode WHERE Type = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "Retrieve all information for chip models",
        "gold_parse": "SELECT * FROM chip_model",
        "query": "SELECT used_kb FROM screen_mode WHERE Type = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "Show me all the details of chip models",
        "gold_parse": "SELECT * FROM chip_model",
        "query": "SELECT used_kb FROM screen_mode WHERE Type = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "Can you provide all the details for each chip model?",
        "gold_parse": "SELECT * FROM chip_model",
        "query": "SELECT used_kb FROM screen_mode WHERE Type = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "I need to see all the details related to chip models",
        "gold_parse": "SELECT * FROM chip_model",
        "query": "SELECT used_kb FROM screen_mode WHERE Type = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "Display all the chip model details",
        "gold_parse": "SELECT * FROM chip_model",
        "query": "SELECT used_kb FROM screen_mode WHERE Type = value",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "query": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC",
        "question": "What are the themes of parties ordered by the number of hosts in ascending manner?",
        "correctness": 1,
        "gold_parse": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC",
        "question": "Can you list the party themes sorted by the number of hosts in ascending order?",
        "correctness": 1,
        "gold_parse": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC",
        "question": "What are the party themes arranged by the least to most hosts?",
        "correctness": 1,
        "gold_parse": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC",
        "question": "Could you provide the themes of parties sorted by the host count in ascending order?",
        "correctness": 1,
        "gold_parse": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC",
        "question": "What are the themes of parties when arranged in order of increasing number of hosts?",
        "correctness": 1,
        "gold_parse": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC",
        "question": "Can you show me the party themes in order of the smallest to largest number of hosts?",
        "correctness": 1,
        "gold_parse": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC"
    },
    {
        "db_id": "hospital_1",
        "question": "What is the employee id of the head whose department has the least number of employees?",
        "gold_parse": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1",
        "query": "SELECT T1.SSN FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Can you tell me the employee id of the department head with the smallest team?",
        "gold_parse": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1",
        "query": "SELECT T1.SSN FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What's the employee id of the manager whose department has the fewest employees?",
        "gold_parse": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1",
        "query": "SELECT T1.SSN FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Could you provide the employee id of the head of the department with the least staff?",
        "gold_parse": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1",
        "query": "SELECT T1.SSN FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the id of the employee who heads the department with the least number of workers?",
        "gold_parse": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1",
        "query": "SELECT T1.SSN FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Can you find the employee id of the leader of the department with the smallest number of employees?",
        "gold_parse": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1",
        "query": "SELECT T1.SSN FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
        "question": "How much amount in total were claimed in the most recently created document?",
        "correctness": 1,
        "gold_parse": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
        "question": "What is the total amount claimed in the latest document?",
        "correctness": 1,
        "gold_parse": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
        "question": "Can you tell me the total claim amount in the most recent document?",
        "correctness": 1,
        "gold_parse": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
        "question": "What's the sum of the amounts claimed in the most recently created document?",
        "correctness": 1,
        "gold_parse": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
        "question": "What is the aggregate of the amounts claimed in the newest document?",
        "correctness": 1,
        "gold_parse": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
        "question": "Could you find out the total claimed amount in the most recently made document?",
        "correctness": 1,
        "gold_parse": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5",
        "question": "Which membership card has more than 5 members?",
        "correctness": 1,
        "gold_parse": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5",
        "question": "Which membership card is associated with over 5 members?",
        "correctness": 1,
        "gold_parse": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5",
        "question": "Can you identify the membership card that has more than 5 members?",
        "correctness": 1,
        "gold_parse": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5",
        "question": "Which membership card includes more than 5 members?",
        "correctness": 1,
        "gold_parse": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5",
        "question": "What is the membership card that has over 5 members?",
        "correctness": 1,
        "gold_parse": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5",
        "question": "Can you tell me which membership card has in excess of 5 members?",
        "correctness": 1,
        "gold_parse": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5"
    },
    {
        "db_id": "driving_school",
        "question": "List the number of customers that did not have any payment history.",
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments )",
        "query": "SELECT Count ( * ) FROM Customers AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Lessons AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "Show the count of customers with no payment history.",
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments )",
        "query": "SELECT Count ( * ) FROM Customers AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Lessons AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "How many customers have no record of payments?",
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments )",
        "query": "SELECT Count ( * ) FROM Customers AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Lessons AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "What is the total number of customers without any payment history?",
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments )",
        "query": "SELECT Count ( * ) FROM Customers AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Lessons AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "Can you count the customers who have never made a payment?",
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments )",
        "query": "SELECT Count ( * ) FROM Customers AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Lessons AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "Provide the number of customers who don't have any payment history.",
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments )",
        "query": "SELECT Count ( * ) FROM Customers AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Lessons AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List all the subject names.",
        "gold_parse": "SELECT subject_name FROM SUBJECTS",
        "query": "SELECT login_name FROM Students",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Show all the names of the subjects",
        "gold_parse": "SELECT subject_name FROM SUBJECTS",
        "query": "SELECT login_name FROM Students",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Display all subject names",
        "gold_parse": "SELECT subject_name FROM SUBJECTS",
        "query": "SELECT login_name FROM Students",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Provide a list of all subject names",
        "gold_parse": "SELECT subject_name FROM SUBJECTS",
        "query": "SELECT login_name FROM Students",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Can you list all the subject names?",
        "gold_parse": "SELECT subject_name FROM SUBJECTS",
        "query": "SELECT login_name FROM Students",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "I want to see all the subject names",
        "gold_parse": "SELECT subject_name FROM SUBJECTS",
        "query": "SELECT login_name FROM Students",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "gold_parse": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "query": "select avg ( LifeExpectancy ) , sum ( LifeExpectancy ) from country where Continent < value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average life expectancy and total population for each continent where the average life expectancy is less than 72?",
        "gold_parse": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "query": "select avg ( LifeExpectancy ) , sum ( LifeExpectancy ) from country where Continent < value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Can you provide the average life expectancy and total population for continents where the average life expectancy is below 72?",
        "gold_parse": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "query": "select avg ( LifeExpectancy ) , sum ( LifeExpectancy ) from country where Continent < value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Show the average life expectancy and total population for each continent where the average life expectancy is under 72.",
        "gold_parse": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "query": "select avg ( LifeExpectancy ) , sum ( LifeExpectancy ) from country where Continent < value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Could you find the average life expectancy and total population for each continent where the average life expectancy is not more than 72?",
        "gold_parse": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "query": "select avg ( LifeExpectancy ) , sum ( LifeExpectancy ) from country where Continent < value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "I want to know the average life expectancy and total population for each continent where the average life expectancy is fewer than 72.",
        "gold_parse": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "query": "select avg ( LifeExpectancy ) , sum ( LifeExpectancy ) from country where Continent < value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the course with the most registered students?",
        "correctness": 1,
        "gold_parse": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which course has the highest number of registered students?",
        "correctness": 1,
        "gold_parse": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Can you tell me the course that has the most students registered?",
        "correctness": 1,
        "gold_parse": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What's the course with the maximum student registration?",
        "correctness": 1,
        "gold_parse": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Identify the course with the greatest number of students enrolled.",
        "correctness": 1,
        "gold_parse": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the title of the course that has the most enrollments?",
        "correctness": 1,
        "gold_parse": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "world_1",
        "question": "What are the names of European countries with many people?",
        "gold_parse": "",
        "query": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population > 'many'",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Can you list the names of populous European countries?",
        "gold_parse": "",
        "query": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population > 'many'",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the names of densely populated countries in Europe?",
        "gold_parse": "",
        "query": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population > 'many'",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which European countries have a high population?",
        "gold_parse": "",
        "query": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population > 'many'",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Could you tell me the names of European countries with a large population?",
        "gold_parse": "",
        "query": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population > 'many'",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the names of the European countries that are heavily populated?",
        "gold_parse": "",
        "query": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population > 'many'",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
        "question": "How many accounts have a savings balance above the average savings balance?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
        "question": "What is the count of accounts with a savings balance exceeding the average savings balance?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
        "question": "Can you tell me the number of accounts where the savings balance is more than the average?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
        "question": "How many accounts are there where the savings balance is higher than the average?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
        "question": "What's the number of accounts with a savings balance that's above the average?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
        "question": "Can you count the accounts that have a savings balance greater than the average savings balance?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)"
    },
    {
        "db_id": "network_1",
        "question": "Show the names of highschoolers and the count of their occurrences.",
        "gold_parse": "",
        "query": "SELECT name, COUNT(*) FROM Highschooler;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Display the names of high school students along with their frequency of occurrence.",
        "gold_parse": "",
        "query": "SELECT name, COUNT(*) FROM Highschooler;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Can you list the names of highschoolers and how many times they appear?",
        "gold_parse": "",
        "query": "SELECT name, COUNT(*) FROM Highschooler;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Show me the count of each highschooler's name.",
        "gold_parse": "",
        "query": "SELECT name, COUNT(*) FROM Highschooler;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "I want to see the names of highschoolers and their respective counts.",
        "gold_parse": "",
        "query": "SELECT name, COUNT(*) FROM Highschooler;",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Provide the names of highschoolers and the number of times they occur.",
        "gold_parse": "",
        "query": "SELECT name, COUNT(*) FROM Highschooler;",
        "correctness": 0
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT DISTINCT Manager FROM branch",
        "question": "Who are the distinct managers of branches?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Manager FROM branch"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT DISTINCT Manager FROM branch",
        "question": "Can you list the unique managers for each branch?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Manager FROM branch"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT DISTINCT Manager FROM branch",
        "question": "Who are the different branch managers?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Manager FROM branch"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT DISTINCT Manager FROM branch",
        "question": "Could you tell me the distinct individuals managing the branches?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Manager FROM branch"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT DISTINCT Manager FROM branch",
        "question": "Who are the managers of each branch, without any repetition?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Manager FROM branch"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT DISTINCT Manager FROM branch",
        "question": "Identify the unique managers of all branches.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Manager FROM branch"
    },
    {
        "db_id": "shop_membership",
        "question": "Show the member name and hometown who registered a branch in 2016.",
        "gold_parse": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016",
        "query": "SELECT T1.Name , T1.Hometown FROM member AS T1 JOIN branch AS T2 JOIN membership_register_branch AS T3 ON T1.Member_ID = T3.Member_ID AND T3.Branch_ID = T2.Branch_ID WHERE T2.Open_year = value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Display the name and hometown of the member who registered a branch in 2016.",
        "gold_parse": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016",
        "query": "SELECT T1.Name , T1.Hometown FROM member AS T1 JOIN branch AS T2 JOIN membership_register_branch AS T3 ON T1.Member_ID = T3.Member_ID AND T3.Branch_ID = T2.Branch_ID WHERE T2.Open_year = value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Can you list the member name and hometown for those who registered a branch in 2016?",
        "gold_parse": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016",
        "query": "SELECT T1.Name , T1.Hometown FROM member AS T1 JOIN branch AS T2 JOIN membership_register_branch AS T3 ON T1.Member_ID = T3.Member_ID AND T3.Branch_ID = T2.Branch_ID WHERE T2.Open_year = value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Who are the members along with their hometowns that registered a branch in 2016?",
        "gold_parse": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016",
        "query": "SELECT T1.Name , T1.Hometown FROM member AS T1 JOIN branch AS T2 JOIN membership_register_branch AS T3 ON T1.Member_ID = T3.Member_ID AND T3.Branch_ID = T2.Branch_ID WHERE T2.Open_year = value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "I want to see the member name and hometown of those who registered a branch in 2016.",
        "gold_parse": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016",
        "query": "SELECT T1.Name , T1.Hometown FROM member AS T1 JOIN branch AS T2 JOIN membership_register_branch AS T3 ON T1.Member_ID = T3.Member_ID AND T3.Branch_ID = T2.Branch_ID WHERE T2.Open_year = value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Provide the member name and hometown of individuals who registered a branch in 2016.",
        "gold_parse": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016",
        "query": "SELECT T1.Name , T1.Hometown FROM member AS T1 JOIN branch AS T2 JOIN membership_register_branch AS T3 ON T1.Member_ID = T3.Member_ID AND T3.Branch_ID = T2.Branch_ID WHERE T2.Open_year = value",
        "correctness": 0
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id",
        "question": "List all the pairs of buyer first names and product names.",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id",
        "question": "Show all the combinations of buyer first names and product names.",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id",
        "question": "Display all the pairs of product names and buyer first names.",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id",
        "question": "Provide a list of all buyer first names paired with product names.",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id",
        "question": "Can you list all the buyer first names along with the product names?",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id",
        "question": "I want to see all the pairs of buyer first names and the names of the products they bought.",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id"
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , min_temperature_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Can you provide the date, average temperature, and average humidity for the three days with the highest maximum gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , min_temperature_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What were the date, mean temperature, and mean humidity on the three days with the greatest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , min_temperature_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Could you tell me the date, mean temperature, and mean humidity for the three days with the most intense max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , min_temperature_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "I'd like to know the date, mean temperature, and mean humidity for the top three days with the strongest max gust speeds.",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , min_temperature_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the date, mean temperature, and mean humidity for the three days with the peak max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , min_temperature_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "What is the zip code of the address where the teacher with first name \"Lyla\" lives?",
        "gold_parse": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"Lyla\"",
        "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = value",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "What's the postal code for the residence of the teacher named 'Lyla'?",
        "gold_parse": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"Lyla\"",
        "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = value",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "Can you tell me the zip code for the teacher 'Lyla's' home address?",
        "gold_parse": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"Lyla\"",
        "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = value",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "What is the postal code of the place where the teacher 'Lyla' resides?",
        "gold_parse": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"Lyla\"",
        "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = value",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "Could you provide the zip code of the location where the teacher called 'Lyla' lives?",
        "gold_parse": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"Lyla\"",
        "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = value",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "What is the zip code of the dwelling place of the teacher who goes by the name 'Lyla'?",
        "gold_parse": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"Lyla\"",
        "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the customer name and date of the orders that have the status \"Delivered\".",
        "gold_parse": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"",
        "query": "SELECT T1.customer_name , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Identify the customer name and order date for orders marked as 'Delivered'.",
        "gold_parse": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"",
        "query": "SELECT T1.customer_name , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Can you provide the names of customers and the dates of their orders that have been 'Delivered'?",
        "gold_parse": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"",
        "query": "SELECT T1.customer_name , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the names of customers and dates of orders that have a 'Delivered' status?",
        "gold_parse": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"",
        "query": "SELECT T1.customer_name , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Show me the customer names and order dates for all 'Delivered' orders.",
        "gold_parse": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"",
        "query": "SELECT T1.customer_name , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "I need to know the customer names and dates of orders that have been delivered.",
        "gold_parse": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"",
        "query": "SELECT T1.customer_name , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = value",
        "correctness": 0
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
        "question": "What is the receipt number and date of the receipt in which the most expensive item was bought?",
        "correctness": 1,
        "gold_parse": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
        "question": "Can you tell me the receipt number and date when the highest priced item was purchased?",
        "correctness": 1,
        "gold_parse": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
        "question": "What are the receipt number and date for the purchase of the most costly item?",
        "correctness": 1,
        "gold_parse": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
        "question": "Could you provide the receipt number and date for the transaction involving the most expensive item?",
        "correctness": 1,
        "gold_parse": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
        "question": "I need the receipt number and date for the purchase of the priciest item. Can you provide that?",
        "correctness": 1,
        "gold_parse": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
        "question": "What's the receipt number and date of the transaction where the most expensive item was bought?",
        "correctness": 1,
        "gold_parse": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1"
    },
    {
        "db_id": "geography",
        "question": "List states where no city has a population of less than 200,000.",
        "gold_parse": "",
        "query": "SELECT state_name, MIN(population) AS min_pop FROM city GROUP BY state_name HAVING min_pop > 200000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Enumerate the states where every city has a population of more than 200,000.",
        "gold_parse": "",
        "query": "SELECT state_name, MIN(population) AS min_pop FROM city GROUP BY state_name HAVING min_pop > 200000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Can you provide a list of states where all cities have a population exceeding 200,000?",
        "gold_parse": "",
        "query": "SELECT state_name, MIN(population) AS min_pop FROM city GROUP BY state_name HAVING min_pop > 200000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which states have no city with a population less than 200,000?",
        "gold_parse": "",
        "query": "SELECT state_name, MIN(population) AS min_pop FROM city GROUP BY state_name HAVING min_pop > 200000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Identify the states in which each city has a population greater than 200,000.",
        "gold_parse": "",
        "query": "SELECT state_name, MIN(population) AS min_pop FROM city GROUP BY state_name HAVING min_pop > 200000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the states where none of the cities have a population below 200,000?",
        "gold_parse": "",
        "query": "SELECT state_name, MIN(population) AS min_pop FROM city GROUP BY state_name HAVING min_pop > 200000;",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the last names of students in room 111?",
        "gold_parse": "SELECT lastname FROM list WHERE classroom  =  111",
        "query": "SELECT LastName FROM teachers WHERE Classroom = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Can you tell me the surnames of students in room 111?",
        "gold_parse": "SELECT lastname FROM list WHERE classroom  =  111",
        "query": "SELECT LastName FROM teachers WHERE Classroom = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the students' last names in room 111?",
        "gold_parse": "SELECT lastname FROM list WHERE classroom  =  111",
        "query": "SELECT LastName FROM teachers WHERE Classroom = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Could you list the last names of students in room 111?",
        "gold_parse": "SELECT lastname FROM list WHERE classroom  =  111",
        "query": "SELECT LastName FROM teachers WHERE Classroom = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "I'd like to know the last names of students in room 111.",
        "gold_parse": "SELECT lastname FROM list WHERE classroom  =  111",
        "query": "SELECT LastName FROM teachers WHERE Classroom = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the family names of students who are in room 111?",
        "gold_parse": "SELECT lastname FROM list WHERE classroom  =  111",
        "query": "SELECT LastName FROM teachers WHERE Classroom = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "question": "Show the flight number and distance of the flight with maximum price.",
        "correctness": 1,
        "gold_parse": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "question": "Display the flight number and distance for the flight that has the highest price.",
        "correctness": 1,
        "gold_parse": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "question": "Can you provide the flight number and distance for the most expensive flight?",
        "correctness": 1,
        "gold_parse": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "question": "What is the flight number and distance of the flight that costs the most?",
        "correctness": 1,
        "gold_parse": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "question": "I want to see the flight number and distance of the flight with the highest price.",
        "correctness": 1,
        "gold_parse": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "question": "Could you show me the flight number and distance of the flight that is priced the highest?",
        "correctness": 1,
        "gold_parse": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000",
        "question": "Which mountains are taller than 3000 meters?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000",
        "question": "Can you list the mountains that are higher than 3000 meters?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000",
        "question": "What are the mountains that exceed 3000 meters in height?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000",
        "question": "Identify the mountains with an elevation greater than 3000 meters.",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000",
        "question": "Which mountains have a height of more than 3000 meters?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000",
        "question": "Show me the mountains that are over 3000 meters tall.",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000"
    },
    {
        "db_id": "election",
        "query": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "question": "Show the lieutenant governor and comptroller from the democratic party.",
        "correctness": 1,
        "gold_parse": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\""
    },
    {
        "db_id": "election",
        "query": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "question": "Display the lieutenant governor and comptroller who are part of the democratic party.",
        "correctness": 1,
        "gold_parse": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\""
    },
    {
        "db_id": "election",
        "query": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "question": "Can you show me the democratic party's lieutenant governor and comptroller?",
        "correctness": 1,
        "gold_parse": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\""
    },
    {
        "db_id": "election",
        "query": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "question": "Who are the lieutenant governor and comptroller from the democratic party?",
        "correctness": 1,
        "gold_parse": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\""
    },
    {
        "db_id": "election",
        "query": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "question": "I'd like to see the lieutenant governor and comptroller from the democratic party.",
        "correctness": 1,
        "gold_parse": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\""
    },
    {
        "db_id": "election",
        "query": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "question": "Could you provide the lieutenant governor and comptroller from the democratic party?",
        "correctness": 1,
        "gold_parse": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT count(*) FROM inst",
        "question": "How many institutions are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM inst"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT count(*) FROM inst",
        "question": "What is the total number of institutions?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM inst"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT count(*) FROM inst",
        "question": "Can you count the number of institutions?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM inst"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT count(*) FROM inst",
        "question": "What's the count of institutions?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM inst"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT count(*) FROM inst",
        "question": "How many institutions exist?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM inst"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT count(*) FROM inst",
        "question": "Tell me the total number of institutions",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM inst"
    },
    {
        "db_id": "flight_1",
        "question": "What is the id and name of the aircraft that can cover the maximum distance?",
        "gold_parse": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "query": "SELECT aid , name FROM aircraft",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Can you provide the id and name of the aircraft with the longest range?",
        "gold_parse": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "query": "SELECT aid , name FROM aircraft",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Which aircraft has the maximum range and what is its id and name?",
        "gold_parse": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "query": "SELECT aid , name FROM aircraft",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the id and name of the aircraft that can fly the furthest?",
        "gold_parse": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "query": "SELECT aid , name FROM aircraft",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Could you tell me the id and name of the aircraft that has the highest distance coverage?",
        "gold_parse": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "query": "SELECT aid , name FROM aircraft",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "I'd like to know the id and name of the aircraft that can travel the longest distance.",
        "gold_parse": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "query": "SELECT aid , name FROM aircraft",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the titles of films that include 'Deleted Scenes' in their special feature section.",
        "gold_parse": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "query": "SELECT title FROM film WHERE title LIKE value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Show me the titles of movies that have 'Deleted Scenes' listed in their special features.",
        "gold_parse": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "query": "SELECT title FROM film WHERE title LIKE value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What are the titles of films that feature 'Deleted Scenes' in their special features?",
        "gold_parse": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "query": "SELECT title FROM film WHERE title LIKE value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Can you list the movie titles that include 'Deleted Scenes' in their special features?",
        "gold_parse": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "query": "SELECT title FROM film WHERE title LIKE value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "I want to know the titles of films that have 'Deleted Scenes' in their special features.",
        "gold_parse": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "query": "SELECT title FROM film WHERE title LIKE value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Find the titles of films that contain 'Deleted Scenes' in their special features.",
        "gold_parse": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "query": "SELECT title FROM film WHERE title LIKE value",
        "correctness": 0
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "Find the type of contents that are not in the warehouses located at New York.",
        "correctness": 1,
        "gold_parse": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "Identify the kind of items not stored in the New York warehouses.",
        "correctness": 1,
        "gold_parse": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "What types of contents are absent in the warehouses situated in New York?",
        "correctness": 1,
        "gold_parse": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "Can you list the content types that are not present in the New York-based warehouses?",
        "correctness": 1,
        "gold_parse": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "What are the types of contents that aren't in the warehouses in New York?",
        "correctness": 1,
        "gold_parse": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "Determine the content types not found in the warehouses located in New York.",
        "correctness": 1,
        "gold_parse": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "question": "What is the name of the race held most recently?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM races ORDER BY date DESC LIMIT 1"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "question": "What's the title of the most recent race?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM races ORDER BY date DESC LIMIT 1"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "question": "Can you tell me the name of the latest race?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM races ORDER BY date DESC LIMIT 1"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "question": "What is the most recent race called?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM races ORDER BY date DESC LIMIT 1"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "question": "Do you know the name of the race that was held last?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM races ORDER BY date DESC LIMIT 1"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "question": "What was the name of the most recently held race?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM races ORDER BY date DESC LIMIT 1"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;",
        "question": "How many poker players are there from each nationality?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;",
        "question": "What is the count of poker players from each country?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;",
        "question": "Can you tell me the number of poker players per nationality?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;",
        "question": "What's the total number of poker players by nationality?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;",
        "question": "How many poker players are there in each country?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;",
        "question": "What is the distribution of poker players based on nationality?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;"
    },
    {
        "db_id": "college_2",
        "question": "What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query": "SELECT T1.sec_id FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year ! = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Can you list the course ids that were available in Fall 2009 but not in Spring 2010?",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query": "SELECT T1.sec_id FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year ! = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Which course ids were offered in the Fall semester of 2009 but not in the Spring semester of 2010?",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query": "SELECT T1.sec_id FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year ! = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the course ids for classes that were offered in Fall 2009 but not Spring 2010?",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query": "SELECT T1.sec_id FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year ! = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Could you provide the ids of the courses that were given in Fall 2009 but not in Spring 2010?",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query": "SELECT T1.sec_id FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year ! = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Identify the course ids that were offered in the Fall of 2009 but were not available in the Spring of 2010.",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query": "SELECT T1.sec_id FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year ! = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of the physicians who have 'senior' in their titles.",
        "gold_parse": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "query": "SELECT Name FROM Physician WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Can you list the names of doctors with 'senior' in their titles?",
        "gold_parse": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "query": "SELECT Name FROM Physician WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Who are the physicians that have 'senior' included in their titles?",
        "gold_parse": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "query": "SELECT Name FROM Physician WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Could you provide the names of the physicians with 'senior' in their titles?",
        "gold_parse": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "query": "SELECT Name FROM Physician WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Identify the physicians who have 'senior' in their titles.",
        "gold_parse": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "query": "SELECT Name FROM Physician WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of the doctors who hold 'senior' titles?",
        "gold_parse": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "query": "SELECT Name FROM Physician WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "car_racing",
        "query": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1",
        "question": "Which make has more than one team?",
        "correctness": 1,
        "gold_parse": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1",
        "question": "Which manufacturer sponsors more than one team?",
        "correctness": 1,
        "gold_parse": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1",
        "question": "Can you tell me which brand supports multiple teams?",
        "correctness": 1,
        "gold_parse": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1",
        "question": "Which make is associated with more than a single team?",
        "correctness": 1,
        "gold_parse": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1",
        "question": "Identify the make that has over one team.",
        "correctness": 1,
        "gold_parse": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1",
        "question": "Which make is linked with more than one team?",
        "correctness": 1,
        "gold_parse": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000",
        "question": "What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000",
        "question": "Can you list all the movies that were produced post 2000 or critiqued by Brittany Harris?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000",
        "question": "Which movies were either created after the year 2000 or had reviews from Brittany Harris?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000",
        "question": "What are the titles of movies that were either made after the year 2000 or reviewed by Brittany Harris?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000",
        "question": "Could you tell me the names of all films that were either produced after 2000 or reviewed by Brittany Harris?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000",
        "question": "I'd like to know the names of all movies that were made after the year 2000 or had reviews by Brittany Harris.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000"
    },
    {
        "db_id": "document_management",
        "question": "Find the average access counts of documents with functional area \"Acknowledgement\".",
        "gold_parse": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"",
        "query": "SELECT Avg ( T2.access_count ) FROM Functional_Areas AS T1 JOIN Documents AS T2 JOIN Document_Functional_Areas AS T3 ON T1.functional_area_code = T3.functional_area_code AND T3.document_code = T2.document_code WHERE T1.parent_functional_area_code = value",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the average access count for documents in the 'Acknowledgement' functional area?",
        "gold_parse": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"",
        "query": "SELECT Avg ( T2.access_count ) FROM Functional_Areas AS T1 JOIN Documents AS T2 JOIN Document_Functional_Areas AS T3 ON T1.functional_area_code = T3.functional_area_code AND T3.document_code = T2.document_code WHERE T1.parent_functional_area_code = value",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Can you determine the mean access counts for documents under the 'Acknowledgement' functional area?",
        "gold_parse": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"",
        "query": "SELECT Avg ( T2.access_count ) FROM Functional_Areas AS T1 JOIN Documents AS T2 JOIN Document_Functional_Areas AS T3 ON T1.functional_area_code = T3.functional_area_code AND T3.document_code = T2.document_code WHERE T1.parent_functional_area_code = value",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What's the average number of accesses for documents in the 'Acknowledgement' functional area?",
        "gold_parse": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"",
        "query": "SELECT Avg ( T2.access_count ) FROM Functional_Areas AS T1 JOIN Documents AS T2 JOIN Document_Functional_Areas AS T3 ON T1.functional_area_code = T3.functional_area_code AND T3.document_code = T2.document_code WHERE T1.parent_functional_area_code = value",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Could you find the average access counts for documents categorized under 'Acknowledgement'?",
        "gold_parse": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"",
        "query": "SELECT Avg ( T2.access_count ) FROM Functional_Areas AS T1 JOIN Documents AS T2 JOIN Document_Functional_Areas AS T3 ON T1.functional_area_code = T3.functional_area_code AND T3.document_code = T2.document_code WHERE T1.parent_functional_area_code = value",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the mean access count for documents within the 'Acknowledgement' functional area?",
        "gold_parse": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"",
        "query": "SELECT Avg ( T2.access_count ) FROM Functional_Areas AS T1 JOIN Documents AS T2 JOIN Document_Functional_Areas AS T3 ON T1.functional_area_code = T3.functional_area_code AND T3.document_code = T2.document_code WHERE T1.parent_functional_area_code = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Return all the apartment numbers sorted by the room count in ascending order.",
        "gold_parse": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
        "query": "SELECT apt_number FROM Apartments ORDER BY bathroom_count Asc",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show all the apartment numbers in order of increasing room count.",
        "gold_parse": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
        "query": "SELECT apt_number FROM Apartments ORDER BY bathroom_count Asc",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "List all the apartment numbers, sorted by the number of rooms from least to most.",
        "gold_parse": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
        "query": "SELECT apt_number FROM Apartments ORDER BY bathroom_count Asc",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Can you provide all the apartment numbers, arranged by the room count in ascending order?",
        "gold_parse": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
        "query": "SELECT apt_number FROM Apartments ORDER BY bathroom_count Asc",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "I want to see all the apartment numbers, sorted by the room count from smallest to largest.",
        "gold_parse": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
        "query": "SELECT apt_number FROM Apartments ORDER BY bathroom_count Asc",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Display all the apartment numbers, ordered by the room count in an ascending manner.",
        "gold_parse": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
        "query": "SELECT apt_number FROM Apartments ORDER BY bathroom_count Asc",
        "correctness": 0
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)",
        "question": "What are the headphone models that cost less than the average price?",
        "correctness": 1,
        "gold_parse": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)",
        "question": "Which headphone models are priced below the average?",
        "correctness": 1,
        "gold_parse": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)",
        "question": "Can you list the headphone models that are cheaper than the average price?",
        "correctness": 1,
        "gold_parse": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)",
        "question": "What are the models of headphones that are less expensive than the average?",
        "correctness": 1,
        "gold_parse": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)",
        "question": "Could you tell me the headphone models that have a price lower than the average?",
        "correctness": 1,
        "gold_parse": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)",
        "question": "Identify the headphone models that are priced less than the average cost.",
        "correctness": 1,
        "gold_parse": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)"
    },
    {
        "db_id": "singer",
        "question": "Sum the birth years of singers with songs having sales greater than 5000.",
        "gold_parse": "",
        "query": "SELECT Citizenship, SUM(Birth_Year) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 5000;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Calculate the total of birth years for singers whose songs have sold more than 5000 copies.",
        "gold_parse": "",
        "query": "SELECT Citizenship, SUM(Birth_Year) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 5000;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What is the sum of the birth years of singers who have songs with over 5000 sales?",
        "gold_parse": "",
        "query": "SELECT Citizenship, SUM(Birth_Year) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 5000;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the total of the birth years for singers with songs that have exceeded 5000 in sales.",
        "gold_parse": "",
        "query": "SELECT Citizenship, SUM(Birth_Year) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 5000;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Compute the sum of birth years for singers whose songs have more than 5000 sales.",
        "gold_parse": "",
        "query": "SELECT Citizenship, SUM(Birth_Year) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 5000;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Determine the total birth years of singers with songs that have sold in excess of 5000 copies.",
        "gold_parse": "",
        "query": "SELECT Citizenship, SUM(Birth_Year) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 5000;",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts",
        "question": "What are the ids, date opened, name, and other details for all accounts?",
        "correctness": 1,
        "gold_parse": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts",
        "question": "Can you provide the ids, date opened, name, and other details for all accounts?",
        "correctness": 1,
        "gold_parse": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts",
        "question": "Could you list the ids, date opened, name, and other details for all accounts?",
        "correctness": 1,
        "gold_parse": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts",
        "question": "I need the ids, date opened, name, and other details for all accounts.",
        "correctness": 1,
        "gold_parse": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts",
        "question": "Show me the ids, date opened, name, and other details for all accounts.",
        "correctness": 1,
        "gold_parse": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts",
        "question": "What's the ids, date opened, name, and other details for all accounts?",
        "correctness": 1,
        "gold_parse": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the checking and savings balances in accounts belonging to Brown?",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "query": "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the balances for checking and savings accounts owned by Brown?",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "query": "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Can you tell me the checking and savings account balances for Brown?",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "query": "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What's the balance in Brown's checking and savings accounts?",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "query": "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Could you provide the balances for Brown's checking and savings accounts?",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "query": "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the amounts in the checking and savings accounts for Brown?",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "query": "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);",
        "question": "What are the names of the shortest poker players?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);",
        "question": "Who are the poker players with the shortest height?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);",
        "question": "Can you list the names of the shortest poker players?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);",
        "question": "Identify the shortest poker players by name.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);",
        "question": "Who are the shortest individuals in poker?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);",
        "question": "Give me the names of the shortest poker players.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);"
    },
    {
        "db_id": "store_product",
        "question": "What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?",
        "gold_parse": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5",
        "query": "SELECT product FROM product WHERE dpi > value OR dpi < value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "Which products have the largest page size of A4 or a color pages per minute less than 5?",
        "gold_parse": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5",
        "query": "SELECT product FROM product WHERE dpi > value OR dpi < value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "Can you list the products that have a maximum page size of A4 or a color pages per minute under 5?",
        "gold_parse": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5",
        "query": "SELECT product FROM product WHERE dpi > value OR dpi < value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "Show me the products that have an A4 as the maximum page size or a color pages per minute of less than 5",
        "gold_parse": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5",
        "query": "SELECT product FROM product WHERE dpi > value OR dpi < value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "I'm looking for products with a maximum page size of A4 or a color pages per minute less than 5",
        "gold_parse": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5",
        "query": "SELECT product FROM product WHERE dpi > value OR dpi < value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "What are the products that have a maximum page size equal to A4 or a color pages per minute lower than 5?",
        "gold_parse": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5",
        "query": "SELECT product FROM product WHERE dpi > value OR dpi < value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What is the day Number and date of all the documents?",
        "gold_parse": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date",
        "query": "SELECT T1.Day_Number , T2.Actual_Destruction_Date FROM Ref_Calendar AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Calendar_Date = T2.Planned_Destruction_Date",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Can you provide the day number and date for all documents?",
        "gold_parse": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date",
        "query": "SELECT T1.Day_Number , T2.Actual_Destruction_Date FROM Ref_Calendar AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Calendar_Date = T2.Planned_Destruction_Date",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the day numbers and dates associated with all documents?",
        "gold_parse": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date",
        "query": "SELECT T1.Day_Number , T2.Actual_Destruction_Date FROM Ref_Calendar AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Calendar_Date = T2.Planned_Destruction_Date",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Could you list the day number and date of every document?",
        "gold_parse": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date",
        "query": "SELECT T1.Day_Number , T2.Actual_Destruction_Date FROM Ref_Calendar AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Calendar_Date = T2.Planned_Destruction_Date",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "I need to know the day number and date for all documents, can you provide that?",
        "gold_parse": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date",
        "query": "SELECT T1.Day_Number , T2.Actual_Destruction_Date FROM Ref_Calendar AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Calendar_Date = T2.Planned_Destruction_Date",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What's the day number and date for each document?",
        "gold_parse": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date",
        "query": "SELECT T1.Day_Number , T2.Actual_Destruction_Date FROM Ref_Calendar AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Calendar_Date = T2.Planned_Destruction_Date",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.AirportName, T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport;",
        "question": "Show the names of source airports and their flight numbers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.AirportName, T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.AirportName, T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport;",
        "question": "Display the names of origin airports along with their flight numbers",
        "correctness": 1,
        "gold_parse": "SELECT T1.AirportName, T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.AirportName, T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport;",
        "question": "Can you list the source airports and their corresponding flight numbers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.AirportName, T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.AirportName, T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport;",
        "question": "I want to see the names of the source airports and their flight numbers",
        "correctness": 1,
        "gold_parse": "SELECT T1.AirportName, T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.AirportName, T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport;",
        "question": "Provide the names of the source airports and their flight numbers",
        "correctness": 1,
        "gold_parse": "SELECT T1.AirportName, T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.AirportName, T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport;",
        "question": "What are the names of the source airports and their respective flight numbers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.AirportName, T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;",
        "question": "Give the feature name and description for the most common feature across all properties.",
        "correctness": 1,
        "gold_parse": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;",
        "question": "What is the name and description of the most frequently occurring feature across all properties?",
        "correctness": 1,
        "gold_parse": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;",
        "question": "Can you provide the feature name and description for the feature that appears most often in all properties?",
        "correctness": 1,
        "gold_parse": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;",
        "question": "What's the most common feature's name and description across all properties?",
        "correctness": 1,
        "gold_parse": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;",
        "question": "Identify the feature name and description for the most prevalent feature across all properties.",
        "correctness": 1,
        "gold_parse": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;",
        "question": "Could you tell me the name and description of the feature that is most common across all properties?",
        "correctness": 1,
        "gold_parse": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title, release_year FROM movie ORDER BY release_year DESC;",
        "question": "What are the titles and release years of movies ordered by release year in descending order?",
        "correctness": 1,
        "gold_parse": "SELECT title, release_year FROM movie ORDER BY release_year DESC;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title, release_year FROM movie ORDER BY release_year DESC;",
        "question": "Can you list the movie titles and their release years in descending order of the year?",
        "correctness": 1,
        "gold_parse": "SELECT title, release_year FROM movie ORDER BY release_year DESC;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title, release_year FROM movie ORDER BY release_year DESC;",
        "question": "What are the names and release years of films sorted by year in reverse order?",
        "correctness": 1,
        "gold_parse": "SELECT title, release_year FROM movie ORDER BY release_year DESC;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title, release_year FROM movie ORDER BY release_year DESC;",
        "question": "Could you provide the titles and years of release for movies, sorted from newest to oldest?",
        "correctness": 1,
        "gold_parse": "SELECT title, release_year FROM movie ORDER BY release_year DESC;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title, release_year FROM movie ORDER BY release_year DESC;",
        "question": "Show me the movie titles along with their release years, arranged from the most recent year.",
        "correctness": 1,
        "gold_parse": "SELECT title, release_year FROM movie ORDER BY release_year DESC;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title, release_year FROM movie ORDER BY release_year DESC;",
        "question": "I'd like to see the titles and release years of movies, ordered from the latest to the earliest year.",
        "correctness": 1,
        "gold_parse": "SELECT title, release_year FROM movie ORDER BY release_year DESC;"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Name FROM climber ORDER BY Points DESC",
        "question": "List the names of climbers in descending order of points.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM climber ORDER BY Points DESC"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Name FROM climber ORDER BY Points DESC",
        "question": "Show me the names of climbers sorted by points in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM climber ORDER BY Points DESC"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Name FROM climber ORDER BY Points DESC",
        "question": "Can you provide the names of climbers ordered by points from highest to lowest?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM climber ORDER BY Points DESC"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Name FROM climber ORDER BY Points DESC",
        "question": "I want to see the climbers' names in order of their points, highest first.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM climber ORDER BY Points DESC"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Name FROM climber ORDER BY Points DESC",
        "question": "Display the climbers' names in decreasing order of their points.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM climber ORDER BY Points DESC"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Name FROM climber ORDER BY Points DESC",
        "question": "Could you list the climbers by their points, starting with the highest?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM climber ORDER BY Points DESC"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "question": "What are the name and level of catalog structure with level number between 5 and 10",
        "correctness": 1,
        "gold_parse": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "question": "Can you provide the name and level of catalog structure that have a level number ranging from 5 to 10?",
        "correctness": 1,
        "gold_parse": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "question": "What's the name and level of the catalog structure where the level number is between 5 and 10?",
        "correctness": 1,
        "gold_parse": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "question": "Could you list the name and level of catalog structure with a level number from 5 to 10?",
        "correctness": 1,
        "gold_parse": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "question": "I need the name and level of catalog structure where the level number falls between 5 and 10. Can you get that?",
        "correctness": 1,
        "gold_parse": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "question": "Can I get the name and level of catalog structure that have a level number between 5 and 10?",
        "correctness": 1,
        "gold_parse": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "question": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "question": "What are the names of catalog entries with a length less than 3 or greater than 5?",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "question": "Can you list the catalog entries that have a length either below 3 or exceeding 5?",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "question": "Identify the catalog contents with a length that is either under 3 or over 5.",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "question": "Show me the catalog entries where the length is either less than 3 or more than 5.",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "question": "Which entries in the catalog have a length that falls below 3 or rises above 5?",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Player ,  Years_Played FROM player",
        "question": "Who are the different players and how many years has each played?",
        "correctness": 1,
        "gold_parse": "SELECT Player ,  Years_Played FROM player"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Player ,  Years_Played FROM player",
        "question": "Can you list the distinct players and their respective years of play?",
        "correctness": 1,
        "gold_parse": "SELECT Player ,  Years_Played FROM player"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Player ,  Years_Played FROM player",
        "question": "Who are the unique players and what is the duration of their play?",
        "correctness": 1,
        "gold_parse": "SELECT Player ,  Years_Played FROM player"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Player ,  Years_Played FROM player",
        "question": "Identify the different players and the number of years they have played.",
        "correctness": 1,
        "gold_parse": "SELECT Player ,  Years_Played FROM player"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Player ,  Years_Played FROM player",
        "question": "What are the names of the players and how many years have they been playing?",
        "correctness": 1,
        "gold_parse": "SELECT Player ,  Years_Played FROM player"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Player ,  Years_Played FROM player",
        "question": "Could you tell me the different players and the length of their playing career?",
        "correctness": 1,
        "gold_parse": "SELECT Player ,  Years_Played FROM player"
    },
    {
        "db_id": "advising",
        "question": "What is the average name of courses?",
        "gold_parse": "",
        "query": "SELECT AVG(name) FROM course;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "What's the mean name of the courses?",
        "gold_parse": "",
        "query": "SELECT AVG(name) FROM course;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "Can you tell me the average course name?",
        "gold_parse": "",
        "query": "SELECT AVG(name) FROM course;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "What is the mean course name?",
        "gold_parse": "",
        "query": "SELECT AVG(name) FROM course;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "Could you provide the average name for courses?",
        "gold_parse": "",
        "query": "SELECT AVG(name) FROM course;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "I'd like to know the average name of courses.",
        "gold_parse": "",
        "query": "SELECT AVG(name) FROM course;",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type",
        "question": "What are the different transaction types, and how many transactions of each have taken place?",
        "correctness": 1,
        "gold_parse": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type",
        "question": "Can you list the various types of transactions and their respective counts?",
        "correctness": 1,
        "gold_parse": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type",
        "question": "What are the various kinds of transactions and the number of times each has occurred?",
        "correctness": 1,
        "gold_parse": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type",
        "question": "Could you tell me the different transaction categories and the frequency of each?",
        "correctness": 1,
        "gold_parse": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type",
        "question": "What are the distinct transaction types and the total number of each?",
        "correctness": 1,
        "gold_parse": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type",
        "question": "Can you enumerate the different types of transactions and how often each has happened?",
        "correctness": 1,
        "gold_parse": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type"
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog content has the smallest capacity? Return the catalog entry name.",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number ORDER BY T3.height Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What is the name of the catalog content with the least capacity?",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number ORDER BY T3.height Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Can you find the catalog entry with the minimum capacity?",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number ORDER BY T3.height Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What catalog entry has the lowest capacity?",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number ORDER BY T3.height Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Identify the catalog content that has the smallest capacity.",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number ORDER BY T3.height Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog entry possesses the smallest capacity?",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number ORDER BY T3.height Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
        "query": "SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = value INTERSECT SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Display the candidates who have nominated musicals for both the 'Tony Award' and 'Drama Desk Award'.",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
        "query": "SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = value INTERSECT SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Who are the nominees that have put forward musicals for both the 'Tony Award' and 'Drama Desk Award'?",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
        "query": "SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = value INTERSECT SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Can you list the nominees who have nominated musicals for both 'Tony Award' and 'Drama Desk Award'?",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
        "query": "SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = value INTERSECT SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Identify the nominees who have nominated musicals for both 'Tony Award' and 'Drama Desk Award'.",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
        "query": "SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = value INTERSECT SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Who are the individuals that have nominated musicals for both the 'Tony Award' and 'Drama Desk Award'?",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
        "query": "SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = value INTERSECT SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "In which zip codes can we find a station where the maximum temperature has reached 80 or more and on what date did this occur?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Can you tell me the zip codes where a station recorded a maximum temperature of 80 or above and the date it happened?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the zip codes of the stations where the maximum temperature was 80 or higher and the date it was recorded?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Identify the zip codes where a station has reported a maximum temperature of at least 80 and the date it was noted.",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Which zip codes have stations that recorded a maximum temperature of 80 or more and when was this temperature reached?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'",
        "question": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?",
        "correctness": 1,
        "gold_parse": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'"
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'",
        "question": "What are the event ids where 'Kenyatta Kuhn' is not listed as a participant?",
        "correctness": 1,
        "gold_parse": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'"
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'",
        "question": "Can you list the event ids that do not include 'Kenyatta Kuhn' as a participant?",
        "correctness": 1,
        "gold_parse": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'"
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'",
        "question": "Which event ids do not list 'Kenyatta Kuhn' as a participant?",
        "correctness": 1,
        "gold_parse": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'"
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'",
        "question": "Identify the event ids where 'Kenyatta Kuhn' is not a participant.",
        "correctness": 1,
        "gold_parse": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'"
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'",
        "question": "Could you find the event ids where 'Kenyatta Kuhn' does not participate?",
        "correctness": 1,
        "gold_parse": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'"
    },
    {
        "db_id": "department_management",
        "question": "What are the distinct ages of the heads who are acting?",
        "gold_parse": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
        "query": "SELECT DISTINCT age FROM head",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "What are the unique ages of the acting heads?",
        "gold_parse": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
        "query": "SELECT DISTINCT age FROM head",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "Can you list the different ages of the heads in acting?",
        "gold_parse": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
        "query": "SELECT DISTINCT age FROM head",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "What are the various ages of the heads who are in acting?",
        "gold_parse": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
        "query": "SELECT DISTINCT age FROM head",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "Could you tell me the distinct ages of the heads who are acting?",
        "gold_parse": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
        "query": "SELECT DISTINCT age FROM head",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "What are the separate ages of the heads who are involved in acting?",
        "gold_parse": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
        "query": "SELECT DISTINCT age FROM head",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the courses that are registered or attended by the student whose id is 121?",
        "gold_parse": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "query": "SELECT course_id FROM Student_Course_Attendance WHERE student_id = value OR student_id = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Can you provide the course ids for the student with an id of 121?",
        "gold_parse": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "query": "SELECT course_id FROM Student_Course_Attendance WHERE student_id = value OR student_id = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the course ids for the student who has an id of 121?",
        "gold_parse": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "query": "SELECT course_id FROM Student_Course_Attendance WHERE student_id = value OR student_id = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Could you list the ids of the courses that the student with id 121 is registered for or has attended?",
        "gold_parse": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "query": "SELECT course_id FROM Student_Course_Attendance WHERE student_id = value OR student_id = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Which course ids are associated with the student whose id is 121?",
        "gold_parse": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "query": "SELECT course_id FROM Student_Course_Attendance WHERE student_id = value OR student_id = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the courses that the student with id 121 has registered for or attended?",
        "gold_parse": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "query": "SELECT course_id FROM Student_Course_Attendance WHERE student_id = value OR student_id = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "question": "Find how many school locations have the word 'NY'.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\""
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "question": "How many school locations contain the term 'NY'?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\""
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "question": "What is the count of school locations with 'NY' in their name?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\""
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "question": "Can you tell me the number of school locations that include 'NY'?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\""
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "question": "Determine the quantity of school locations that have 'NY' in them.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\""
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "question": "What's the total number of school locations that feature 'NY'?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\""
    },
    {
        "db_id": "hr_1",
        "question": "display those departments where more than ten employees work who got a commission percentage.",
        "gold_parse": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
        "query": "SELECT T1.DEPARTMENT_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Show the departments where the number of employees who received a commission percentage exceeds ten.",
        "gold_parse": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
        "query": "SELECT T1.DEPARTMENT_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you list the departments that have more than ten employees receiving a commission percentage?",
        "gold_parse": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
        "query": "SELECT T1.DEPARTMENT_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Which departments have over ten employees who have been given a commission percentage?",
        "gold_parse": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
        "query": "SELECT T1.DEPARTMENT_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Identify the departments where more than ten employees have received a commission percentage.",
        "gold_parse": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
        "query": "SELECT T1.DEPARTMENT_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "I want to see the departments where the count of employees who got a commission percentage is more than ten.",
        "gold_parse": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
        "query": "SELECT T1.DEPARTMENT_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
        "question": "Please show the least common assessment for students.",
        "correctness": 1,
        "gold_parse": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
        "question": "Can you display the assessment that is least common among students?",
        "correctness": 1,
        "gold_parse": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
        "question": "What is the least frequently taken assessment by students?",
        "correctness": 1,
        "gold_parse": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
        "question": "Could you reveal the assessment that students take the least?",
        "correctness": 1,
        "gold_parse": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
        "question": "Identify the assessment that is least popular among students.",
        "correctness": 1,
        "gold_parse": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
        "question": "Which assessment do students take the least often?",
        "correctness": 1,
        "gold_parse": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";",
        "question": "Find the number of times ROY SWEAZY has reserved a room.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";",
        "question": "How many times has ROY SWEAZY made a room reservation?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";",
        "question": "Can you tell me the count of room reservations made by ROY SWEAZY?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";",
        "question": "What is the total number of room reservations by ROY SWEAZY?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";",
        "question": "Count the room reservations made by ROY SWEAZY.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";",
        "question": "What's the number of times ROY SWEAZY has booked a room?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which apartment type code appears the most often?",
        "correctness": 1,
        "gold_parse": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the most common apartment type code?",
        "correctness": 1,
        "gold_parse": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which type code of apartment is most frequently occurring?",
        "correctness": 1,
        "gold_parse": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Can you tell me the apartment type code that appears most frequently?",
        "correctness": 1,
        "gold_parse": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What apartment type code is the most prevalent?",
        "correctness": 1,
        "gold_parse": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which apartment type code is most often seen?",
        "correctness": 1,
        "gold_parse": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Kate');",
        "question": "What are the names of singers who are the same age as Kate?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Kate');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Kate');",
        "question": "Can you list the singers who are the same age as Kate?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Kate');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Kate');",
        "question": "Who are the singers that share the same age as Kate?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Kate');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Kate');",
        "question": "I want to know the names of singers who are as old as Kate.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Kate');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Kate');",
        "question": "Could you tell me the singers who have the same age as Kate?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Kate');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Kate');",
        "question": "Identify the singers who are the same age as Kate.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Kate');"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Country, COUNT(*) FROM airlines GROUP BY Country;",
        "question": "How many airlines are there in each country?",
        "correctness": 1,
        "gold_parse": "SELECT Country, COUNT(*) FROM airlines GROUP BY Country;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Country, COUNT(*) FROM airlines GROUP BY Country;",
        "question": "What is the count of airlines in every country?",
        "correctness": 1,
        "gold_parse": "SELECT Country, COUNT(*) FROM airlines GROUP BY Country;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Country, COUNT(*) FROM airlines GROUP BY Country;",
        "question": "Can you tell me the number of airlines per country?",
        "correctness": 1,
        "gold_parse": "SELECT Country, COUNT(*) FROM airlines GROUP BY Country;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Country, COUNT(*) FROM airlines GROUP BY Country;",
        "question": "What's the total number of airlines for each country?",
        "correctness": 1,
        "gold_parse": "SELECT Country, COUNT(*) FROM airlines GROUP BY Country;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Country, COUNT(*) FROM airlines GROUP BY Country;",
        "question": "Could you provide the count of airlines by country?",
        "correctness": 1,
        "gold_parse": "SELECT Country, COUNT(*) FROM airlines GROUP BY Country;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Country, COUNT(*) FROM airlines GROUP BY Country;",
        "question": "How many airline companies are present in each country?",
        "correctness": 1,
        "gold_parse": "SELECT Country, COUNT(*) FROM airlines GROUP BY Country;"
    },
    {
        "db_id": "hr_1",
        "question": "display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM countries AS T1 JOIN employees AS T2 WHERE T1.COUNTRY_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Show the full name of the employee and the country where they are currently working, given their ID.",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM countries AS T1 JOIN employees AS T2 WHERE T1.COUNTRY_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is the full name of the employee and in which country are they currently working, based on their ID?",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM countries AS T1 JOIN employees AS T2 WHERE T1.COUNTRY_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you provide the full name of the employee and the country where they are presently working, using their ID?",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM countries AS T1 JOIN employees AS T2 WHERE T1.COUNTRY_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "I need to know the full name of the employee and the country where they are working now, according to their ID.",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM countries AS T1 JOIN employees AS T2 WHERE T1.COUNTRY_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Could you display the employee's full name and the country where they are currently employed, using their ID?",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM countries AS T1 JOIN employees AS T2 WHERE T1.COUNTRY_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
        "question": "How many degrees were conferred in \"San Jose State University\" in 2000?",
        "correctness": 1,
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
        "question": "What is the count of degrees awarded at 'San Jose State University' in the year 2000?",
        "correctness": 1,
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
        "question": "Can you tell me the number of degrees given out at 'San Jose State University' in 2000?",
        "correctness": 1,
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
        "question": "What's the total number of degrees conferred by 'San Jose State University' in 2000?",
        "correctness": 1,
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
        "question": "In 2000, how many degrees were handed out by 'San Jose State University'?",
        "correctness": 1,
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
        "question": "What was the total count of degrees that 'San Jose State University' conferred in 2000?",
        "correctness": 1,
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
        "question": "How many stations are in Mountain View?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
        "question": "What is the total number of stations in Mountain View?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
        "question": "Can you count the stations in Mountain View?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
        "question": "What's the count of stations in Mountain View?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
        "question": "How many stations can be found in Mountain View?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
        "question": "What is the count of stations located in Mountain View?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3",
        "question": "Find the top three dates with the most receipts.",
        "correctness": 1,
        "gold_parse": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3",
        "question": "Identify the three dates with the highest number of receipts.",
        "correctness": 1,
        "gold_parse": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3",
        "question": "Which three dates have the maximum number of receipts?",
        "correctness": 1,
        "gold_parse": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3",
        "question": "Can you show me the three dates with the most receipts?",
        "correctness": 1,
        "gold_parse": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3",
        "question": "What are the top three dates that have the most receipts?",
        "correctness": 1,
        "gold_parse": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3",
        "question": "List the three dates with the greatest number of receipts.",
        "correctness": 1,
        "gold_parse": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "What are the names of the youngest singers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "Who are the youngest individuals in the singing industry?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "Can you list the names of the youngest vocalists?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "Who are the most junior singers by age?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "Identify the youngest singers by name.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "Who are the singers with the least age?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT Max ( date ) FROM weather",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Can you provide the dates when the maximum temperature exceeded 85?",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT Max ( date ) FROM weather",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates when the temperature went above 85 degrees?",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT Max ( date ) FROM weather",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "On which dates was the maximum temperature greater than 85?",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT Max ( date ) FROM weather",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Could you list the dates when the max temperature was over 85?",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT Max ( date ) FROM weather",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Tell me the dates when the highest temperature was more than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT Max ( date ) FROM weather",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
        "question": "Show the name of colleges that have at least two players in descending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC"
    },
    {
        "db_id": "match_season",
        "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
        "question": "Display the names of colleges with a minimum of two players, sorted in reverse alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC"
    },
    {
        "db_id": "match_season",
        "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
        "question": "Can you list the colleges that have two or more players, in descending order by name?",
        "correctness": 1,
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC"
    },
    {
        "db_id": "match_season",
        "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
        "question": "What are the names of colleges that have at least two players, arranged in descending alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC"
    },
    {
        "db_id": "match_season",
        "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
        "question": "Provide the names of colleges that have two or more players, ordered alphabetically in reverse.",
        "correctness": 1,
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC"
    },
    {
        "db_id": "match_season",
        "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
        "question": "Identify the colleges that have at least two players, sorted from Z to A.",
        "correctness": 1,
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "query": "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT OMIM FROM enzyme )",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "How many enzymes have no interactions?",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "query": "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT OMIM FROM enzyme )",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "Can you tell me the number of enzymes that don't have any interactions?",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "query": "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT OMIM FROM enzyme )",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What's the total count of enzymes lacking interactions?",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "query": "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT OMIM FROM enzyme )",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "Could you provide the count of enzymes with zero interactions?",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "query": "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT OMIM FROM enzyme )",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the total number of enzymes that have no interactions?",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "query": "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT OMIM FROM enzyme )",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
        "question": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
        "question": "Can you list the station names where the average bike availability is more than 10 and they are not in San Jose city?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
        "question": "What are the names of the stations where the average number of bikes available is greater than 10 and they are not situated in San Jose city?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
        "question": "Could you provide the names of stations with an average bike availability exceeding 10 and that are not in the city of San Jose?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
        "question": "Identify the stations that have an average bike availability of over 10 and are not located in San Jose city.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
        "question": "Which stations have an average bike availability higher than 10 and are not based in San Jose city?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\""
    },
    {
        "db_id": "dorm_1",
        "question": "Find the number of students whose age is older than the average age for each gender.",
        "gold_parse": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
        "query": "SELECT Sex , Count ( * ) FROM Student WHERE Sex = value GROUP BY Sex",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many students are there whose age exceeds the average age of their respective gender?",
        "gold_parse": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
        "query": "SELECT Sex , Count ( * ) FROM Student WHERE Sex = value GROUP BY Sex",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Can you count the students who are older than the average age for their gender?",
        "gold_parse": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
        "query": "SELECT Sex , Count ( * ) FROM Student WHERE Sex = value GROUP BY Sex",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the count of students who are above the average age for each gender?",
        "gold_parse": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
        "query": "SELECT Sex , Count ( * ) FROM Student WHERE Sex = value GROUP BY Sex",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Determine the number of students whose age is greater than the average age for each gender.",
        "gold_parse": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
        "query": "SELECT Sex , Count ( * ) FROM Student WHERE Sex = value GROUP BY Sex",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Provide the count of students who are older than the average age in their respective gender.",
        "gold_parse": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
        "query": "SELECT Sex , Count ( * ) FROM Student WHERE Sex = value GROUP BY Sex",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;",
        "question": "Find the name of the room with the maximum occupancy.",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;",
        "question": "What is the name of the room that can accommodate the most people?",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;",
        "question": "Can you tell me the name of the room with the highest capacity?",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;",
        "question": "Which room has the highest occupancy?",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;",
        "question": "Identify the room that has the maximum number of people it can hold.",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;",
        "question": "What's the name of the room with the greatest capacity?",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of section IDs for each student's other details?",
        "gold_parse": "",
        "query": "SELECT other_student_details, SUM(section_id) FROM Students JOIN Sections ON Students.student_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the total of section IDs for each student's additional information?",
        "gold_parse": "",
        "query": "SELECT other_student_details, SUM(section_id) FROM Students JOIN Sections ON Students.student_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Can you calculate the sum of section IDs for each student's extra details?",
        "gold_parse": "",
        "query": "SELECT other_student_details, SUM(section_id) FROM Students JOIN Sections ON Students.student_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What's the aggregate of section IDs for each student's other data?",
        "gold_parse": "",
        "query": "SELECT other_student_details, SUM(section_id) FROM Students JOIN Sections ON Students.student_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Could you find the sum of section IDs for each student's supplementary details?",
        "gold_parse": "",
        "query": "SELECT other_student_details, SUM(section_id) FROM Students JOIN Sections ON Students.student_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the total sum of section IDs for each student's other specifics?",
        "gold_parse": "",
        "query": "SELECT other_student_details, SUM(section_id) FROM Students JOIN Sections ON Students.student_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many different instructors have taught some course?",
        "gold_parse": "SELECT COUNT (DISTINCT id) FROM teaches",
        "query": "SELECT Count ( DISTINCT name ) FROM instructor",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the count of unique instructors who have taught a course?",
        "gold_parse": "SELECT COUNT (DISTINCT id) FROM teaches",
        "query": "SELECT Count ( DISTINCT name ) FROM instructor",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Can you tell me the number of distinct instructors who have taught any course?",
        "gold_parse": "SELECT COUNT (DISTINCT id) FROM teaches",
        "query": "SELECT Count ( DISTINCT name ) FROM instructor",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What's the total number of different instructors who have conducted a course?",
        "gold_parse": "SELECT COUNT (DISTINCT id) FROM teaches",
        "query": "SELECT Count ( DISTINCT name ) FROM instructor",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many individual instructors have been involved in teaching a course?",
        "gold_parse": "SELECT COUNT (DISTINCT id) FROM teaches",
        "query": "SELECT Count ( DISTINCT name ) FROM instructor",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the total count of different instructors who have taught at least one course?",
        "gold_parse": "SELECT COUNT (DISTINCT id) FROM teaches",
        "query": "SELECT Count ( DISTINCT name ) FROM instructor",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , min_dew_point_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Can you provide the date, average temperature and average humidity for the three days with the highest maximum gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , min_dew_point_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What were the date, mean temperature and mean humidity on the three days with the greatest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , min_dew_point_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Could you tell me the date, mean temperature and mean humidity for the three days with the highest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , min_dew_point_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "I'd like to know the date, mean temperature and mean humidity for the top three days with the largest max gust speeds.",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , min_dew_point_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the date, mean temperature and mean humidity for the three days with the most extreme max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , min_dew_point_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "question": "Count the number of different official languages corresponding to countries that players who play Defender are from.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "question": "How many unique official languages are there in the countries of players who play as Defenders?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "question": "What is the count of distinct official languages from the countries where Defender players originate?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "question": "Can you count the different official languages of the countries where players playing in Defender position come from?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "question": "Determine the number of unique official languages from the countries of players who are Defenders.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "question": "What's the total number of different official languages spoken in the countries where Defender players are from?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers in grades below the maximum?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade < (SELECT MAX(grade) FROM Highschooler);",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Can you list the names of high school students who are not in the highest grade?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade < (SELECT MAX(grade) FROM Highschooler);",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Who are the high school students in grades less than the maximum?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade < (SELECT MAX(grade) FROM Highschooler);",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of students in high school who are not in the top grade?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade < (SELECT MAX(grade) FROM Highschooler);",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Could you provide the names of highschoolers who aren't in the highest grade?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade < (SELECT MAX(grade) FROM Highschooler);",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Identify the high school students who are not in the maximum grade.",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade < (SELECT MAX(grade) FROM Highschooler);",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "In which zip codes can we find a station where the maximum temperature has reached 80 or more and on what date did this occur?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Can you tell me the zip codes where a station recorded a maximum temperature of 80 or above and the date it happened?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the zip codes of the stations where the maximum temperature was 80 or higher and the date it was recorded?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Identify the zip codes where a station has reported a maximum temperature of at least 80 and the date it was noted.",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Which zip codes have stations that recorded a maximum temperature of 80 or more and when was this temperature reached?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join",
        "question": "What are the names, ages, and countries of artists, sorted by the year they joined?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join",
        "question": "Can you list the names, ages, and countries of artists in the order of their joining year?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join",
        "question": "Could you provide the names, ages, and countries of artists, arranged by the year they became members?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join",
        "question": "I'd like to see the names, ages, and countries of artists, organized by their year of joining.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join",
        "question": "Show me the names, ages, and countries of artists, sorted according to the year they joined.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join",
        "question": "What are the artists' names, ages, and countries, ordered by the year they joined?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)",
        "question": "What is the mean longitude for all stations that have never had more than 10 bikes available?",
        "correctness": 1,
        "gold_parse": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)",
        "question": "What's the average longitude for stations with a maximum of 10 bikes available?",
        "correctness": 1,
        "gold_parse": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)",
        "question": "Can you tell me the mean longitude of all stations where the bike availability never exceeded 10?",
        "correctness": 1,
        "gold_parse": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)",
        "question": "What is the average longitude of stations that have never held more than 10 bikes?",
        "correctness": 1,
        "gold_parse": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)",
        "question": "Could you provide the mean longitude for all stations that have never stocked more than 10 bikes?",
        "correctness": 1,
        "gold_parse": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)",
        "question": "What is the mean longitude for all stations where the number of bikes has never been over 10?",
        "correctness": 1,
        "gold_parse": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT * FROM PilotSkills WHERE age  <  30",
        "question": "Find all information of on pilots whose age is less than 30.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM PilotSkills WHERE age  <  30"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT * FROM PilotSkills WHERE age  <  30",
        "question": "Retrieve all details for pilots who are under 30 years old",
        "correctness": 1,
        "gold_parse": "SELECT * FROM PilotSkills WHERE age  <  30"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT * FROM PilotSkills WHERE age  <  30",
        "question": "Show all data for pilots who are younger than 30",
        "correctness": 1,
        "gold_parse": "SELECT * FROM PilotSkills WHERE age  <  30"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT * FROM PilotSkills WHERE age  <  30",
        "question": "Get all records of pilots aged less than 30",
        "correctness": 1,
        "gold_parse": "SELECT * FROM PilotSkills WHERE age  <  30"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT * FROM PilotSkills WHERE age  <  30",
        "question": "Display all information about pilots who are not yet 30",
        "correctness": 1,
        "gold_parse": "SELECT * FROM PilotSkills WHERE age  <  30"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT * FROM PilotSkills WHERE age  <  30",
        "question": "Provide all details on pilots whose age is below 30",
        "correctness": 1,
        "gold_parse": "SELECT * FROM PilotSkills WHERE age  <  30"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Title FROM ALBUM ORDER BY Title",
        "question": "What are all the album titles, in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM ALBUM ORDER BY Title"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Title FROM ALBUM ORDER BY Title",
        "question": "Can you list all the album titles in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM ALBUM ORDER BY Title"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Title FROM ALBUM ORDER BY Title",
        "question": "What are the album titles arranged alphabetically?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM ALBUM ORDER BY Title"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Title FROM ALBUM ORDER BY Title",
        "question": "Could you provide all the album titles, sorted in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM ALBUM ORDER BY Title"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Title FROM ALBUM ORDER BY Title",
        "question": "Show me all the album titles, ordered alphabetically.",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM ALBUM ORDER BY Title"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Title FROM ALBUM ORDER BY Title",
        "question": "I'd like to see all the album titles in alphabetical order, please.",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM ALBUM ORDER BY Title"
    },
    {
        "db_id": "musical",
        "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
        "question": "Who are the nominees who have been nominated more than two times?",
        "correctness": 1,
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2"
    },
    {
        "db_id": "musical",
        "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
        "question": "Can you list the nominees who have received more than two nominations?",
        "correctness": 1,
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2"
    },
    {
        "db_id": "musical",
        "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
        "question": "Who are the individuals that have been nominated more than twice?",
        "correctness": 1,
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2"
    },
    {
        "db_id": "musical",
        "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
        "question": "Could you tell me the nominees who have been nominated over two times?",
        "correctness": 1,
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2"
    },
    {
        "db_id": "musical",
        "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
        "question": "Identify the nominees who have been nominated more than two times.",
        "correctness": 1,
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2"
    },
    {
        "db_id": "musical",
        "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
        "question": "Who are the people that have been nominated more than two times?",
        "correctness": 1,
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1",
        "question": "What are the names of authors who have exactly 1 paper?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1",
        "question": "Can you list the authors who have written exactly one paper?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1",
        "question": "Who are the authors that have only one paper to their name?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1",
        "question": "Identify the authors who have published just one paper.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1",
        "question": "Which authors have exactly one paper published?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1",
        "question": "Could you tell me the names of authors who have only one paper?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
        "question": "Return the total points of the gymnast with the lowest age.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
        "question": "Find the total points of the youngest gymnast.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
        "question": "What is the total score of the gymnast who is the least old?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
        "question": "Can you tell me the total points of the gymnast with the smallest age?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
        "question": "What are the total points of the gymnast who is the youngest?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
        "question": "Provide the total points of the gymnast with the minimum age.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1"
    },
    {
        "db_id": "music_4",
        "question": "What are the famous titles of the artist \"Triumfall\"?",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"",
        "query": "SELECT Famous_Title FROM artist WHERE Famous_Release_date = value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the well-known works of the artist named 'Triumfall'?",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"",
        "query": "SELECT Famous_Title FROM artist WHERE Famous_Release_date = value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Can you list the popular titles from the artist 'Triumfall'?",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"",
        "query": "SELECT Famous_Title FROM artist WHERE Famous_Release_date = value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the notable titles by the artist 'Triumfall'?",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"",
        "query": "SELECT Famous_Title FROM artist WHERE Famous_Release_date = value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the renowned titles of 'Triumfall'?",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"",
        "query": "SELECT Famous_Title FROM artist WHERE Famous_Release_date = value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Could you tell me the famous titles associated with the artist 'Triumfall'?",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"",
        "query": "SELECT Famous_Title FROM artist WHERE Famous_Release_date = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "question": "How many distinct official languages are there among countries of players whose positions are defenders.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "question": "What is the count of unique official languages spoken in the countries of players who play as defenders?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "question": "Can you tell me the number of different official languages in the countries of players who are defenders?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "question": "What's the total number of distinct official languages in the countries of players positioned as defenders?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "question": "How many unique official languages are there in the countries of players who hold the position of defenders?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "question": "What is the quantity of different official languages in the countries of players who are in defensive positions?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
        "question": "Show all invoice ids and statuses without a payment.",
        "correctness": 1,
        "gold_parse": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
        "question": "Display all invoice ids and statuses that have not been paid.",
        "correctness": 1,
        "gold_parse": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
        "question": "Can you list all invoice ids and their statuses that are unpaid?",
        "correctness": 1,
        "gold_parse": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
        "question": "I want to see all invoice ids and statuses where payment is missing.",
        "correctness": 1,
        "gold_parse": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
        "question": "Show me all the invoice ids and statuses that lack payment.",
        "correctness": 1,
        "gold_parse": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
        "question": "Provide a list of all invoice ids and statuses with no payment.",
        "correctness": 1,
        "gold_parse": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'",
        "question": "What are the names of all directors whose movies have been reviewed by Sarah Martinez?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'",
        "question": "Can you list the directors whose films have received reviews from Sarah Martinez?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'",
        "question": "Who are the directors of the movies that Sarah Martinez has reviewed?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'",
        "question": "Identify the directors whose movies have been critiqued by Sarah Martinez.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'",
        "question": "Which directors have had their movies reviewed by Sarah Martinez?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'",
        "question": "Could you tell me the names of directors whose films have been reviewed by Sarah Martinez?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'"
    },
    {
        "db_id": "election",
        "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\"",
        "question": "Find the committees that have delegates both from from the democratic party and the liberal party.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\""
    },
    {
        "db_id": "election",
        "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\"",
        "question": "Identify the committees that include delegates from both the democratic party and the liberal party.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\""
    },
    {
        "db_id": "election",
        "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\"",
        "question": "Which committees have representatives from both the democratic party and the liberal party?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\""
    },
    {
        "db_id": "election",
        "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\"",
        "question": "Can you list the committees that have members from both the democratic party and the liberal party?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\""
    },
    {
        "db_id": "election",
        "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\"",
        "question": "Show me the committees that have delegates from both the democratic party and the liberal party.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\""
    },
    {
        "db_id": "election",
        "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\"",
        "question": "What are the committees that have delegates from both the democratic party and the liberal party?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\""
    },
    {
        "db_id": "phone_market",
        "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID",
        "question": "Show the names of phones and the districts of markets they are on.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID"
    },
    {
        "db_id": "phone_market",
        "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID",
        "question": "Display the names of the phones and the districts where their markets are located.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID"
    },
    {
        "db_id": "phone_market",
        "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID",
        "question": "Can you list the phone names and the districts of their respective markets?",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID"
    },
    {
        "db_id": "phone_market",
        "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID",
        "question": "What are the names of the phones and the districts of the markets they are in?",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID"
    },
    {
        "db_id": "phone_market",
        "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID",
        "question": "I want to see the names of phones and the districts of the markets they are sold in.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID"
    },
    {
        "db_id": "phone_market",
        "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID",
        "question": "Provide the names of phones and the districts of the markets they are available in.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID"
    },
    {
        "db_id": "geography",
        "question": "Which lakes are considered large?",
        "gold_parse": "",
        "query": "SELECT lake_name FROM lake WHERE area = 'large'",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the names of the large lakes?",
        "gold_parse": "",
        "query": "SELECT lake_name FROM lake WHERE area = 'large'",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Can you list the lakes that are classified as large?",
        "gold_parse": "",
        "query": "SELECT lake_name FROM lake WHERE area = 'large'",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which lakes fall under the category of large?",
        "gold_parse": "",
        "query": "SELECT lake_name FROM lake WHERE area = 'large'",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Identify the lakes that are considered large.",
        "gold_parse": "",
        "query": "SELECT lake_name FROM lake WHERE area = 'large'",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What lakes are categorized as large?",
        "gold_parse": "",
        "query": "SELECT lake_name FROM lake WHERE area = 'large'",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "query": "SELECT DISTINCT birth_city FROM actor;",
        "question": "What are the different birth cities of actors?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT birth_city FROM actor;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT DISTINCT birth_city FROM actor;",
        "question": "Can you list the birth cities of all actors?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT birth_city FROM actor;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT DISTINCT birth_city FROM actor;",
        "question": "What cities were actors born in?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT birth_city FROM actor;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT DISTINCT birth_city FROM actor;",
        "question": "In which cities were the actors born?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT birth_city FROM actor;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT DISTINCT birth_city FROM actor;",
        "question": "Could you tell me the birth cities of actors?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT birth_city FROM actor;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT DISTINCT birth_city FROM actor;",
        "question": "What are the birthplaces of actors?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT birth_city FROM actor;"
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT date FROM weather WHERE mean_dew_point_f > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Can you show me the dates when the maximum temperature exceeded 85?",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT date FROM weather WHERE mean_dew_point_f > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates when the temperature went above 85 degrees?",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT date FROM weather WHERE mean_dew_point_f > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "On which dates was the maximum temperature greater than 85?",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT date FROM weather WHERE mean_dew_point_f > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "I'd like to know the dates when the max temperature was over 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT date FROM weather WHERE mean_dew_point_f > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Could you provide the dates when the max temperature was more than 85?",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT date FROM weather WHERE mean_dew_point_f > value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "query": "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What is the total number of flights operated by 'JetBlue Airways'?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "query": "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Can you tell me the count of flights for 'JetBlue Airways'?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "query": "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What's the quantity of 'JetBlue Airways' flights?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "query": "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many flights are there under the 'JetBlue Airways'?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "query": "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What is the count of 'JetBlue Airways' flights?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "query": "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        "correctness": 0
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1",
        "question": "Find the names of districts which have more than one spokesman.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1",
        "question": "Identify the districts that have more than one spokesperson.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1",
        "question": "Which districts have more than one representative?",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1",
        "question": "Can you list the districts with more than one spokesman?",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1",
        "question": "Show me the districts that have multiple spokesmen.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1",
        "question": "What are the districts that have more than one spokesman?",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT age ,  count(*) FROM Student GROUP BY age",
        "question": "How old is each student and how many students are each age?",
        "correctness": 1,
        "gold_parse": "SELECT age ,  count(*) FROM Student GROUP BY age"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT age ,  count(*) FROM Student GROUP BY age",
        "question": "What is the age of each student and how many students are there of each age?",
        "correctness": 1,
        "gold_parse": "SELECT age ,  count(*) FROM Student GROUP BY age"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT age ,  count(*) FROM Student GROUP BY age",
        "question": "Can you tell me the age of every student and the count of students at each age?",
        "correctness": 1,
        "gold_parse": "SELECT age ,  count(*) FROM Student GROUP BY age"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT age ,  count(*) FROM Student GROUP BY age",
        "question": "I want to know the age of all students and the number of students at each age.",
        "correctness": 1,
        "gold_parse": "SELECT age ,  count(*) FROM Student GROUP BY age"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT age ,  count(*) FROM Student GROUP BY age",
        "question": "What's the age of each student and how many students share the same age?",
        "correctness": 1,
        "gold_parse": "SELECT age ,  count(*) FROM Student GROUP BY age"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT age ,  count(*) FROM Student GROUP BY age",
        "question": "Could you provide the age of each student and the quantity of students at each age?",
        "correctness": 1,
        "gold_parse": "SELECT age ,  count(*) FROM Student GROUP BY age"
    },
    {
        "db_id": "dog_kennels",
        "question": "How many dogs went through any treatments?",
        "gold_parse": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "query": "SELECT Count ( * ) FROM Breeds",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the count of dogs that have undergone treatments?",
        "gold_parse": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "query": "SELECT Count ( * ) FROM Breeds",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Can you tell me the number of dogs that have received any treatments?",
        "gold_parse": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "query": "SELECT Count ( * ) FROM Breeds",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What's the total number of dogs that went through treatments?",
        "gold_parse": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "query": "SELECT Count ( * ) FROM Breeds",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "How many dogs have been treated?",
        "gold_parse": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "query": "SELECT Count ( * ) FROM Breeds",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the total count of dogs that have had treatments?",
        "gold_parse": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "query": "SELECT Count ( * ) FROM Breeds",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county",
        "question": "List the state names and the number of customers living in each state.",
        "correctness": 1,
        "gold_parse": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county"
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county",
        "question": "Show the names of the states and the count of customers residing in each state.",
        "correctness": 1,
        "gold_parse": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county"
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county",
        "question": "Provide the state names along with the number of customers in each state.",
        "correctness": 1,
        "gold_parse": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county"
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county",
        "question": "Can you display the names of states and how many customers live in each?",
        "correctness": 1,
        "gold_parse": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county"
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county",
        "question": "I want to see the names of states and the count of customers living in each.",
        "correctness": 1,
        "gold_parse": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county"
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county",
        "question": "Could you list the states and the number of customers living in each one?",
        "correctness": 1,
        "gold_parse": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "For which countries are there more than four distinct addresses listed?",
        "gold_parse": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4",
        "query": "SELECT country FROM Addresses GROUP BY country HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "In which countries do we have more than four unique addresses?",
        "gold_parse": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4",
        "query": "SELECT country FROM Addresses GROUP BY country HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Can you list the countries that have more than four different addresses?",
        "gold_parse": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4",
        "query": "SELECT country FROM Addresses GROUP BY country HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Which countries have over four distinct addresses?",
        "gold_parse": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4",
        "query": "SELECT country FROM Addresses GROUP BY country HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Identify the countries with more than four unique addresses.",
        "gold_parse": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4",
        "query": "SELECT country FROM Addresses GROUP BY country HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the countries where there are more than four distinct addresses?",
        "gold_parse": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4",
        "query": "SELECT country FROM Addresses GROUP BY country HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "How many camera lenses are not used in taking any photos?",
        "gold_parse": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
        "query": "SELECT Count ( * ) FROM mountain AS T1 WHERE T1.id NOT IN ( SELECT T2.mountain_id FROM photos AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "What is the count of camera lenses that haven't been used for photography?",
        "gold_parse": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
        "query": "SELECT Count ( * ) FROM mountain AS T1 WHERE T1.id NOT IN ( SELECT T2.mountain_id FROM photos AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "Can you tell me the number of camera lenses that have not been utilized for taking pictures?",
        "gold_parse": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
        "query": "SELECT Count ( * ) FROM mountain AS T1 WHERE T1.id NOT IN ( SELECT T2.mountain_id FROM photos AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "What's the total number of camera lenses that are not used in capturing any images?",
        "gold_parse": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
        "query": "SELECT Count ( * ) FROM mountain AS T1 WHERE T1.id NOT IN ( SELECT T2.mountain_id FROM photos AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "How many camera lenses have never been used to take photos?",
        "gold_parse": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
        "query": "SELECT Count ( * ) FROM mountain AS T1 WHERE T1.id NOT IN ( SELECT T2.mountain_id FROM photos AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "What is the quantity of camera lenses that have not been used in any photography?",
        "gold_parse": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
        "query": "SELECT Count ( * ) FROM mountain AS T1 WHERE T1.id NOT IN ( SELECT T2.mountain_id FROM photos AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"",
        "question": "Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\"",
        "correctness": 1,
        "gold_parse": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"",
        "question": "Find the start and end dates for all policies linked to the customer with a name including 'Diana'",
        "correctness": 1,
        "gold_parse": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"",
        "question": "What are the initiation and termination dates for all policies related to the customer whose name has 'Diana' in it?",
        "correctness": 1,
        "gold_parse": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"",
        "question": "Can you show me the activation and expiration dates of all policies for the customer whose name incorporates 'Diana'?",
        "correctness": 1,
        "gold_parse": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"",
        "question": "I need to know the effective and expiry dates of all policies tied to the customer named 'Diana'",
        "correctness": 1,
        "gold_parse": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"",
        "question": "Provide the commencement and cessation dates for all policies connected to the customer whose name features 'Diana'",
        "correctness": 1,
        "gold_parse": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\""
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Max ( Consider_rate ) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Show the three highest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Max ( Consider_rate ) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Display the top three support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Max ( Consider_rate ) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the three greatest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Max ( Consider_rate ) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Can you list the top 3 support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Max ( Consider_rate ) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Provide the three highest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Max ( Consider_rate ) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum department ID for each student's middle name?",
        "gold_parse": "",
        "query": "SELECT middle_name, MIN(department_id) FROM Students JOIN Departments ON Students.student_id = Departments.department_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the lowest department ID associated with each student's middle name?",
        "gold_parse": "",
        "query": "SELECT middle_name, MIN(department_id) FROM Students JOIN Departments ON Students.student_id = Departments.department_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Can you find the smallest department ID for each student's middle name?",
        "gold_parse": "",
        "query": "SELECT middle_name, MIN(department_id) FROM Students JOIN Departments ON Students.student_id = Departments.department_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What's the least department ID for every student's middle name?",
        "gold_parse": "",
        "query": "SELECT middle_name, MIN(department_id) FROM Students JOIN Departments ON Students.student_id = Departments.department_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Could you tell me the minimum department ID for each middle name of students?",
        "gold_parse": "",
        "query": "SELECT middle_name, MIN(department_id) FROM Students JOIN Departments ON Students.student_id = Departments.department_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Identify the minimum department ID for each student's middle name.",
        "gold_parse": "",
        "query": "SELECT middle_name, MIN(department_id) FROM Students JOIN Departments ON Students.student_id = Departments.department_id;",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000",
        "gold_parse": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "query": "SELECT Count ( * ) FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id WHERE T3.amount > value OR T2.Year < value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "How many budgets were there in 2001 or earlier with a budgeted amount over 3000?",
        "gold_parse": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "query": "SELECT Count ( * ) FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id WHERE T3.amount > value OR T2.Year < value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Can you tell me the number of budgets in 2001 or before that had a budgeted amount more than 3000?",
        "gold_parse": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "query": "SELECT Count ( * ) FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id WHERE T3.amount > value OR T2.Year < value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "What is the count of budgets in 2001 or prior whose budgeted amount exceeded 3000?",
        "gold_parse": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "query": "SELECT Count ( * ) FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id WHERE T3.amount > value OR T2.Year < value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Find the number of budgets in the year 2001 or earlier where the budgeted amount was greater than 3000.",
        "gold_parse": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "query": "SELECT Count ( * ) FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id WHERE T3.amount > value OR T2.Year < value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Determine the count of budgets from 2001 or before with a budgeted amount over 3000.",
        "gold_parse": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "query": "SELECT Count ( * ) FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id WHERE T3.amount > value OR T2.Year < value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "gold_parse": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "query": "select T1.FlightNo from flights as T1 join airports as T2 on T1.DestAirport = T2.AirportCode where T2.AirportName = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Can you tell me the flight numbers of flights that are landing at APG airport?",
        "gold_parse": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "query": "select T1.FlightNo from flights as T1 join airports as T2 on T1.DestAirport = T2.AirportCode where T2.AirportName = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What are the numbers of flights that are scheduled to arrive at APG?",
        "gold_parse": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "query": "select T1.FlightNo from flights as T1 join airports as T2 on T1.DestAirport = T2.AirportCode where T2.AirportName = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Could you list the flight numbers of flights destined for APG airport?",
        "gold_parse": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "query": "select T1.FlightNo from flights as T1 join airports as T2 on T1.DestAirport = T2.AirportCode where T2.AirportName = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "I need to know the flight numbers of flights arriving at APG. Can you provide that?",
        "gold_parse": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "query": "select T1.FlightNo from flights as T1 join airports as T2 on T1.DestAirport = T2.AirportCode where T2.AirportName = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What flight numbers are associated with flights that have APG as their destination?",
        "gold_parse": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "query": "select T1.FlightNo from flights as T1 join airports as T2 on T1.DestAirport = T2.AirportCode where T2.AirportName = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "question": "Show all product names without an order.",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "question": "Display all product names that have not been ordered",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "question": "List all products that have no orders",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "question": "Show me all the products that haven't been ordered",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "question": "Can you provide a list of all products without orders?",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "question": "What are the product names that have not been ordered yet?",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id"
    },
    {
        "db_id": "hr_1",
        "question": "Which job titles correspond to jobs with salaries over 9000?",
        "gold_parse": "SELECT job_title FROM jobs WHERE min_salary  >  9000",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job titles for positions that pay more than 9000?",
        "gold_parse": "SELECT job_title FROM jobs WHERE min_salary  >  9000",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you list the job titles for jobs that have a salary greater than 9000?",
        "gold_parse": "SELECT job_title FROM jobs WHERE min_salary  >  9000",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What job titles are associated with salaries exceeding 9000?",
        "gold_parse": "SELECT job_title FROM jobs WHERE min_salary  >  9000",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Identify the job titles where the salary is over 9000.",
        "gold_parse": "SELECT job_title FROM jobs WHERE min_salary  >  9000",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Which positions have a salary that is more than 9000?",
        "gold_parse": "SELECT job_title FROM jobs WHERE min_salary  >  9000",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";",
        "question": "What is the description of role code ED?",
        "correctness": 1,
        "gold_parse": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";",
        "question": "Can you provide the description for the role code ED?",
        "correctness": 1,
        "gold_parse": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";",
        "question": "What does the role code ED stand for?",
        "correctness": 1,
        "gold_parse": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";",
        "question": "Could you tell me the description of the role code ED?",
        "correctness": 1,
        "gold_parse": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";",
        "question": "What is the meaning of the role code ED?",
        "correctness": 1,
        "gold_parse": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";",
        "question": "Can you explain the role code ED?",
        "correctness": 1,
        "gold_parse": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";"
    },
    {
        "db_id": "program_share",
        "question": "What is the list of program origins ordered alphabetically?",
        "gold_parse": "SELECT origin FROM program ORDER BY origin",
        "query": "SELECT Name FROM channel ORDER BY Name Asc",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Can you provide an alphabetical list of program origins?",
        "gold_parse": "SELECT origin FROM program ORDER BY origin",
        "query": "SELECT Name FROM channel ORDER BY Name Asc",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "What are the program origins in alphabetical order?",
        "gold_parse": "SELECT origin FROM program ORDER BY origin",
        "query": "SELECT Name FROM channel ORDER BY Name Asc",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Could you show me the program origins sorted alphabetically?",
        "gold_parse": "SELECT origin FROM program ORDER BY origin",
        "query": "SELECT Name FROM channel ORDER BY Name Asc",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "I need to see the program origins, can you arrange them alphabetically?",
        "gold_parse": "SELECT origin FROM program ORDER BY origin",
        "query": "SELECT Name FROM channel ORDER BY Name Asc",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Can I get the program origins listed in alphabetical order?",
        "gold_parse": "SELECT origin FROM program ORDER BY origin",
        "query": "SELECT Name FROM channel ORDER BY Name Asc",
        "correctness": 0
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the code of the product type that is least common?",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the product type code that is the least frequent?",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1",
        "question": "Can you tell me the code of the least common product type?",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1",
        "question": "What's the code for the product type that appears the least?",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1",
        "question": "Which product type code is the least common?",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1",
        "question": "Identify the code of the product type that is least prevalent.",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "question": "What are all the policy types of the customer named \"Dayana Robel\"?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "question": "Can you list all the policy types for the customer 'Dayana Robel'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "question": "What types of policies does the customer 'Dayana Robel' have?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "question": "Could you tell me the policy types of the customer named 'Dayana Robel'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "question": "I'd like to know all the policy types of the customer 'Dayana Robel'.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "question": "What are the different policy types that the customer 'Dayana Robel' has?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Can you show me the dates when the maximum temperature exceeded 85?",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates when the temperature went above 85 degrees?",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "On which dates was the maximum temperature more than 85?",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "I'd like to know the dates when the max temperature was over 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Could you provide the dates when the highest temperature was greater than 85?",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4",
        "question": "What are the names of movies that get 3 star and 4 star?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4",
        "question": "Can you list the movies that have received 3 or 4 stars?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4",
        "question": "Which movies have been rated with 3 or 4 stars?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4",
        "question": "What are the titles of films that have a 3 or 4 star rating?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4",
        "question": "Could you tell me the movies that are rated 3 or 4 stars?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4",
        "question": "I'd like to know the movies that have been given 3 or 4 stars.",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the different descriptions for templates that have been used in a document.",
        "gold_parse": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "query": "select Document_Description from Documents",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Provide the unique descriptions of templates used in a document.",
        "gold_parse": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "query": "select Document_Description from Documents",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the distinct descriptions of templates that have been utilized in a document?",
        "gold_parse": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "query": "select Document_Description from Documents",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Can you show the different descriptions for templates that have been applied in a document?",
        "gold_parse": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "query": "select Document_Description from Documents",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "List the various descriptions for templates that have been employed in a document.",
        "gold_parse": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "query": "select Document_Description from Documents",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Display the diverse descriptions for templates that have been used in a document.",
        "gold_parse": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "query": "select Document_Description from Documents",
        "correctness": 0
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code",
        "question": "Show all product type codes and the average price for each type.",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code",
        "question": "Display all product type codes along with their average prices.",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code",
        "question": "Can you list all product type codes and their corresponding average prices?",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code",
        "question": "I want to see all product type codes and the average price for each.",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code",
        "question": "Could you show me all product type codes and the average price for each one?",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code",
        "question": "Provide a list of all product type codes and the average price for each type.",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code"
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Max ( Consider_rate ) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Which are the three highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Max ( Consider_rate ) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Can you list the top three support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Max ( Consider_rate ) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the three maximum support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Max ( Consider_rate ) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Show me the three highest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Max ( Consider_rate ) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Identify the top three support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Max ( Consider_rate ) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many different songs have shared vocals?",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"",
        "query": "SELECT Count ( DISTINCT Title ) FROM Songs",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the count of unique songs with shared vocals?",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"",
        "query": "SELECT Count ( DISTINCT Title ) FROM Songs",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Can you tell me the number of distinct songs that have shared vocals?",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"",
        "query": "SELECT Count ( DISTINCT Title ) FROM Songs",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What's the total number of different songs where vocals are shared?",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"",
        "query": "SELECT Count ( DISTINCT Title ) FROM Songs",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many unique songs feature shared vocals?",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"",
        "query": "SELECT Count ( DISTINCT Title ) FROM Songs",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the quantity of different songs that have shared vocals?",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"",
        "query": "SELECT Count ( DISTINCT Title ) FROM Songs",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "How many aircrafts exist in the database?",
        "gold_parse": "SELECT count(*) FROM Aircraft",
        "query": "SELECT Count ( * ) FROM flight",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the total count of aircrafts in the database?",
        "gold_parse": "SELECT count(*) FROM Aircraft",
        "query": "SELECT Count ( * ) FROM flight",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Can you tell me the number of aircrafts in the database?",
        "gold_parse": "SELECT count(*) FROM Aircraft",
        "query": "SELECT Count ( * ) FROM flight",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What's the total number of aircrafts listed in the database?",
        "gold_parse": "SELECT count(*) FROM Aircraft",
        "query": "SELECT Count ( * ) FROM flight",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "How many aircrafts are there in the database?",
        "gold_parse": "SELECT count(*) FROM Aircraft",
        "query": "SELECT Count ( * ) FROM flight",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the count of aircrafts in the database?",
        "gold_parse": "SELECT count(*) FROM Aircraft",
        "query": "SELECT Count ( * ) FROM flight",
        "correctness": 0
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
        "question": "Return the name of the youngest pilot to fly Piper Cub.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
        "question": "Who is the youngest pilot that has flown a Piper Cub?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
        "question": "Can you tell me the name of the youngest pilot who flew a Piper Cub?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
        "question": "What's the name of the youngest pilot to have flown a Piper Cub?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
        "question": "Identify the youngest pilot who has flown a Piper Cub.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
        "question": "Who was the youngest pilot to fly a Piper Cub?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;",
        "question": "List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;",
        "question": "How many times did the room's occupancy reach its maximum capacity, including both adults and children?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;",
        "question": "Can you tell me the number of times the room was filled to its maximum capacity with people, including adults and kids?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;",
        "question": "What is the count of instances where the room was at its maximum occupancy, considering both adults and children?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;",
        "question": "How often did the room reach its maximum capacity, counting both adults and kids?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;",
        "question": "Count the number of times the room was filled to its maximum capacity, including both adults and children.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names, checking balances, and savings balances for all customers?",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "query": "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Can you provide the names, checking balances, and savings balances for all customers?",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "query": "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Could you list the names, checking balances, and savings balances of all customers?",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "query": "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "I need to know the names, checking balances, and savings balances for every customer.",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "query": "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names along with their checking and savings balances for all customers?",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "query": "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Can I get the names, checking balances, and savings balances for all the customers?",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "query": "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "question": "What is the savings balance of the account belonging to the customer with the highest checking balance?",
        "correctness": 1,
        "gold_parse": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "question": "Who has the highest checking balance and what is their savings balance?",
        "correctness": 1,
        "gold_parse": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "question": "Can you tell me the savings balance of the customer with the maximum checking balance?",
        "correctness": 1,
        "gold_parse": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "question": "What's the savings balance for the customer with the top checking balance?",
        "correctness": 1,
        "gold_parse": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "question": "Identify the savings balance of the customer who has the highest balance in their checking account.",
        "correctness": 1,
        "gold_parse": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "question": "For the customer with the largest checking balance, what is their savings balance?",
        "correctness": 1,
        "gold_parse": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1"
    },
    {
        "db_id": "wta_1",
        "question": "What are the codes of countries with more than 50 players?",
        "gold_parse": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "query": "SELECT country_code FROM players WHERE player_id > value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Can you list the codes of countries that have over 50 players?",
        "gold_parse": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "query": "SELECT country_code FROM players WHERE player_id > value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What are the country codes for nations with more than 50 players?",
        "gold_parse": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "query": "SELECT country_code FROM players WHERE player_id > value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Could you provide the codes for countries with a player count exceeding 50?",
        "gold_parse": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "query": "SELECT country_code FROM players WHERE player_id > value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Which countries with more than 50 players have what codes?",
        "gold_parse": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "query": "SELECT country_code FROM players WHERE player_id > value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What are the codes for countries that have more than fifty players?",
        "gold_parse": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "query": "SELECT country_code FROM players WHERE player_id > value",
        "correctness": 0
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name",
        "question": "List all Planets' names and coordinates in alphabetical order of name.",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name",
        "question": "Show me the names and coordinates of all planets, sorted by name alphabetically.",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name",
        "question": "Can you provide a list of all planets along with their coordinates, arranged in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name",
        "question": "I need to see all planet names and their coordinates, ordered alphabetically by name.",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name",
        "question": "Display all the planets' names and coordinates, in an alphabetical order of their names.",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name",
        "question": "Could you list the names and coordinates of all planets, alphabetically sorted by name?",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);",
        "question": "What are the names of conductors with the highest conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);",
        "question": "Who are the conductors with the topmost conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);",
        "question": "Can you list the conductors with the maximum conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);",
        "question": "What are the conductors' names with the highest ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);",
        "question": "Could you tell me the names of conductors who have the highest conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);",
        "question": "Who are the conductors that have the highest conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "inn_1",
        "question": "How many rooms have a king bed?",
        "gold_parse": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\"",
        "query": "SELECT Count ( * ) FROM Reservations WHERE CheckIn = value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What is the count of rooms that contain a king bed?",
        "gold_parse": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\"",
        "query": "SELECT Count ( * ) FROM Reservations WHERE CheckIn = value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Can you tell me the number of rooms with a king bed?",
        "gold_parse": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\"",
        "query": "SELECT Count ( * ) FROM Reservations WHERE CheckIn = value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What's the total number of rooms that have a king bed?",
        "gold_parse": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\"",
        "query": "SELECT Count ( * ) FROM Reservations WHERE CheckIn = value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many rooms are there with a king bed?",
        "gold_parse": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\"",
        "query": "SELECT Count ( * ) FROM Reservations WHERE CheckIn = value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What is the total count of rooms having a king bed?",
        "gold_parse": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\"",
        "query": "SELECT Count ( * ) FROM Reservations WHERE CheckIn = value",
        "correctness": 0
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1",
        "question": "What is the most uncommon order status?",
        "correctness": 1,
        "gold_parse": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1",
        "question": "What is the least frequent order status?",
        "correctness": 1,
        "gold_parse": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1",
        "question": "Which order status appears the least?",
        "correctness": 1,
        "gold_parse": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1",
        "question": "Can you tell me the order status that is least common?",
        "correctness": 1,
        "gold_parse": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1",
        "question": "What's the rarest order status?",
        "correctness": 1,
        "gold_parse": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1",
        "question": "Which order status is the most rare?",
        "correctness": 1,
        "gold_parse": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT count(*) FROM campuses",
        "question": "What is the total number of campuses?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM campuses"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT count(*) FROM campuses",
        "question": "Can you tell me the total count of campuses?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM campuses"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT count(*) FROM campuses",
        "question": "What's the overall number of campuses?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM campuses"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT count(*) FROM campuses",
        "question": "Could you provide the total quantity of campuses?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM campuses"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT count(*) FROM campuses",
        "question": "How many campuses are there in total?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM campuses"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT count(*) FROM campuses",
        "question": "What's the aggregate number of campuses?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM campuses"
    },
    {
        "db_id": "world_1",
        "question": "Which continent has the most diverse languages?",
        "gold_parse": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "select Continent from country group by Continent order by count ( Continent ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "On which continent can you find the greatest diversity of languages?",
        "gold_parse": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "select Continent from country group by Continent order by count ( Continent ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which continent is home to the most varied languages?",
        "gold_parse": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "select Continent from country group by Continent order by count ( Continent ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which continent boasts the highest language diversity?",
        "gold_parse": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "select Continent from country group by Continent order by count ( Continent ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "In which continent are the most different languages spoken?",
        "gold_parse": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "select Continent from country group by Continent order by count ( Continent ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which continent has the highest variety of languages?",
        "gold_parse": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "select Continent from country group by Continent order by count ( Continent ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "gold_parse": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
        "query": "SELECT Count ( * ) FROM cars_data WHERE Accelerate = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the cylinder count for the Volvo model with the slowest acceleration?",
        "gold_parse": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
        "query": "SELECT Count ( * ) FROM cars_data WHERE Accelerate = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "How many cylinders does the slowest accelerating Volvo model have?",
        "gold_parse": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
        "query": "SELECT Count ( * ) FROM cars_data WHERE Accelerate = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "For the Volvo model with the minimum acceleration, how many cylinders does it have?",
        "gold_parse": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
        "query": "SELECT Count ( * ) FROM cars_data WHERE Accelerate = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What's the number of cylinders in the least accelerating Volvo model?",
        "gold_parse": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
        "query": "SELECT Count ( * ) FROM cars_data WHERE Accelerate = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Can you tell me the number of cylinders in the Volvo model that has the slowest acceleration?",
        "gold_parse": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
        "query": "SELECT Count ( * ) FROM cars_data WHERE Accelerate = value",
        "correctness": 0
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name FROM vehicles ORDER BY model_year DESC",
        "question": "Show names for all vehicles in descending order of model year.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM vehicles ORDER BY model_year DESC"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name FROM vehicles ORDER BY model_year DESC",
        "question": "Display the names of all vehicles sorted by model year in descending order",
        "correctness": 1,
        "gold_parse": "SELECT name FROM vehicles ORDER BY model_year DESC"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name FROM vehicles ORDER BY model_year DESC",
        "question": "List all vehicle names in order of model year from newest to oldest",
        "correctness": 1,
        "gold_parse": "SELECT name FROM vehicles ORDER BY model_year DESC"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name FROM vehicles ORDER BY model_year DESC",
        "question": "Can you show all vehicle names arranged by model year in a descending order?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM vehicles ORDER BY model_year DESC"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name FROM vehicles ORDER BY model_year DESC",
        "question": "Provide the names of all vehicles, ordered from the most recent model year down",
        "correctness": 1,
        "gold_parse": "SELECT name FROM vehicles ORDER BY model_year DESC"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name FROM vehicles ORDER BY model_year DESC",
        "question": "Show me the names of all vehicles, sorted from the latest model year to the earliest",
        "correctness": 1,
        "gold_parse": "SELECT name FROM vehicles ORDER BY model_year DESC"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM tv_series WHERE num_of_seasons < 2;",
        "question": "Which TV series have less than 2 seasons?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM tv_series WHERE num_of_seasons < 2;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM tv_series WHERE num_of_seasons < 2;",
        "question": "Can you list the TV series that have fewer than 2 seasons?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM tv_series WHERE num_of_seasons < 2;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM tv_series WHERE num_of_seasons < 2;",
        "question": "What are the TV series with less than 2 seasons?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM tv_series WHERE num_of_seasons < 2;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM tv_series WHERE num_of_seasons < 2;",
        "question": "Identify the TV series that have less than two seasons.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM tv_series WHERE num_of_seasons < 2;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM tv_series WHERE num_of_seasons < 2;",
        "question": "Show me the TV series that have under 2 seasons.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM tv_series WHERE num_of_seasons < 2;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM tv_series WHERE num_of_seasons < 2;",
        "question": "Which television series have less than a couple of seasons?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM tv_series WHERE num_of_seasons < 2;"
    },
    {
        "db_id": "swimming",
        "question": "What is the name of the stadium which held the most events?",
        "gold_parse": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM stadium GROUP BY ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Can you tell me the name of the stadium that hosted the most events?",
        "gold_parse": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM stadium GROUP BY ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Which stadium has held the highest number of events?",
        "gold_parse": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM stadium GROUP BY ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "What's the name of the stadium with the most events?",
        "gold_parse": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM stadium GROUP BY ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Which stadium has been the venue for the most events?",
        "gold_parse": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM stadium GROUP BY ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "What is the stadium that has accommodated the most events called?",
        "gold_parse": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM stadium GROUP BY ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the minimum life expectancy of regions with cities having a population over 2 million.",
        "gold_parse": "",
        "query": "SELECT Region, MIN(LifeExpectancy) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Population > 2000000;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the lowest life expectancy in regions where cities have a population exceeding 2 million?",
        "gold_parse": "",
        "query": "SELECT Region, MIN(LifeExpectancy) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Population > 2000000;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Identify the minimum life expectancy in areas with cities that have more than 2 million residents.",
        "gold_parse": "",
        "query": "SELECT Region, MIN(LifeExpectancy) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Population > 2000000;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Can you find the smallest life expectancy in regions where the city population is over 2 million?",
        "gold_parse": "",
        "query": "SELECT Region, MIN(LifeExpectancy) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Population > 2000000;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What's the least life expectancy in regions with cities that have a population of over 2 million?",
        "gold_parse": "",
        "query": "SELECT Region, MIN(LifeExpectancy) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Population > 2000000;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Determine the minimum life expectancy in regions where cities have a population greater than 2 million.",
        "gold_parse": "",
        "query": "SELECT Region, MIN(LifeExpectancy) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Population > 2000000;",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY > = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Show all details of employees who earn between 8000 and 12000 and have a commission that is not null or are not in department 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY > = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Retrieve all data for employees whose salary ranges from 8000 to 12000, who either have a commission or are not part of department 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY > = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Provide all records of employees with salaries from 8000 to 12000, and either have a commission or are not in department 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY > = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Display all employee information for those earning between 8000 and 12000, with a commission or not in department 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY > = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Get all employee details for those with salaries between 8000 and 12000, who have a commission or are not in department 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY > = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Count the number of universities that do not participate in the baketball match.",
        "gold_parse": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
        "query": "SELECT Count ( * ) FROM university AS T1 WHERE T1.School_ID NOT IN ( SELECT T2.School_ID FROM basketball_match AS T2 WHERE T2.ACC_Road = value )",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "How many universities are not participating in the basketball match?",
        "gold_parse": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
        "query": "SELECT Count ( * ) FROM university AS T1 WHERE T1.School_ID NOT IN ( SELECT T2.School_ID FROM basketball_match AS T2 WHERE T2.ACC_Road = value )",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What is the number of universities not involved in the basketball match?",
        "gold_parse": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
        "query": "SELECT Count ( * ) FROM university AS T1 WHERE T1.School_ID NOT IN ( SELECT T2.School_ID FROM basketball_match AS T2 WHERE T2.ACC_Road = value )",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Can you count the universities that are not taking part in the basketball match?",
        "gold_parse": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
        "query": "SELECT Count ( * ) FROM university AS T1 WHERE T1.School_ID NOT IN ( SELECT T2.School_ID FROM basketball_match AS T2 WHERE T2.ACC_Road = value )",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Determine the number of universities that are not in the basketball match.",
        "gold_parse": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
        "query": "SELECT Count ( * ) FROM university AS T1 WHERE T1.School_ID NOT IN ( SELECT T2.School_ID FROM basketball_match AS T2 WHERE T2.ACC_Road = value )",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What's the count of universities not participating in the basketball match?",
        "gold_parse": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
        "query": "SELECT Count ( * ) FROM university AS T1 WHERE T1.School_ID NOT IN ( SELECT T2.School_ID FROM basketball_match AS T2 WHERE T2.ACC_Road = value )",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Can you list the customers whose checking balances are below the average?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Who are the customers with checking balances less than the average?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Identify the customers with checking balances that fall below the average.",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Which customers have checking balances lower than the average?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Could you tell me the names of customers with checking balances that are less than the average?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",
        "question": "Show the invoice number and the number of transactions for each invoice.",
        "correctness": 1,
        "gold_parse": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",
        "question": "Display the invoice number along with the count of transactions for each invoice.",
        "correctness": 1,
        "gold_parse": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",
        "question": "Can you provide the invoice number and the transaction count for each invoice?",
        "correctness": 1,
        "gold_parse": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",
        "question": "I want to see the invoice number and the number of transactions for each invoice.",
        "correctness": 1,
        "gold_parse": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",
        "question": "Could you show me the invoice number and the transaction count for each invoice?",
        "correctness": 1,
        "gold_parse": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",
        "question": "Let's have the invoice number and the number of transactions for each invoice.",
        "correctness": 1,
        "gold_parse": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE department = 'Computer Science';",
        "question": "What are the names of courses in the Computer Science department?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE department = 'Computer Science';"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE department = 'Computer Science';",
        "question": "Can you list the courses offered by the Computer Science department?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE department = 'Computer Science';"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE department = 'Computer Science';",
        "question": "What are the course titles under the Computer Science department?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE department = 'Computer Science';"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE department = 'Computer Science';",
        "question": "Could you tell me the names of the courses in the Computer Science department?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE department = 'Computer Science';"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE department = 'Computer Science';",
        "question": "What courses does the Computer Science department offer?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE department = 'Computer Science';"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE department = 'Computer Science';",
        "question": "What are the Computer Science department's courses called?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE department = 'Computer Science';"
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of the employees whose salary if within the range of smallest salary and 2500.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM employees ORDER BY SALARY Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Show all employee details where the salary is between the minimum salary and 2500.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM employees ORDER BY SALARY Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Provide all the data for employees earning between the lowest salary and 2500.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM employees ORDER BY SALARY Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you list all the employees who earn a salary that falls between the smallest salary and 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM employees ORDER BY SALARY Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "I want to see all the information for employees whose salary is within the range of the lowest salary and 2500.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM employees ORDER BY SALARY Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Display the records of all employees with a salary between the smallest salary and 2500.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM employees ORDER BY SALARY Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What is the first name and country code of the oldest player?",
        "gold_parse": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "query": "select first_name , country_code from players order by birth_date desc limit value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Can you tell me the first name and country code of the player with the most age?",
        "gold_parse": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "query": "select first_name , country_code from players order by birth_date desc limit value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Who is the oldest player and what is their first name and country code?",
        "gold_parse": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "query": "select first_name , country_code from players order by birth_date desc limit value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "I want to know the first name and country code of the oldest player.",
        "gold_parse": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "query": "select first_name , country_code from players order by birth_date desc limit value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What's the first name and country code of the player who is oldest?",
        "gold_parse": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "query": "select first_name , country_code from players order by birth_date desc limit value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Could you provide the first name and country code of the player who has lived the longest?",
        "gold_parse": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "query": "select first_name , country_code from players order by birth_date desc limit value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "gold_parse": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "query": "SELECT Name FROM wine WHERE Year < ( SELECT Year FROM wine WHERE Winery = value )",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Can you list the wines that were produced before any wine from Brander winery was made?",
        "gold_parse": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "query": "SELECT Name FROM wine WHERE Year < ( SELECT Year FROM wine WHERE Winery = value )",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the wines that have a production year earlier than any wine produced by Brander winery?",
        "gold_parse": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "query": "SELECT Name FROM wine WHERE Year < ( SELECT Year FROM wine WHERE Winery = value )",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Could you tell me the names of wines that were made before Brander winery started producing any wines?",
        "gold_parse": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "query": "SELECT Name FROM wine WHERE Year < ( SELECT Year FROM wine WHERE Winery = value )",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "I'd like to know the wines that were produced before the earliest wine from Brander winery.",
        "gold_parse": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "query": "SELECT Name FROM wine WHERE Year < ( SELECT Year FROM wine WHERE Winery = value )",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Which wines have a production year that predates all wines made by Brander winery?",
        "gold_parse": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "query": "SELECT Name FROM wine WHERE Year < ( SELECT Year FROM wine WHERE Winery = value )",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_selling_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Can you provide the name and usual buying and selling prices for products with the color 'yellow'?",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_selling_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the name and standard purchase and sale prices of 'yellow' colored products?",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_selling_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Could you list the name and average buying and selling prices of items that are yellow in color?",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_selling_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "I need the name and typical buying and selling prices of all yellow products.",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_selling_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names and the usual buying and selling prices of the items that are colored yellow?",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_selling_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who are in the same grade as Eve?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade IN (SELECT grade FROM Highschooler WHERE name = 'Eve');",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Who are the high school students in the same grade as Eve?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade IN (SELECT grade FROM Highschooler WHERE name = 'Eve');",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Can you list the highschoolers who are in the same grade level as Eve?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade IN (SELECT grade FROM Highschooler WHERE name = 'Eve');",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of students in high school who are in the same grade as Eve?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade IN (SELECT grade FROM Highschooler WHERE name = 'Eve');",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Identify the highschoolers who are in the same grade as Eve.",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade IN (SELECT grade FROM Highschooler WHERE name = 'Eve');",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Could you tell me the names of highschoolers who share the same grade with Eve?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade IN (SELECT grade FROM Highschooler WHERE name = 'Eve');",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "question": "Find courses that ran in Fall 2009 and in Spring 2010.",
        "correctness": 1,
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    {
        "db_id": "college_2",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "question": "Identify the courses that were offered in Fall 2009 and Spring 2010.",
        "correctness": 1,
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    {
        "db_id": "college_2",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "question": "Which courses were conducted in Fall 2009 and Spring 2010?",
        "correctness": 1,
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    {
        "db_id": "college_2",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "question": "Can you list the courses that took place in Fall 2009 and Spring 2010?",
        "correctness": 1,
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    {
        "db_id": "college_2",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "question": "Show me the courses that happened in Fall 2009 and Spring 2010.",
        "correctness": 1,
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    {
        "db_id": "college_2",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "question": "What are the courses that were held in Fall 2009 and Spring 2010?",
        "correctness": 1,
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
        "question": "Find the IDs of customers whose name contains \"Diana\".",
        "correctness": 1,
        "gold_parse": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
        "question": "Retrieve the IDs of customers with 'Diana' in their name",
        "correctness": 1,
        "gold_parse": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
        "question": "Show the customer IDs where the name includes 'Diana'",
        "correctness": 1,
        "gold_parse": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
        "question": "Can you find customer IDs for names that have 'Diana'?",
        "correctness": 1,
        "gold_parse": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
        "question": "What are the IDs of customers with a name containing 'Diana'?",
        "correctness": 1,
        "gold_parse": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\""
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
        "question": "I need the customer IDs where the name contains 'Diana'",
        "correctness": 1,
        "gold_parse": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\""
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1",
        "question": "Who is the author of paper 1?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1",
        "question": "Who wrote paper 1?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1",
        "question": "Can you tell me the author of paper 1?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1",
        "question": "Who's the writer of paper 1?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1",
        "question": "Who penned paper 1?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1",
        "question": "Who is the person that authored paper 1?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1"
    },
    {
        "db_id": "music_2",
        "question": "Which vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"?",
        "gold_parse": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"",
        "query": "SELECT T2.Type FROM Band AS T1 JOIN Vocals AS T2 ON T1.Id = T2.Bandmate WHERE T1.Lastname = value AND T1.Lastname = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What was the vocal type of the musician named 'Heilo' in the song 'Der Kapitan'?",
        "gold_parse": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"",
        "query": "SELECT T2.Type FROM Band AS T1 JOIN Vocals AS T2 ON T1.Id = T2.Bandmate WHERE T1.Lastname = value AND T1.Lastname = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "In the song 'Der Kapitan', what vocal type did the musician 'Heilo' perform?",
        "gold_parse": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"",
        "query": "SELECT T2.Type FROM Band AS T1 JOIN Vocals AS T2 ON T1.Id = T2.Bandmate WHERE T1.Lastname = value AND T1.Lastname = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Can you tell me the vocal type that the musician with the surname 'Heilo' used in the song 'Der Kapitan'?",
        "gold_parse": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"",
        "query": "SELECT T2.Type FROM Band AS T1 JOIN Vocals AS T2 ON T1.Id = T2.Bandmate WHERE T1.Lastname = value AND T1.Lastname = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What type of vocals did the musician 'Heilo' use in the song titled 'Der Kapitan'?",
        "gold_parse": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"",
        "query": "SELECT T2.Type FROM Band AS T1 JOIN Vocals AS T2 ON T1.Id = T2.Bandmate WHERE T1.Lastname = value AND T1.Lastname = value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "In 'Der Kapitan', what was the vocal type of the musician with the last name 'Heilo'?",
        "gold_parse": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"",
        "query": "SELECT T2.Type FROM Band AS T1 JOIN Vocals AS T2 ON T1.Id = T2.Bandmate WHERE T1.Lastname = value AND T1.Lastname = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What is the average weight of all players?",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "query": "SELECT Avg ( stamina ) FROM Player_Attributes",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What's the mean weight of all players?",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "query": "SELECT Avg ( stamina ) FROM Player_Attributes",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "Can you tell me the average weight of all players?",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "query": "SELECT Avg ( stamina ) FROM Player_Attributes",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What is the mean weight for all players?",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "query": "SELECT Avg ( stamina ) FROM Player_Attributes",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "Could you find the average weight of all players?",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "query": "SELECT Avg ( stamina ) FROM Player_Attributes",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "I'd like to know the average weight of all players.",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "query": "SELECT Avg ( stamina ) FROM Player_Attributes",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY LIKE value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Provide all details for employees earning between 8000 and 12000 and have a non-null commission or are not in department 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY LIKE value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Show all data for employees whose salary ranges from 8000 to 12000, who either have a commission or are not part of department 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY LIKE value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you list all the employees who earn between 8000 and 12000, have a commission, or are not in department 40?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY LIKE value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "I need all information on employees who have salaries between 8000 and 12000, receive a commission, or are not in department 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY LIKE value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Display all employee records with salaries from 8000 to 12000, who either have a commission or are not in department 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY LIKE value",
        "correctness": 0
    },
    {
        "db_id": "address_1",
        "query": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" ORDER BY distance DESC LIMIT 1",
        "question": "What is the name of the city furthest to Boston?",
        "correctness": 1,
        "gold_parse": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" ORDER BY distance DESC LIMIT 1"
    }
]