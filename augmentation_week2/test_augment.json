[
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "question": "Can you provide the names and ids of all artists who have three or more albums, sorted alphabetically?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "question": "Show me the artist names and their ids who have at least three albums, in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "question": "I need the names and ids of all artists with three or more albums, arranged in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "question": "Could you list the names and ids of artists who have a minimum of three albums, in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "question": "Display the names and ids of all artists having at least three albums, alphabetically sorted.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum degree program ID for each semester description?",
        "gold_parse": "",
        "query": "SELECT semester_description, MAX(degree_program_id) FROM Semesters JOIN Degree_Programs ON Semesters.semester_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What's the highest degree program ID for each semester description?",
        "gold_parse": "",
        "query": "SELECT semester_description, MAX(degree_program_id) FROM Semesters JOIN Degree_Programs ON Semesters.semester_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Can you tell me the maximum degree program ID for every semester description?",
        "gold_parse": "",
        "query": "SELECT semester_description, MAX(degree_program_id) FROM Semesters JOIN Degree_Programs ON Semesters.semester_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the top degree program ID for each semester description?",
        "gold_parse": "",
        "query": "SELECT semester_description, MAX(degree_program_id) FROM Semesters JOIN Degree_Programs ON Semesters.semester_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Could you find the maximum degree program ID for each semester description?",
        "gold_parse": "",
        "query": "SELECT semester_description, MAX(degree_program_id) FROM Semesters JOIN Degree_Programs ON Semesters.semester_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "I want to know the maximum degree program ID for each semester description.",
        "gold_parse": "",
        "query": "SELECT semester_description, MAX(degree_program_id) FROM Semesters JOIN Degree_Programs ON Semesters.semester_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "election",
        "query": "SELECT * FROM election",
        "question": "Show all the information about election.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM election"
    },
    {
        "db_id": "election",
        "query": "SELECT * FROM election",
        "question": "Display all the data related to the election.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM election"
    },
    {
        "db_id": "election",
        "query": "SELECT * FROM election",
        "question": "Can you provide all the details about the election?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM election"
    },
    {
        "db_id": "election",
        "query": "SELECT * FROM election",
        "question": "I want to see all the information regarding the election.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM election"
    },
    {
        "db_id": "election",
        "query": "SELECT * FROM election",
        "question": "Show me everything about the election.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM election"
    },
    {
        "db_id": "election",
        "query": "SELECT * FROM election",
        "question": "What is all the information available about the election?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM election"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
        "question": "List the average room count of the properties with gardens.",
        "correctness": 1,
        "gold_parse": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
        "question": "What is the average number of rooms for properties that have gardens?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
        "question": "Can you provide the mean room count for properties featuring gardens?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
        "question": "What's the average room count for properties with gardens?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
        "question": "Could you list the average number of rooms in properties with gardens?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
        "question": "Show the average room count for properties that include gardens.",
        "correctness": 1,
        "gold_parse": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"",
        "question": "Which apartments have type code \"Flat\"? Give me their apartment numbers.",
        "correctness": 1,
        "gold_parse": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"",
        "question": "Can you provide the apartment numbers for the apartments that are classified as 'Flat'?",
        "correctness": 1,
        "gold_parse": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"",
        "question": "What are the apartment numbers for the apartments with the type code 'Flat'?",
        "correctness": 1,
        "gold_parse": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"",
        "question": "I'm looking for the apartment numbers of the 'Flat' type apartments. Can you provide them?",
        "correctness": 1,
        "gold_parse": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"",
        "question": "Could you list the apartment numbers for all 'Flat' type apartments?",
        "correctness": 1,
        "gold_parse": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\""
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"",
        "question": "I need the apartment numbers for all apartments that have a type code of 'Flat'. Can you give me that?",
        "correctness": 1,
        "gold_parse": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\""
    },
    {
        "db_id": "formula_1",
        "question": "Find the names of all races held in 2017.",
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017",
        "query": "SELECT country FROM circuits WHERE circuitRef = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of races that took place in 2017?",
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017",
        "query": "SELECT country FROM circuits WHERE circuitRef = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Can you list the races that were held in 2017?",
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017",
        "query": "SELECT country FROM circuits WHERE circuitRef = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Show me the races that occurred in 2017.",
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017",
        "query": "SELECT country FROM circuits WHERE circuitRef = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "I want to know the races that happened in 2017.",
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017",
        "query": "SELECT country FROM circuits WHERE circuitRef = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Which races were conducted in 2017?",
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017",
        "query": "SELECT country FROM circuits WHERE circuitRef = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
        "question": "Count the number of financial transactions that the account with the name 337 has.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\""
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
        "question": "How many financial transactions does the account named 337 have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\""
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
        "question": "What is the total number of financial transactions for the account 337?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\""
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
        "question": "Can you count the financial transactions for the account with the name 337?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\""
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
        "question": "What's the count of financial transactions for the account labeled 337?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\""
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
        "question": "Determine the number of financial transactions for the account named 337.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT count(*) ,  food FROM goods GROUP BY food",
        "question": "Count the number of goods for each food type.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  food FROM goods GROUP BY food"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT count(*) ,  food FROM goods GROUP BY food",
        "question": "How many goods are there for each type of food?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  food FROM goods GROUP BY food"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT count(*) ,  food FROM goods GROUP BY food",
        "question": "Can you tally the number of goods per food type?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  food FROM goods GROUP BY food"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT count(*) ,  food FROM goods GROUP BY food",
        "question": "What is the quantity of goods for each food category?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  food FROM goods GROUP BY food"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT count(*) ,  food FROM goods GROUP BY food",
        "question": "Determine the count of goods for every food type.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  food FROM goods GROUP BY food"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT count(*) ,  food FROM goods GROUP BY food",
        "question": "What's the total number of goods for each kind of food?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  food FROM goods GROUP BY food"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE nationality = 'Australian';",
        "question": "What are the names of Australian actors?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM actor WHERE nationality = 'Australian';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE nationality = 'Australian';",
        "question": "Can you list the names of actors from Australia?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM actor WHERE nationality = 'Australian';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE nationality = 'Australian';",
        "question": "Who are some actors that are from Australia?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM actor WHERE nationality = 'Australian';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE nationality = 'Australian';",
        "question": "Could you tell me the names of Australian actors?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM actor WHERE nationality = 'Australian';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE nationality = 'Australian';",
        "question": "I'd like to know the names of actors who are Australian.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM actor WHERE nationality = 'Australian';"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE nationality = 'Australian';",
        "question": "Who are the actors hailing from Australia?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM actor WHERE nationality = 'Australian';"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "Which states have an area greater than 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "In which states is the area more than 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "Can you list the states with an area exceeding 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "What are the states that have an area larger than 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "Which states possess an area greater than 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "Identify the states where the area is over 50,000 square kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "student_1",
        "question": "Which classrooms are used by grade 4?",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "query": "SELECT Classroom FROM list WHERE Grade = value ORDER BY Classroom Asc",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What classrooms are occupied by the fourth grade?",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "query": "SELECT Classroom FROM list WHERE Grade = value ORDER BY Classroom Asc",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Can you tell me which classrooms are being used by grade 4?",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "query": "SELECT Classroom FROM list WHERE Grade = value ORDER BY Classroom Asc",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which classrooms are allocated to the fourth grade?",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "query": "SELECT Classroom FROM list WHERE Grade = value ORDER BY Classroom Asc",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Do you know the classrooms that are used by grade 4?",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "query": "SELECT Classroom FROM list WHERE Grade = value ORDER BY Classroom Asc",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the classrooms that grade 4 uses?",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "query": "SELECT Classroom FROM list WHERE Grade = value ORDER BY Classroom Asc",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
        "question": "Find the titles of all movies directed by steven spielberg.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
        "question": "What are the names of all films directed by Steven Spielberg?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
        "question": "Can you list all the movies that Steven Spielberg directed?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
        "question": "Show me all the movie titles that were directed by Steven Spielberg.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
        "question": "What are all the films Steven Spielberg has directed?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
        "question": "Provide the titles of all movies that have been directed by Steven Spielberg.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'"
    },
    {
        "db_id": "farm",
        "question": "What are the statuses and average populations of each city?",
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "query": "SELECT City_ID , Avg ( Population ) FROM city GROUP BY City_ID",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Can you tell me the statuses and average populations for all cities?",
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "query": "SELECT City_ID , Avg ( Population ) FROM city GROUP BY City_ID",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the status and average population of every city?",
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "query": "SELECT City_ID , Avg ( Population ) FROM city GROUP BY City_ID",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Could you provide the statuses and average populations of each city?",
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "query": "SELECT City_ID , Avg ( Population ) FROM city GROUP BY City_ID",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "I'd like to know the status and average population of all cities.",
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "query": "SELECT City_ID , Avg ( Population ) FROM city GROUP BY City_ID",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What are the average populations and statuses of each city?",
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "query": "SELECT City_ID , Avg ( Population ) FROM city GROUP BY City_ID",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name and college of students whose decisions are yes in the tryout.",
        "gold_parse": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "query": "SELECT T1.cName , T1.enr FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Identify the students with a 'yes' decision in the tryout, along with their college names.",
        "gold_parse": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "query": "SELECT T1.cName , T1.enr FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Can you provide the names and colleges of students who got a 'yes' in the tryout?",
        "gold_parse": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "query": "SELECT T1.cName , T1.enr FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Who are the students that received a 'yes' in the tryout and what colleges do they attend?",
        "gold_parse": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "query": "SELECT T1.cName , T1.enr FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "I need to know the students who got a 'yes' in the tryout and their respective colleges.",
        "gold_parse": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "query": "SELECT T1.cName , T1.enr FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Show me the students and their colleges who have a 'yes' decision in the tryout.",
        "gold_parse": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "query": "SELECT T1.cName , T1.enr FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT * FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Which official native languages include the term 'English'?",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT * FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Can you list the official native languages that have 'English' in them?",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT * FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official languages that have 'English' as part of their name?",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT * FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Identify the official native languages that incorporate the word 'English'.",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT * FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show me the official native languages where 'English' appears in the name.",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT * FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT title FROM papers WHERE title LIKE \"%Database%\"",
        "question": "Which papers have the substring \"Database\" in their titles? Show the titles of the papers.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM papers WHERE title LIKE \"%Database%\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT title FROM papers WHERE title LIKE \"%Database%\"",
        "question": "Can you list the titles of papers that include 'Database' in their titles?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM papers WHERE title LIKE \"%Database%\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT title FROM papers WHERE title LIKE \"%Database%\"",
        "question": "What are the titles of papers that contain 'Database' in them?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM papers WHERE title LIKE \"%Database%\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT title FROM papers WHERE title LIKE \"%Database%\"",
        "question": "Show me the paper titles that have 'Database' as a substring.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM papers WHERE title LIKE \"%Database%\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT title FROM papers WHERE title LIKE \"%Database%\"",
        "question": "I want to see the titles of papers that have 'Database' in their titles.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM papers WHERE title LIKE \"%Database%\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT title FROM papers WHERE title LIKE \"%Database%\"",
        "question": "Which paper titles include the word 'Database'?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM papers WHERE title LIKE \"%Database%\""
    },
    {
        "db_id": "flight_4",
        "question": "How many airports are there per city in the United States? Order the cities by decreasing number of airports.",
        "gold_parse": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "query": "SELECT city , Count ( * ) FROM airports GROUP BY city ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the count of airports in each city in the US, sorted by the cities with the most airports?",
        "gold_parse": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "query": "SELECT city , Count ( * ) FROM airports GROUP BY city ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Can you list the cities in the United States by the number of airports they have, in descending order?",
        "gold_parse": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "query": "SELECT city , Count ( * ) FROM airports GROUP BY city ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "In the United States, which cities have the most airports? List them in descending order.",
        "gold_parse": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "query": "SELECT city , Count ( * ) FROM airports GROUP BY city ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Provide a list of US cities, ordered by the number of airports they have, from most to least.",
        "gold_parse": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "query": "SELECT city , Count ( * ) FROM airports GROUP BY city ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "How many airports does each city in the United States have? Arrange the cities from the one with the most airports to the least.",
        "gold_parse": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "query": "SELECT city , Count ( * ) FROM airports GROUP BY city ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "course_teach",
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "gold_parse": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "query": "SELECT Name FROM teacher EXCEPT SELECT Name FROM teacher",
        "correctness": 0
    },
    {
        "db_id": "course_teach",
        "question": "Can you list the teachers whose courses are yet to be scheduled?",
        "gold_parse": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "query": "SELECT Name FROM teacher EXCEPT SELECT Name FROM teacher",
        "correctness": 0
    },
    {
        "db_id": "course_teach",
        "question": "Who are the teachers with courses that haven't been arranged?",
        "gold_parse": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "query": "SELECT Name FROM teacher EXCEPT SELECT Name FROM teacher",
        "correctness": 0
    },
    {
        "db_id": "course_teach",
        "question": "What are the names of the instructors whose classes are not yet scheduled?",
        "gold_parse": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "query": "SELECT Name FROM teacher EXCEPT SELECT Name FROM teacher",
        "correctness": 0
    },
    {
        "db_id": "course_teach",
        "question": "Could you tell me the teachers whose courses are still not arranged?",
        "gold_parse": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "query": "SELECT Name FROM teacher EXCEPT SELECT Name FROM teacher",
        "correctness": 0
    },
    {
        "db_id": "course_teach",
        "question": "Identify the teachers whose courses have not been planned yet.",
        "gold_parse": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "query": "SELECT Name FROM teacher EXCEPT SELECT Name FROM teacher",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Show the country names and their continent IDs for those with continent IDs greater than 2.",
        "gold_parse": "",
        "query": "SELECT T1.CountryName, T2.Continent FROM countries AS T1 JOIN continents AS T2 ON T1.Continent = T2.ContId WHERE T2.Continent > 2;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Display the names of countries and their associated continent IDs where the continent ID is more than 2.",
        "gold_parse": "",
        "query": "SELECT T1.CountryName, T2.Continent FROM countries AS T1 JOIN continents AS T2 ON T1.Continent = T2.ContId WHERE T2.Continent > 2;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Can you list the countries and their continent IDs where the continent ID exceeds 2?",
        "gold_parse": "",
        "query": "SELECT T1.CountryName, T2.Continent FROM countries AS T1 JOIN continents AS T2 ON T1.Continent = T2.ContId WHERE T2.Continent > 2;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Provide the country names and their continent IDs for those having continent IDs above 2.",
        "gold_parse": "",
        "query": "SELECT T1.CountryName, T2.Continent FROM countries AS T1 JOIN continents AS T2 ON T1.Continent = T2.ContId WHERE T2.Continent > 2;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "I want to see the country names and their continent IDs where the continent ID is greater than 2.",
        "gold_parse": "",
        "query": "SELECT T1.CountryName, T2.Continent FROM countries AS T1 JOIN continents AS T2 ON T1.Continent = T2.ContId WHERE T2.Continent > 2;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Could you show me the countries and their continent IDs if the continent ID is over 2?",
        "gold_parse": "",
        "query": "SELECT T1.CountryName, T2.Continent FROM countries AS T1 JOIN continents AS T2 ON T1.Continent = T2.ContId WHERE T2.Continent > 2;",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "How many order items correspond to each order id?",
        "gold_parse": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",
        "query": "SELECT order_id , Count ( * ) FROM Orders GROUP BY order_id",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "What is the count of order items for each order id?",
        "gold_parse": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",
        "query": "SELECT order_id , Count ( * ) FROM Orders GROUP BY order_id",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Can you tell me the number of order items for every order id?",
        "gold_parse": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",
        "query": "SELECT order_id , Count ( * ) FROM Orders GROUP BY order_id",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "What's the total number of order items per order id?",
        "gold_parse": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",
        "query": "SELECT order_id , Count ( * ) FROM Orders GROUP BY order_id",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "How many items are there in each order based on order id?",
        "gold_parse": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",
        "query": "SELECT order_id , Count ( * ) FROM Orders GROUP BY order_id",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "For each order id, how many order items are there?",
        "gold_parse": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",
        "query": "SELECT order_id , Count ( * ) FROM Orders GROUP BY order_id",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the first names and last names of the students that minor in the department with DNO 140.",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Can you provide the first and last names of students who have a minor in the department numbered 140?",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Who are the students, by first and last name, minoring in the department with DNO 140?",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "I need to know the first names and last names of students minoring in the department with DNO 140.",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Could you list the first and last names of students who minor in the department with the DNO 140?",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What's the first and last names of students who have chosen to minor in the department with DNO 140?",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT * FROM warehouses",
        "question": "Select all details of all warehouses.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM warehouses"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT * FROM warehouses",
        "question": "Retrieve all information about every warehouse",
        "correctness": 1,
        "gold_parse": "SELECT * FROM warehouses"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT * FROM warehouses",
        "question": "Show me all the details of all warehouses",
        "correctness": 1,
        "gold_parse": "SELECT * FROM warehouses"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT * FROM warehouses",
        "question": "Can you provide all the details for each warehouse?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM warehouses"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT * FROM warehouses",
        "question": "I need all the information on all warehouses",
        "correctness": 1,
        "gold_parse": "SELECT * FROM warehouses"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT * FROM warehouses",
        "question": "Display all the warehouse details",
        "correctness": 1,
        "gold_parse": "SELECT * FROM warehouses"
    },
    {
        "db_id": "loan_1",
        "question": "Find the state, account type, and credit score of the customer whose number of loan is 0.",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "query": "SELECT state , acc_type , no_of_loans FROM customer WHERE cust_name = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Identify the state, account type, and credit score for the customer with no loans.",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "query": "SELECT state , acc_type , no_of_loans FROM customer WHERE cust_name = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the state, account type, and credit score of the customer who has not taken any loans?",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "query": "SELECT state , acc_type , no_of_loans FROM customer WHERE cust_name = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Can you provide the state, account type, and credit score of the customer who has zero loans?",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "query": "SELECT state , acc_type , no_of_loans FROM customer WHERE cust_name = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Show the state, account type, and credit score of the customer who doesn't have any loans.",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "query": "SELECT state , acc_type , no_of_loans FROM customer WHERE cust_name = value",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Retrieve the state, account type, and credit score of the customer with no loan records.",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "query": "SELECT state , acc_type , no_of_loans FROM customer WHERE cust_name = value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Name mountains with peak altitudes above 3000 meters.",
        "gold_parse": "",
        "query": "SELECT mountain_name, MAX(mountain_altitude) FROM mountain GROUP BY mountain_name HAVING MAX(mountain_altitude) < 3000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List all mountains that have peak altitudes over 3000 meters.",
        "gold_parse": "",
        "query": "SELECT mountain_name, MAX(mountain_altitude) FROM mountain GROUP BY mountain_name HAVING MAX(mountain_altitude) < 3000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which mountains have a peak altitude greater than 3000 meters?",
        "gold_parse": "",
        "query": "SELECT mountain_name, MAX(mountain_altitude) FROM mountain GROUP BY mountain_name HAVING MAX(mountain_altitude) < 3000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Can you name the mountains with peaks higher than 3000 meters?",
        "gold_parse": "",
        "query": "SELECT mountain_name, MAX(mountain_altitude) FROM mountain GROUP BY mountain_name HAVING MAX(mountain_altitude) < 3000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Identify mountains with peak altitudes exceeding 3000 meters.",
        "gold_parse": "",
        "query": "SELECT mountain_name, MAX(mountain_altitude) FROM mountain GROUP BY mountain_name HAVING MAX(mountain_altitude) < 3000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Show me mountains that have peak altitudes above 3000 meters.",
        "gold_parse": "",
        "query": "SELECT mountain_name, MAX(mountain_altitude) FROM mountain GROUP BY mountain_name HAVING MAX(mountain_altitude) < 3000;",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the name of dorms which have TV Lounge but no Study Room as amenity.",
        "gold_parse": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "query": "SELECT T1.dorm_name FROM Dorm AS T1 EXCEPT SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Identify the dormitories that offer a TV Lounge but lack a Study Room.",
        "gold_parse": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "query": "SELECT T1.dorm_name FROM Dorm AS T1 EXCEPT SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the names of the dorms that have a TV Lounge but do not have a Study Room?",
        "gold_parse": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "query": "SELECT T1.dorm_name FROM Dorm AS T1 EXCEPT SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Can you list the dorms that provide a TV Lounge but no Study Room?",
        "gold_parse": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "query": "SELECT T1.dorm_name FROM Dorm AS T1 EXCEPT SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Which dorms have a TV Lounge but are missing a Study Room?",
        "gold_parse": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "query": "SELECT T1.dorm_name FROM Dorm AS T1 EXCEPT SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Show me the dorms that come with a TV Lounge but without a Study Room.",
        "gold_parse": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "query": "SELECT T1.dorm_name FROM Dorm AS T1 EXCEPT SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name = value",
        "correctness": 0
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
        "question": "What are the average and maximum values for each type of content in boxes?",
        "correctness": 1,
        "gold_parse": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
        "question": "What are the mean and peak values for each content category in boxes?",
        "correctness": 1,
        "gold_parse": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
        "question": "Can you tell me the average and highest values for each kind of content in boxes?",
        "correctness": 1,
        "gold_parse": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
        "question": "What's the average and maximum values for each content type in boxes?",
        "correctness": 1,
        "gold_parse": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
        "question": "Could you provide the average and maximum values for each type of content in boxes?",
        "correctness": 1,
        "gold_parse": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
        "question": "I'd like to know the average and top values for each type of content in boxes.",
        "correctness": 1,
        "gold_parse": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS"
    },
    {
        "db_id": "singer",
        "question": "Count the number of songs that reached the highest position for each singer.",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(Song_ID) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position = 1;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "How many songs of each singer have reached the top position?",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(Song_ID) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position = 1;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "For each singer, count their songs that have hit the number one spot.",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(Song_ID) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position = 1;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What is the count of songs that have achieved the highest rank for each singer?",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(Song_ID) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position = 1;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Determine the number of songs that each singer has had at the number one position.",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(Song_ID) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position = 1;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "For every singer, how many of their songs have reached the peak position?",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(Song_ID) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position = 1;",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards",
        "question": "Show the number of customer cards.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards",
        "question": "Display the count of customer cards.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards",
        "question": "How many customer cards are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards",
        "question": "Can you count the number of customer cards?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards",
        "question": "What is the total number of customer cards?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards",
        "question": "Provide the total count of customer cards.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards"
    },
    {
        "db_id": "dorm_1",
        "question": "Find the average age and number of male students (with sex M) from each city.",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "query": "SELECT Avg ( Age ) , city_code FROM Student WHERE Sex = value GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the average age and total count of male students in each city?",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "query": "SELECT Avg ( Age ) , city_code FROM Student WHERE Sex = value GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Can you provide the mean age and total number of male students from every city?",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "query": "SELECT Avg ( Age ) , city_code FROM Student WHERE Sex = value GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What's the mean age and the total of male students per city?",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "query": "SELECT Avg ( Age ) , city_code FROM Student WHERE Sex = value GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Could you tell me the average age and the number of male students in each city?",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "query": "SELECT Avg ( Age ) , city_code FROM Student WHERE Sex = value GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "I want to know the average age and the number of male students from each city.",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "query": "SELECT Avg ( Age ) , city_code FROM Student WHERE Sex = value GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
        "question": "What are the classes of races that have two or more corresponding races?",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2"
    },
    {
        "db_id": "race_track",
        "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
        "question": "Can you list the classes of races that have at least two corresponding races?",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2"
    },
    {
        "db_id": "race_track",
        "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
        "question": "Which race classes have more than one corresponding race?",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2"
    },
    {
        "db_id": "race_track",
        "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
        "question": "What are the race classes that correspond to two or more races?",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2"
    },
    {
        "db_id": "race_track",
        "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
        "question": "Could you tell me the classes of races that have two or more associated races?",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2"
    },
    {
        "db_id": "race_track",
        "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
        "question": "Identify the classes of races that have a minimum of two corresponding races.",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year > 2015;",
        "question": "What are the titles of papers published after 2015?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year > 2015;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year > 2015;",
        "question": "Can you list the titles of papers that were published post 2015?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year > 2015;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year > 2015;",
        "question": "What are the names of papers that have been published since 2015?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year > 2015;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year > 2015;",
        "question": "Could you provide the titles of papers published subsequent to 2015?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year > 2015;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year > 2015;",
        "question": "Show me the titles of papers that came out after 2015.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year > 2015;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year > 2015;",
        "question": "I'd like to know the titles of papers published after the year 2015.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year > 2015;"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
        "question": "What is the name of the least popular plane?",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
        "question": "Which plane has the least popularity?",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
        "question": "Can you tell me the name of the plane that is least popular?",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
        "question": "What's the name of the plane with the lowest popularity?",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
        "question": "Identify the least popular plane by name.",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
        "question": "What is the least favored plane's name?",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "question": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.",
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "query": "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Can you display the departure and arrival dates for all flights traveling from Los Angeles to Honolulu?",
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "query": "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the departure and arrival dates for all flights going from Los Angeles to Honolulu?",
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "query": "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "I'd like to see the departure and arrival dates for all flights from Los Angeles to Honolulu.",
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "query": "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Could you list the departure and arrival dates for all flights from Los Angeles to Honolulu?",
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "query": "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Provide the departure and arrival dates for all flights that are from Los Angeles to Honolulu.",
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "query": "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "book_review",
        "query": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\"",
        "question": "What is the average number of readers for books of type \"Novel\"?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\""
    },
    {
        "db_id": "book_review",
        "query": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\"",
        "question": "What's the mean count of readers for 'Novel' type books?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\""
    },
    {
        "db_id": "book_review",
        "query": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\"",
        "question": "Can you tell me the average reader count for books categorized as 'Novel'?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\""
    },
    {
        "db_id": "book_review",
        "query": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\"",
        "question": "What is the mean number of readers for novels?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\""
    },
    {
        "db_id": "book_review",
        "query": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\"",
        "question": "How many readers, on average, do novels have?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\""
    },
    {
        "db_id": "book_review",
        "query": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\"",
        "question": "What is the average readership for books classified as 'Novel'?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\""
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM club ORDER BY Name ASC",
        "question": "List the name of clubs in ascending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM club ORDER BY Name ASC"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM club ORDER BY Name ASC",
        "question": "Can you show me the names of clubs in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM club ORDER BY Name ASC"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM club ORDER BY Name ASC",
        "question": "Display the club names in ascending order alphabetically.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM club ORDER BY Name ASC"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM club ORDER BY Name ASC",
        "question": "I need to see the club names listed in alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM club ORDER BY Name ASC"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM club ORDER BY Name ASC",
        "question": "Could you provide the names of clubs in an ascending alphabetical sequence?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM club ORDER BY Name ASC"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM club ORDER BY Name ASC",
        "question": "Please list the names of all clubs in ascending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM club ORDER BY Name ASC"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT count(*) FROM technician",
        "question": "What is the number of technicians?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM technician"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT count(*) FROM technician",
        "question": "How many technicians are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM technician"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT count(*) FROM technician",
        "question": "Can you tell me the total count of technicians?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM technician"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT count(*) FROM technician",
        "question": "What's the total number of technicians?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM technician"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT count(*) FROM technician",
        "question": "Could you provide the count of technicians?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM technician"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT count(*) FROM technician",
        "question": "What's the count of technicians?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM technician"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
        "question": "Return the names and ids of all platforms with the download rank of 1.",
        "correctness": 1,
        "gold_parse": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
        "question": "Show me the names and ids of all platforms that have a download rank of 1.",
        "correctness": 1,
        "gold_parse": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
        "question": "Can you provide the names and ids of all platforms with a download rank of 1?",
        "correctness": 1,
        "gold_parse": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
        "question": "I want to see the names and ids of all platforms that have a download rank of 1.",
        "correctness": 1,
        "gold_parse": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
        "question": "Could you list the names and ids of all platforms with a download rank of 1?",
        "correctness": 1,
        "gold_parse": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
        "question": "Display the names and ids of all platforms that have a download rank of 1.",
        "correctness": 1,
        "gold_parse": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';",
        "question": "Find the names of all modern rooms with a base price below $160 and two beds.",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';",
        "question": "Can you list the names of all modern rooms that have two beds and a base price less than $160?",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';",
        "question": "What are the names of modern rooms that cost less than $160 and have two beds?",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';",
        "question": "Could you provide the names of all modern rooms with two beds that are priced below $160?",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';",
        "question": "I'm looking for the names of modern rooms with a base price under $160 and two beds, can you find them?",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';",
        "question": "Identify the modern rooms with two beds and a base price less than $160.",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';"
    },
    {
        "db_id": "college_2",
        "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?",
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "query": "SELECT Count ( * ) FROM classroom WHERE capacity > value AND building = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the count of rooms in the Lamberton building that can accommodate less than 50 people?",
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "query": "SELECT Count ( * ) FROM classroom WHERE capacity > value AND building = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many rooms in the Lamberton building have a capacity of less than 50?",
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "query": "SELECT Count ( * ) FROM classroom WHERE capacity > value AND building = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Can you tell me the number of rooms in the Lamberton building that hold fewer than 50 people?",
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "query": "SELECT Count ( * ) FROM classroom WHERE capacity > value AND building = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What's the total number of rooms in the Lamberton building with a capacity under 50?",
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "query": "SELECT Count ( * ) FROM classroom WHERE capacity > value AND building = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "In the Lamberton building, how many rooms are there that can hold less than 50 people?",
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "query": "SELECT Count ( * ) FROM classroom WHERE capacity > value AND building = value",
        "correctness": 0
    },
    {
        "db_id": "car_racing",
        "query": "SELECT max(Points) ,  min(Points) FROM driver",
        "question": "What are the maximum and minimum points of drivers.",
        "correctness": 1,
        "gold_parse": "SELECT max(Points) ,  min(Points) FROM driver"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT max(Points) ,  min(Points) FROM driver",
        "question": "What are the highest and lowest points scored by drivers?",
        "correctness": 1,
        "gold_parse": "SELECT max(Points) ,  min(Points) FROM driver"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT max(Points) ,  min(Points) FROM driver",
        "question": "Can you tell me the maximum and minimum points drivers have?",
        "correctness": 1,
        "gold_parse": "SELECT max(Points) ,  min(Points) FROM driver"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT max(Points) ,  min(Points) FROM driver",
        "question": "What's the range of points for drivers, from highest to lowest?",
        "correctness": 1,
        "gold_parse": "SELECT max(Points) ,  min(Points) FROM driver"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT max(Points) ,  min(Points) FROM driver",
        "question": "Could you provide the maximum and minimum points of drivers?",
        "correctness": 1,
        "gold_parse": "SELECT max(Points) ,  min(Points) FROM driver"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT max(Points) ,  min(Points) FROM driver",
        "question": "What are the peak and bottom points of drivers?",
        "correctness": 1,
        "gold_parse": "SELECT max(Points) ,  min(Points) FROM driver"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
        "question": "Show all staff names who have been both speaker and sponsor in some conference.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
        "question": "Display the names of all staff members who have served as both a speaker and a sponsor at a conference.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
        "question": "Can you list all the staff who have been a speaker and also a sponsor at any conference?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
        "question": "Who are all the staff members that have been both a speaker and a sponsor in a conference?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
        "question": "Identify all staff who have taken on the roles of both speaker and sponsor in a conference.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
        "question": "Provide the names of all staff who have acted as both a speaker and a sponsor in any conference.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "question": "Return the founded year for the school with the largest enrollment.",
        "correctness": 1,
        "gold_parse": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "question": "What is the year of establishment for the school with the highest number of students?",
        "correctness": 1,
        "gold_parse": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "question": "Can you tell me the year when the school with the most students was founded?",
        "correctness": 1,
        "gold_parse": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "question": "What year was the school with the most enrollments established?",
        "correctness": 1,
        "gold_parse": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "question": "In what year was the school with the largest student body founded?",
        "correctness": 1,
        "gold_parse": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "question": "Find the year of foundation for the school with the highest enrollment.",
        "correctness": 1,
        "gold_parse": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"
    },
    {
        "db_id": "network_2",
        "question": "How many friends does Dan have?",
        "gold_parse": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "query": "SELECT Count ( * ) FROM PersonFriend WHERE friend = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the total number of friends that Dan has?",
        "gold_parse": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "query": "SELECT Count ( * ) FROM PersonFriend WHERE friend = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Can you tell me how many friends Dan has?",
        "gold_parse": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "query": "SELECT Count ( * ) FROM PersonFriend WHERE friend = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What's the count of Dan's friends?",
        "gold_parse": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "query": "SELECT Count ( * ) FROM PersonFriend WHERE friend = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Do you know the number of friends Dan has?",
        "gold_parse": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "query": "SELECT Count ( * ) FROM PersonFriend WHERE friend = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Could you tell me the quantity of Dan's friends?",
        "gold_parse": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "query": "SELECT Count ( * ) FROM PersonFriend WHERE friend = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of all people who are friends with Alice for the shortest amount of time?",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age = ( SELECT Min ( T2.year ) FROM PersonFriend AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who are the individuals that have the shortest friendship duration with Alice?",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age = ( SELECT Min ( T2.year ) FROM PersonFriend AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Can you list the people who have been friends with Alice for the least amount of time?",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age = ( SELECT Min ( T2.year ) FROM PersonFriend AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who has the shortest friendship span with Alice?",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age = ( SELECT Min ( T2.year ) FROM PersonFriend AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who has been Alice's friend for the shortest period?",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age = ( SELECT Min ( T2.year ) FROM PersonFriend AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who are the people that Alice has been friends with for the least duration?",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age = ( SELECT Min ( T2.year ) FROM PersonFriend AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code FROM weather WHERE min_temperature_f > value OR min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "In which zip codes can we find a station where the maximum temperature has reached 80 or more and on what date did this occur?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code FROM weather WHERE min_temperature_f > value OR min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Can you tell me the zip codes where a station recorded a maximum temperature of 80 or above and the date it happened?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code FROM weather WHERE min_temperature_f > value OR min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the zip codes of the stations where the temperature has gone up to at least 80 and the date of this event?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code FROM weather WHERE min_temperature_f > value OR min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Identify the zip codes where a station has reported a maximum temperature of 80 or higher and the date it was recorded.",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code FROM weather WHERE min_temperature_f > value OR min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Which zip codes have stations that have recorded a maximum temperature of at least 80 and when was this recorded?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code FROM weather WHERE min_temperature_f > value OR min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the mountain names and their altitudes in India?",
        "gold_parse": "",
        "query": "SELECT mountain_name, country_name FROM mountain WHERE country_name = 'IND';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Can you list the names and altitudes of mountains in India?",
        "gold_parse": "",
        "query": "SELECT mountain_name, country_name FROM mountain WHERE country_name = 'IND';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the names and heights of Indian mountains?",
        "gold_parse": "",
        "query": "SELECT mountain_name, country_name FROM mountain WHERE country_name = 'IND';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Could you tell me the names and altitudes of mountains located in India?",
        "gold_parse": "",
        "query": "SELECT mountain_name, country_name FROM mountain WHERE country_name = 'IND';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "I want to know the names and altitudes of mountains in India. Can you provide this information?",
        "gold_parse": "",
        "query": "SELECT mountain_name, country_name FROM mountain WHERE country_name = 'IND';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the names of mountains in India and how high are they?",
        "gold_parse": "",
        "query": "SELECT mountain_name, country_name FROM mountain WHERE country_name = 'IND';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Name all rivers longer than 500 kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "List all rivers that are more than 500 kilometers long.",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Can you show me all rivers with a length greater than 500 kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Which rivers have a length exceeding 500 kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Identify all rivers that stretch more than 500 kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "What are the rivers that are longer than 500 kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of customers with an order status of Pending, sorted by customer id?",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "query": "SELECT DISTINCT customer_name FROM Customers ORDER BY customer_id Asc",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Can you list the unique names of customers who have a pending order status, ordered by their customer id?",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "query": "SELECT DISTINCT customer_name FROM Customers ORDER BY customer_id Asc",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the different customer names with a pending order status, arranged by customer id?",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "query": "SELECT DISTINCT customer_name FROM Customers ORDER BY customer_id Asc",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Could you provide the distinct customer names with an order status of Pending, sorted according to customer id?",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "query": "SELECT DISTINCT customer_name FROM Customers ORDER BY customer_id Asc",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Show me the unique customer names who have their order status as Pending, sorted by customer id.",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "query": "SELECT DISTINCT customer_name FROM Customers ORDER BY customer_id Asc",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the individual customer names with a Pending order status, sorted in the order of customer id?",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "query": "SELECT DISTINCT customer_name FROM Customers ORDER BY customer_id Asc",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
        "question": "Find the list of attribute data types possessed by more than 3 attribute definitions.",
        "correctness": 1,
        "gold_parse": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
        "question": "Identify the attribute data types that are used by more than three attribute definitions.",
        "correctness": 1,
        "gold_parse": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
        "question": "Can you show me the attribute data types that are associated with over three attribute definitions?",
        "correctness": 1,
        "gold_parse": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
        "question": "What are the attribute data types that are linked to more than three attribute definitions?",
        "correctness": 1,
        "gold_parse": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
        "question": "Which attribute data types are connected to more than three attribute definitions?",
        "correctness": 1,
        "gold_parse": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
        "question": "Provide a list of attribute data types that are related to more than three attribute definitions.",
        "correctness": 1,
        "gold_parse": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;",
        "question": "How many concerts are there for each concert name?",
        "correctness": 1,
        "gold_parse": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;",
        "question": "What is the count of concerts for each concert name?",
        "correctness": 1,
        "gold_parse": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;",
        "question": "Can you tell me the number of concerts for each concert name?",
        "correctness": 1,
        "gold_parse": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;",
        "question": "What's the total number of concerts per concert name?",
        "correctness": 1,
        "gold_parse": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;",
        "question": "Could you provide the count of concerts by concert name?",
        "correctness": 1,
        "gold_parse": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;",
        "question": "How many concerts are organized for each concert name?",
        "correctness": 1,
        "gold_parse": "SELECT concert_Name, COUNT(*) FROM concert GROUP BY concert_Name;"
    },
    {
        "db_id": "music_4",
        "question": "What are the famous titles of artists who do not have any volumes?",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
        "query": "SELECT Famous_Title FROM artist EXCEPT SELECT Famous_Title FROM artist",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Can you list the popular titles of artists who have no volumes?",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
        "query": "SELECT Famous_Title FROM artist EXCEPT SELECT Famous_Title FROM artist",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the renowned titles of artists without any volumes?",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
        "query": "SELECT Famous_Title FROM artist EXCEPT SELECT Famous_Title FROM artist",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Could you tell me the well-known titles of artists who don't have any volumes?",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
        "query": "SELECT Famous_Title FROM artist EXCEPT SELECT Famous_Title FROM artist",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the notable titles of artists who have zero volumes?",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
        "query": "SELECT Famous_Title FROM artist EXCEPT SELECT Famous_Title FROM artist",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Can you name the celebrated titles of artists who lack volumes?",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
        "query": "SELECT Famous_Title FROM artist EXCEPT SELECT Famous_Title FROM artist",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the completion dates of all the tests that have result \"Fail\"?",
        "gold_parse": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id WHERE T3.test_result = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Can you list the dates when all the tests with a 'Fail' result were completed?",
        "gold_parse": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id WHERE T3.test_result = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the dates of completion for all tests that resulted in 'Fail'?",
        "gold_parse": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id WHERE T3.test_result = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Could you tell me the completion dates for all tests that have 'Fail' as a result?",
        "gold_parse": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id WHERE T3.test_result = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "I'd like to know the completion dates for all tests that failed.",
        "gold_parse": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id WHERE T3.test_result = value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "When were all the tests that have a 'Fail' result completed?",
        "gold_parse": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id WHERE T3.test_result = value",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');",
        "question": "What are the names of singers who are the same age as Hank?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');",
        "question": "Can you list the singers who have the same age as Hank?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');",
        "question": "Who are the singers that are the same age as Hank?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');",
        "question": "Could you tell me the names of singers who are as old as Hank?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');",
        "question": "I'd like to know the singers who are the same age as Hank.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');",
        "question": "Which singers have the same age as Hank?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Hank');"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
        "question": "How many models do not have the wifi function?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
        "question": "What is the count of models without wifi capability?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
        "question": "Can you tell me the number of models that lack wifi functionality?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
        "question": "How many models are there that don't support wifi?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
        "question": "What's the total number of models that don't have wifi?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
        "question": "Can you count the models that don't come with wifi?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'"
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_pounds ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What is the mean and lowest cost (in Euro) of all items?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_pounds ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Can you tell me the average and minimum cost (in Euro) of all goods?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_pounds ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What's the average and least price (in Euro) for all products?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_pounds ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Could you provide the average and minimum pricing (in Euro) of all products?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_pounds ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the mean and lowest value (in Euro) of all items?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_pounds ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "gold_parse": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "query": "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Can you tell me the semesters where no students are enrolled?",
        "gold_parse": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "query": "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Which semesters have zero student enrollment?",
        "gold_parse": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "query": "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Identify the semesters with no student registrations.",
        "gold_parse": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "query": "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the semesters with no students enrolled?",
        "gold_parse": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "query": "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "List the semesters that have no student enrollments.",
        "gold_parse": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "query": "SELECT T1.semester_id FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT T2.semester_id FROM Student_Enrolment AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
        "question": "List the manufacturers that are associated with more than one club.",
        "correctness": 1,
        "gold_parse": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
        "question": "Show the manufacturers that are linked with more than one club.",
        "correctness": 1,
        "gold_parse": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
        "question": "Can you provide the manufacturers that are connected to more than one club?",
        "correctness": 1,
        "gold_parse": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
        "question": "Which manufacturers are associated with more than a single club?",
        "correctness": 1,
        "gold_parse": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
        "question": "Identify the manufacturers that have associations with more than one club.",
        "correctness": 1,
        "gold_parse": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
        "question": "Display the manufacturers that have links with multiple clubs.",
        "correctness": 1,
        "gold_parse": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "question": "Which destination has least number of flights?",
        "correctness": 1,
        "gold_parse": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "question": "What destination is served by the fewest flights?",
        "correctness": 1,
        "gold_parse": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "question": "Which location has the smallest number of flights?",
        "correctness": 1,
        "gold_parse": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "question": "What is the destination with the minimum number of flights?",
        "correctness": 1,
        "gold_parse": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "question": "Which destination is least frequented by flights?",
        "correctness": 1,
        "gold_parse": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "question": "What destination has the lowest flight count?",
        "correctness": 1,
        "gold_parse": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "twitter_1",
        "question": "Find the name and partition id for users who tweeted less than twice.",
        "gold_parse": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "query": "SELECT T2.name , T2.partitionid FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Retrieve the name and partition id of users who have tweeted fewer than two times.",
        "gold_parse": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "query": "SELECT T2.name , T2.partitionid FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Can you show me the name and partition id for users with less than two tweets?",
        "gold_parse": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "query": "SELECT T2.name , T2.partitionid FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "I need the name and partition id for users who have not tweeted more than once.",
        "gold_parse": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "query": "SELECT T2.name , T2.partitionid FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "What are the names and partition ids of users who tweeted less than twice?",
        "gold_parse": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "query": "SELECT T2.name , T2.partitionid FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Could you find the name and partition id for users who have tweeted one time or not at all?",
        "gold_parse": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "query": "SELECT T2.name , T2.partitionid FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Return the last name, id and phone number of the customer who has made the greatest number of orders.",
        "gold_parse": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT customer_last_name , phone_number , customer_id FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Who is the customer with the highest number of orders? Provide their last name, id, and phone number.",
        "gold_parse": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT customer_last_name , phone_number , customer_id FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Can you show me the last name, id, and phone number of the customer who has placed the most orders?",
        "gold_parse": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT customer_last_name , phone_number , customer_id FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "I need the last name, id, and phone number of the customer who has the most orders.",
        "gold_parse": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT customer_last_name , phone_number , customer_id FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Who has made the most orders? I need their last name, id, and phone number.",
        "gold_parse": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT customer_last_name , phone_number , customer_id FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Provide the last name, id, and phone number of the customer with the maximum number of orders.",
        "gold_parse": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT customer_last_name , phone_number , customer_id FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location codes with at least 3 documents.",
        "gold_parse": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3",
        "query": "SELECT T2.Location_Code FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T1.Location_Code HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Display the location codes that have a minimum of 3 documents.",
        "gold_parse": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3",
        "query": "SELECT T2.Location_Code FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T1.Location_Code HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Can you list the location codes where the document count is three or more?",
        "gold_parse": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3",
        "query": "SELECT T2.Location_Code FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T1.Location_Code HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "I want to see the location codes that are associated with at least three documents.",
        "gold_parse": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3",
        "query": "SELECT T2.Location_Code FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T1.Location_Code HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show me the location codes that have three or more documents.",
        "gold_parse": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3",
        "query": "SELECT T2.Location_Code FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T1.Location_Code HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the location codes that have at least three documents?",
        "gold_parse": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3",
        "query": "SELECT T2.Location_Code FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T1.Location_Code HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "question": "How many students are affected by cat allergies?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "question": "What is the count of students suffering from cat allergies?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "question": "Can you tell me the number of students who have cat allergies?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "question": "What's the total number of students with cat allergies?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "question": "How many students have been diagnosed with allergies to cats?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\""
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "question": "What is the total count of students who are allergic to cats?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"",
        "question": "Find the titles of papers whose first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"?",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"",
        "question": "What are the titles of papers where the first author's last name is 'Ohori' and their institution is based in Japan?",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"",
        "question": "Can you list the titles of papers that have 'Ohori' as the first author and are affiliated with a Japanese institution?",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"",
        "question": "Show me the titles of papers where the first author, with the last name 'Ohori', is associated with an institution in Japan.",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"",
        "question": "I'm looking for the titles of papers where the first author's surname is 'Ohori' and they are affiliated with a Japanese institution.",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"",
        "question": "Could you provide the titles of papers where the first author is 'Ohori' and their institution is located in Japan?",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\""
    },
    {
        "db_id": "match_season",
        "question": "What are the draft pick numbers and draft classes for players who play the Defender position?",
        "gold_parse": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "query": "SELECT Draft_Pick_Number , Season FROM match_season WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Can you list the draft pick numbers and draft classes for individuals playing in the Defender position?",
        "gold_parse": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "query": "SELECT Draft_Pick_Number , Season FROM match_season WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the draft classes and pick numbers for players in the Defender role?",
        "gold_parse": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "query": "SELECT Draft_Pick_Number , Season FROM match_season WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Could you provide the draft pick numbers and draft classes for players who are Defenders?",
        "gold_parse": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "query": "SELECT Draft_Pick_Number , Season FROM match_season WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "I'd like to know the draft pick numbers and draft classes for players in the Defender position.",
        "gold_parse": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "query": "SELECT Draft_Pick_Number , Season FROM match_season WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Can I get the draft classes and pick numbers for those who play as Defenders?",
        "gold_parse": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "query": "SELECT Draft_Pick_Number , Season FROM match_season WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "art_1",
        "query": "SELECT medium FROM paintings WHERE paintingID  =  80",
        "question": "What are the medium types of the painting with id = 80",
        "correctness": 1,
        "gold_parse": "SELECT medium FROM paintings WHERE paintingID  =  80"
    },
    {
        "db_id": "art_1",
        "query": "SELECT medium FROM paintings WHERE paintingID  =  80",
        "question": "What medium was used for the painting with an id of 80?",
        "correctness": 1,
        "gold_parse": "SELECT medium FROM paintings WHERE paintingID  =  80"
    },
    {
        "db_id": "art_1",
        "query": "SELECT medium FROM paintings WHERE paintingID  =  80",
        "question": "Can you tell me the medium types of the painting that has an id of 80?",
        "correctness": 1,
        "gold_parse": "SELECT medium FROM paintings WHERE paintingID  =  80"
    },
    {
        "db_id": "art_1",
        "query": "SELECT medium FROM paintings WHERE paintingID  =  80",
        "question": "What are the types of medium used in the painting with id 80?",
        "correctness": 1,
        "gold_parse": "SELECT medium FROM paintings WHERE paintingID  =  80"
    },
    {
        "db_id": "art_1",
        "query": "SELECT medium FROM paintings WHERE paintingID  =  80",
        "question": "What kind of medium was used in the painting with the id 80?",
        "correctness": 1,
        "gold_parse": "SELECT medium FROM paintings WHERE paintingID  =  80"
    },
    {
        "db_id": "art_1",
        "query": "SELECT medium FROM paintings WHERE paintingID  =  80",
        "question": "Could you tell me the medium types for the painting with id 80?",
        "correctness": 1,
        "gold_parse": "SELECT medium FROM paintings WHERE paintingID  =  80"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "What are the names of the youngest singers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "Who are the most junior singers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "Can you list the names of the youngest vocalists?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "Who are the singers with the least age?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "Identify the youngest individuals in the singing profession.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "Who are the least aged singers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "student_assessment",
        "question": "How many students attend course English?",
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "query": "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What is the total number of students enrolled in the English course?",
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "query": "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Can you tell me the count of students taking the English course?",
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "query": "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What's the student count for the English course?",
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "query": "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "How many students are there in the English course?",
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "query": "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What is the enrollment number for the English course?",
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "query": "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of paragraphs.",
        "gold_parse": "SELECT count(*) FROM Paragraphs",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many paragraphs are there?",
        "gold_parse": "SELECT count(*) FROM Paragraphs",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Can you tell me the total number of paragraphs?",
        "gold_parse": "SELECT count(*) FROM Paragraphs",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the count of paragraphs?",
        "gold_parse": "SELECT count(*) FROM Paragraphs",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Determine the number of paragraphs.",
        "gold_parse": "SELECT count(*) FROM Paragraphs",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What's the total count of paragraphs?",
        "gold_parse": "SELECT count(*) FROM Paragraphs",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the lowest population density in states larger than 500 square kilometers?",
        "gold_parse": "",
        "query": "SELECT AVG(density) FROM state WHERE area > 500;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What's the smallest population density in states with an area greater than 500 square kilometers?",
        "gold_parse": "",
        "query": "SELECT AVG(density) FROM state WHERE area > 500;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Can you find the minimum population density in states that are over 500 square kilometers?",
        "gold_parse": "",
        "query": "SELECT AVG(density) FROM state WHERE area > 500;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the least population density in states exceeding 500 square kilometers in size?",
        "gold_parse": "",
        "query": "SELECT AVG(density) FROM state WHERE area > 500;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Identify the lowest population density in states larger than 500 square kilometers.",
        "gold_parse": "",
        "query": "SELECT AVG(density) FROM state WHERE area > 500;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the minimum population density in states that have an area more than 500 square kilometers?",
        "gold_parse": "",
        "query": "SELECT AVG(density) FROM state WHERE area > 500;",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "question": "Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.",
        "correctness": 1,
        "gold_parse": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "question": "What is the title and id of the movie that is rented for 0.99 and has less than 3 copies in stock?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "question": "Can you provide the film title and id for the movie that costs 0.99 to rent and has an inventory of less than 3?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "question": "Identify the movie that has a rental fee of 0.99 and less than 3 items in the inventory. Provide the film title and id.",
        "correctness": 1,
        "gold_parse": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "question": "Which movie, with a rental price of 0.99 and less than 3 in stock, can you give me the title and id for?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "question": "What's the title and id of the film that is available for rent at 0.99 and has less than 3 copies left?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee WHERE salary  >  100000",
        "question": "Show ids for all employees with at least 100000 salary.",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee WHERE salary  >  100000",
        "question": "Display the ids of all employees earning a salary of 100000 or more.",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee WHERE salary  >  100000",
        "question": "Can you list the ids of all employees who have a salary of at least 100000?",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee WHERE salary  >  100000",
        "question": "Provide the ids for all employees whose salary is 100000 or above.",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee WHERE salary  >  100000",
        "question": "I want to see the ids of all employees with a salary that's not less than 100000.",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee WHERE salary  >  100000",
        "question": "Show me the employee ids for those earning 100000 or more in salary.",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000"
    },
    {
        "db_id": "student_1",
        "question": "For each classroom, report the classroom number and the number of grades using it.",
        "gold_parse": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Can you provide the classroom number and the count of grades using each classroom?",
        "gold_parse": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "I need to know the classroom number and how many grades are using it for each classroom.",
        "gold_parse": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "For every classroom, could you tell me the classroom number and the number of grades using it?",
        "gold_parse": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What is the classroom number and the number of grades using it for each classroom?",
        "gold_parse": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Could you list the classroom number and the number of grades using it for all classrooms?",
        "gold_parse": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
        "question": "What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?",
        "correctness": 1,
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
        "question": "Which zip codes have a mean humidity less than 70 and have experienced a minimum of 100 trips?",
        "correctness": 1,
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
        "question": "Can you list the zip codes where the average humidity is under 70 and more than 100 trips have been made?",
        "correctness": 1,
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
        "question": "What are the zip codes where the average humidity is less than 70 and the number of trips is not less than 100?",
        "correctness": 1,
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
        "question": "Could you tell me the zip codes that have an average humidity of less than 70 and have had at least 100 trips?",
        "correctness": 1,
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
        "question": "Identify the zip codes with an average humidity below 70 and a trip count of at least 100.",
        "correctness": 1,
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
        "question": "Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?",
        "correctness": 1,
        "gold_parse": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
        "question": "Can you provide the dates and names of the exams that are not related to the subject code 'Database'?",
        "correctness": 1,
        "gold_parse": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
        "question": "What are the names and dates of the exams that don't have the subject code 'Database'?",
        "correctness": 1,
        "gold_parse": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
        "question": "Could you list the exam names and dates for exams not associated with the 'Database' subject code?",
        "correctness": 1,
        "gold_parse": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
        "question": "I need to know the dates and names of exams that aren't for the subject code 'Database'.",
        "correctness": 1,
        "gold_parse": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
        "question": "Show me the exam names and dates for exams that don't have 'Database' as their subject code.",
        "correctness": 1,
        "gold_parse": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
        "question": "Count the number of different customers who have bought a Monitor Product.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
        "question": "How many unique customers have purchased a Monitor Product?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
        "question": "What is the total number of distinct customers who have bought a Monitor Product?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
        "question": "Can you tell me the count of different customers who have acquired a Monitor Product?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
        "question": "Determine the number of individual customers who have bought a Monitor Product.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
        "question": "What's the count of unique customers who have purchased a Monitor Product?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\""
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)",
        "question": "What is the process name for the next process of the process with id 9?",
        "correctness": 1,
        "gold_parse": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)",
        "question": "Can you tell me the name of the process that follows the process with id 9?",
        "correctness": 1,
        "gold_parse": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)",
        "question": "What's the name of the process that comes after the process with id 9?",
        "correctness": 1,
        "gold_parse": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)",
        "question": "What do we call the process that is next in line after the process with id 9?",
        "correctness": 1,
        "gold_parse": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)",
        "question": "What is the subsequent process name for the process with id 9?",
        "correctness": 1,
        "gold_parse": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)",
        "question": "What is the name of the process that is next to the process with id 9?",
        "correctness": 1,
        "gold_parse": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "question": "On what dates were employees without the letter M in their first names hired?",
        "correctness": 1,
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "question": "Can you tell me the hiring dates for employees whose first names do not contain the letter M?",
        "correctness": 1,
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "question": "What are the hire dates for employees with no M in their first names?",
        "correctness": 1,
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "question": "Could you provide the dates of hiring for employees whose first names do not have the letter M?",
        "correctness": 1,
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "question": "I'd like to know the dates employees were hired whose first names do not include the letter M.",
        "correctness": 1,
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "question": "What are the dates when employees, whose first names do not have an M, were hired?",
        "correctness": 1,
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "question": "What are the names of teams that do no have match season record?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "question": "Can you list the teams that don't have a match season record?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "question": "Which teams lack a match season record?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "question": "Could you tell me the names of teams without a match season record?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "question": "I'm looking for teams that have no match season record, can you name them?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "question": "What teams are missing a match season record?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)"
    },
    {
        "db_id": "geography",
        "question": "What are the highest points in each state?",
        "gold_parse": "",
        "query": "SELECT state_name FROM highlow WHERE lowest_point = 'Death Valley';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What's the peak elevation in every state?",
        "gold_parse": "",
        "query": "SELECT state_name FROM highlow WHERE lowest_point = 'Death Valley';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Can you list the maximum elevations for all states?",
        "gold_parse": "",
        "query": "SELECT state_name FROM highlow WHERE lowest_point = 'Death Valley';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the tallest points in each state?",
        "gold_parse": "",
        "query": "SELECT state_name FROM highlow WHERE lowest_point = 'Death Valley';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the peak heights in every state?",
        "gold_parse": "",
        "query": "SELECT state_name FROM highlow WHERE lowest_point = 'Death Valley';",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Can you tell me the highest elevations in all states?",
        "gold_parse": "",
        "query": "SELECT state_name FROM highlow WHERE lowest_point = 'Death Valley';",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "List the name, origin and owner of each program.",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "query": "SELECT T2.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Provide the name, origin, and owner of each program.",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "query": "SELECT T2.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Can you show the name, origin, and owner for every program?",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "query": "SELECT T2.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "I want to see the name, origin, and owner of all programs.",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "query": "SELECT T2.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Display the name, origin, and owner of each program.",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "query": "SELECT T2.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Could you list the program's name, its origin, and its owner?",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "query": "SELECT T2.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the names of the members that have never registered at any branch?",
        "gold_parse": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "query": "SELECT Name FROM member EXCEPT SELECT Name FROM member",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Can you list the members who have not registered at any branch?",
        "gold_parse": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "query": "SELECT Name FROM member EXCEPT SELECT Name FROM member",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Who are the members that have no registration at any branch?",
        "gold_parse": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "query": "SELECT Name FROM member EXCEPT SELECT Name FROM member",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Could you tell me the names of the members who haven't registered at any branch?",
        "gold_parse": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "query": "SELECT Name FROM member EXCEPT SELECT Name FROM member",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Identify the members who have never registered at any branch.",
        "gold_parse": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "query": "SELECT Name FROM member EXCEPT SELECT Name FROM member",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Which members have never registered at any branch?",
        "gold_parse": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "query": "SELECT Name FROM member EXCEPT SELECT Name FROM member",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the names of counties that have at least two delegates.",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "query": "SELECT County_name FROM county GROUP BY County_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Display the names of counties with two or more delegates.",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "query": "SELECT County_name FROM county GROUP BY County_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Can you list the counties that have two or more delegates?",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "query": "SELECT County_name FROM county GROUP BY County_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which counties have at least two delegates?",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "query": "SELECT County_name FROM county GROUP BY County_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Identify the counties that have a minimum of two delegates.",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "query": "SELECT County_name FROM county GROUP BY County_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "What are the names of the counties that have two delegates or more?",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "query": "SELECT County_name FROM county GROUP BY County_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "In which zip codes can we find a station where the maximum temperature has reached or exceeded 80 and on what date did this occur?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Can you tell me the zip codes where a station recorded a maximum temperature of 80 or more and the date it happened?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the zip codes of the stations where the temperature has gone up to at least 80 and the date when this happened?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Identify the zip codes where a station has reported a maximum temperature of 80 or above and the date of this occurrence.",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Which zip codes have stations that recorded a maximum temperature of at least 80 and when was this recorded?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T1.catalog_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Can you list the names and capacities of catalog contents priced over 700 dollars?",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T1.catalog_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the names and capacities of the catalog contents that cost more than 700 dollars?",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T1.catalog_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Could you show me the catalog entries with a price higher than 700 dollars along with their capacities?",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T1.catalog_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "I'd like to see the catalog contents that are priced above 700 dollars. Can you display their names and capacities?",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T1.catalog_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which items in the catalog that are priced over 700 dollars can you show me, along with their capacities?",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T1.catalog_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the average rating and resolution of songs that are in Bangla?",
        "gold_parse": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "query": "SELECT Avg ( rating ) , Avg ( resolution ) FROM song",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the mean rating and resolution for songs in the Bangla language?",
        "gold_parse": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "query": "SELECT Avg ( rating ) , Avg ( resolution ) FROM song",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Can you tell me the average rating and resolution for Bangla songs?",
        "gold_parse": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "query": "SELECT Avg ( rating ) , Avg ( resolution ) FROM song",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What's the average rating and resolution of Bangla music tracks?",
        "gold_parse": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "query": "SELECT Avg ( rating ) , Avg ( resolution ) FROM song",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Could you provide the average rating and resolution of songs sung in Bangla?",
        "gold_parse": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "query": "SELECT Avg ( rating ) , Avg ( resolution ) FROM song",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "I'd like to know the average rating and resolution of songs that are in the Bangla language.",
        "gold_parse": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "query": "SELECT Avg ( rating ) , Avg ( resolution ) FROM song",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "When did the staff member named Janessa Sawayn join the company?",
        "gold_parse": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"",
        "query": "SELECT date_left_staff FROM Staff WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "What is the joining date of the employee named Janessa Sawayn?",
        "gold_parse": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"",
        "query": "SELECT date_left_staff FROM Staff WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "Can you tell me when Janessa Sawayn started working at the company?",
        "gold_parse": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"",
        "query": "SELECT date_left_staff FROM Staff WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "When was Janessa Sawayn's first day at the company?",
        "gold_parse": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"",
        "query": "SELECT date_left_staff FROM Staff WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "What was the date when Janessa Sawayn was hired?",
        "gold_parse": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"",
        "query": "SELECT date_left_staff FROM Staff WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "When did Janessa Sawayn become a part of the company?",
        "gold_parse": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"",
        "query": "SELECT date_left_staff FROM Staff WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Show the three highest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the top three support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "List the three greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Can you provide the top three support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Display the three largest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
        "question": "What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
        "question": "Can you provide the first and last names of artists who have created artworks using both oil and lithographic mediums?",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
        "question": "Who are the artists, by first and last name, that have paintings in both oil and lithographic mediums?",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
        "question": "I need the first and last names of artists who have used both oil and lithographic mediums in their paintings.",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
        "question": "Could you list the artists with both oil and lithographic medium paintings by their first and last names?",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
        "question": "What are the names of the artists who have paintings in both oil and lithographic mediums?",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\""
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');",
        "question": "What are the names of conductors that have the same name as 'Emma'?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');",
        "question": "Can you list the conductors who are named 'Emma'?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');",
        "question": "Who are the conductors with the name 'Emma'?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');",
        "question": "Could you tell me the conductors that go by the name 'Emma'?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');",
        "question": "I'm looking for conductors named 'Emma', can you help?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');",
        "question": "Which conductors have 'Emma' as their name?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Emma');"
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Show the job title and the difference between the lowest and highest salaries for jobs with a maximum salary between 12000 and 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you provide the job title and the salary range for jobs where the maximum salary is between 12000 and 18000?",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "I want to see the job title and the gap between the minimum and maximum salaries for jobs that have a maximum salary within 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Display the job title and the salary difference for jobs where the maximum salary falls between 12000 and 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Could you list the job title and the difference between the minimum and maximum salaries for jobs with a maximum salary in the range of 12000 to 18000?",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the most common type of Status across cities.",
        "correctness": 1,
        "gold_parse": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most frequent Status type in different cities?",
        "correctness": 1,
        "gold_parse": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Can you show me the most prevalent Status type across various cities?",
        "correctness": 1,
        "gold_parse": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What type of Status is most common in all cities?",
        "correctness": 1,
        "gold_parse": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Identify the most common type of Status in each city.",
        "correctness": 1,
        "gold_parse": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which Status type is most frequently seen across cities?",
        "correctness": 1,
        "gold_parse": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
        "question": "Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
        "question": "What are the names of the campuses located in Northridge, Los Angeles or San Francisco, San Francisco?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
        "question": "Can you list the campuses that are in Northridge, Los Angeles or San Francisco, San Francisco?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
        "question": "Identify the campuses situated in Northridge, Los Angeles or San Francisco, San Francisco.",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
        "question": "Which campuses are in Northridge, Los Angeles or San Francisco, San Francisco?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
        "question": "Provide the names of the campuses in Northridge, Los Angeles or San Francisco, San Francisco.",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
        "question": "What is the product id and product name for the cheapest Hardware type product?",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
        "question": "Can you tell me the product id and product name of the least expensive Hardware type product?",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
        "question": "What are the product id and product name of the Hardware type product with the lowest price?",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
        "question": "Could you provide the product id and product name for the most affordable Hardware type product?",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
        "question": "I need the product id and product name for the Hardware type product that costs the least.",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
        "question": "What's the product id and product name for the Hardware type product that is priced the lowest?",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "What is the product name and the color of the ordered items which have been shipped?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "Can you tell me the name and color of the products that have been shipped?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "What are the names and colors of the items that have been dispatched?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "Could you provide the product name and color of the items that have been sent?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "I'd like to know the name and color of the products that have been shipped.",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "What's the name and color of the shipped items?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the average order quantity per order.",
        "gold_parse": "SELECT avg(order_quantity) FROM order_items",
        "query": "SELECT Avg ( payment_method ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the mean quantity of each order?",
        "gold_parse": "SELECT avg(order_quantity) FROM order_items",
        "query": "SELECT Avg ( payment_method ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Can you calculate the average quantity for each order?",
        "gold_parse": "SELECT avg(order_quantity) FROM order_items",
        "query": "SELECT Avg ( payment_method ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What's the average number of items per order?",
        "gold_parse": "SELECT avg(order_quantity) FROM order_items",
        "query": "SELECT Avg ( payment_method ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Determine the average amount of items in each order.",
        "gold_parse": "SELECT avg(order_quantity) FROM order_items",
        "query": "SELECT Avg ( payment_method ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Could you find out the average quantity in every order?",
        "gold_parse": "SELECT avg(order_quantity) FROM order_items",
        "query": "SELECT Avg ( payment_method ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "question": "How many products were not included in any order?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "question": "What is the count of products that have never been ordered?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "question": "Can you tell me the number of products that were never part of an order?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "question": "What's the total number of products that haven't been included in any orders?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "question": "How many products have never been included in any orders?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "question": "What is the quantity of products that were never ordered?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
        "question": "What is the name of the county with the greatest population?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
        "question": "Which county has the highest population?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
        "question": "Can you tell me the name of the county with the most population?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
        "question": "What's the name of the most populated county?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
        "question": "Identify the county with the maximum population.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
        "question": "Which is the most populous county?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "program_share",
        "question": "Count the number of distinct channel owners.",
        "gold_parse": "SELECT count(DISTINCT OWNER) FROM channel",
        "query": "SELECT Count ( * ) FROM program",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "How many unique channel owners are there?",
        "gold_parse": "SELECT count(DISTINCT OWNER) FROM channel",
        "query": "SELECT Count ( * ) FROM program",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "What is the total number of different channel owners?",
        "gold_parse": "SELECT count(DISTINCT OWNER) FROM channel",
        "query": "SELECT Count ( * ) FROM program",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Can you tell me the count of distinct channel owners?",
        "gold_parse": "SELECT count(DISTINCT OWNER) FROM channel",
        "query": "SELECT Count ( * ) FROM program",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "What's the count of unique channel owners?",
        "gold_parse": "SELECT count(DISTINCT OWNER) FROM channel",
        "query": "SELECT Count ( * ) FROM program",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Determine the number of distinct channel owners.",
        "gold_parse": "SELECT count(DISTINCT OWNER) FROM channel",
        "query": "SELECT Count ( * ) FROM program",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "List the names, color descriptions and product descriptions of products with category \"Herbs\".",
        "gold_parse": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
        "query": "SELECT T2.product_name , T1.other_characteristic_details , T2.product_description FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_category_code = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Show the names, color descriptions, and product descriptions for items in the 'Herbs' category.",
        "gold_parse": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
        "query": "SELECT T2.product_name , T1.other_characteristic_details , T2.product_description FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_category_code = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Can you provide the names, color details, and product descriptions for products categorized as 'Herbs'?",
        "gold_parse": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
        "query": "SELECT T2.product_name , T1.other_characteristic_details , T2.product_description FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_category_code = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "I need the names, color descriptions, and product descriptions of all 'Herbs' category products.",
        "gold_parse": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
        "query": "SELECT T2.product_name , T1.other_characteristic_details , T2.product_description FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_category_code = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, color descriptions, and product descriptions of products in the 'Herbs' category?",
        "gold_parse": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
        "query": "SELECT T2.product_name , T1.other_characteristic_details , T2.product_description FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_category_code = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Display the names, color descriptions, and product descriptions of products under the 'Herbs' category.",
        "gold_parse": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
        "query": "SELECT T2.product_name , T1.other_characteristic_details , T2.product_description FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_category_code = value",
        "correctness": 0
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
        "question": "Show names for all cities where at least three students live.",
        "correctness": 1,
        "gold_parse": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
        "question": "Display the names of all cities where the number of students living is three or more.",
        "correctness": 1,
        "gold_parse": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
        "question": "Can you list the cities where the student population is at least three?",
        "correctness": 1,
        "gold_parse": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
        "question": "What are the names of cities where three or more students reside?",
        "correctness": 1,
        "gold_parse": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
        "question": "Identify all cities where the count of students is not less than three.",
        "correctness": 1,
        "gold_parse": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
        "question": "Provide the names of all cities that have a minimum of three students living in them.",
        "correctness": 1,
        "gold_parse": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
        "question": "Which store has the headphones in stock? Give me the store name and the total quantity.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
        "question": "Can you tell me which store currently has headphones available and their total quantity?",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
        "question": "What is the name of the store that has headphones in stock and how many do they have?",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
        "question": "Which store is carrying headphones and what is the total quantity?",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
        "question": "I'd like to know the store that has headphones in stock and the total quantity they have.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
        "question": "Could you provide the name of the store with headphones in stock and the total quantity?",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1"
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many feature types does each property have?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_id = Ref_Feature_Types.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the count of feature types for each property?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_id = Ref_Feature_Types.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Can you tell me the number of feature types each property possesses?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_id = Ref_Feature_Types.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What's the total number of feature types per property?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_id = Ref_Feature_Types.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many different types of features does each property have?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_id = Ref_Feature_Types.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the quantity of feature types that each property has?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_id = Ref_Feature_Types.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Show the details of all trucks in the order of their license number.",
        "gold_parse": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
        "query": "SELECT truck_details FROM Trucks ORDER BY truck_details Asc",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Display all truck details sorted by their license number.",
        "gold_parse": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
        "query": "SELECT truck_details FROM Trucks ORDER BY truck_details Asc",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Can you list all the trucks in the order of their license number?",
        "gold_parse": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
        "query": "SELECT truck_details FROM Trucks ORDER BY truck_details Asc",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "I want to see all truck information arranged by license number.",
        "gold_parse": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
        "query": "SELECT truck_details FROM Trucks ORDER BY truck_details Asc",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Provide all truck details in ascending order of their license numbers.",
        "gold_parse": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
        "query": "SELECT truck_details FROM Trucks ORDER BY truck_details Asc",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Show me all the trucks, ordered by their license number.",
        "gold_parse": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
        "query": "SELECT truck_details FROM Trucks ORDER BY truck_details Asc",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average duration of songs that have mp3 format and resolution below 800?",
        "gold_parse": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "query": "SELECT Avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What's the mean length of songs in mp3 format with a resolution less than 800?",
        "gold_parse": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "query": "SELECT Avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Can you tell me the average length of mp3 songs with a resolution under 800?",
        "gold_parse": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "query": "SELECT Avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the mean duration of mp3 songs that have a resolution lower than 800?",
        "gold_parse": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "query": "SELECT Avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Could you find the average time of songs in mp3 format with a resolution below 800?",
        "gold_parse": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "query": "SELECT Avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average time span of songs that are in mp3 format and have a resolution less than 800?",
        "gold_parse": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "query": "SELECT Avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;",
        "question": "What are the titles of papers and their associated keyphrases?",
        "correctness": 1,
        "gold_parse": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;",
        "question": "Can you list the titles of papers along with their keyphrases?",
        "correctness": 1,
        "gold_parse": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;",
        "question": "What are the keyphrases associated with each paper title?",
        "correctness": 1,
        "gold_parse": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;",
        "question": "Could you provide the titles of papers and their corresponding keyphrases?",
        "correctness": 1,
        "gold_parse": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;",
        "question": "I need to know the titles of papers and their related keyphrases.",
        "correctness": 1,
        "gold_parse": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;",
        "question": "Show me the titles of papers and their respective keyphrases.",
        "correctness": 1,
        "gold_parse": "SELECT title, keyphrasename FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid;"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "Find the contents that are stored in both Chicago and New York.",
        "correctness": 1,
        "gold_parse": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "Identify the contents that are present in both Chicago and New York.",
        "correctness": 1,
        "gold_parse": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "What are the contents stored in both New York and Chicago?",
        "correctness": 1,
        "gold_parse": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "Can you show me the contents that are in both New York and Chicago?",
        "correctness": 1,
        "gold_parse": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "What contents are found in both Chicago and New York?",
        "correctness": 1,
        "gold_parse": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "Could you find the contents that are stored in both Chicago and New York?",
        "correctness": 1,
        "gold_parse": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year < 2010;",
        "question": "What are the titles of papers published before 2010?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year < 2010;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year < 2010;",
        "question": "Can you list the titles of papers that were published prior to 2010?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year < 2010;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year < 2010;",
        "question": "What are the names of papers that came out before 2010?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year < 2010;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year < 2010;",
        "question": "Could you provide the titles of papers published earlier than 2010?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year < 2010;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year < 2010;",
        "question": "I'm interested in the titles of papers published before the year 2010. Can you provide them?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year < 2010;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year < 2010;",
        "question": "What are the paper titles that were published before the year 2010?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year < 2010;"
    },
    {
        "db_id": "twitter_1",
        "question": "Find the name and email of the user followed by the least number of people.",
        "gold_parse": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
        "query": "SELECT T2.name , T2.email FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.text ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Who is the user with the least number of followers, and what is their email?",
        "gold_parse": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
        "query": "SELECT T2.name , T2.email FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.text ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Can you provide the name and email of the user who has the fewest followers?",
        "gold_parse": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
        "query": "SELECT T2.name , T2.email FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.text ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "What is the name and email of the user who is followed by the smallest number of people?",
        "gold_parse": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
        "query": "SELECT T2.name , T2.email FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.text ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Identify the user with the least followers and provide their name and email.",
        "gold_parse": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
        "query": "SELECT T2.name , T2.email FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.text ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Who is the least followed user and what is their email address?",
        "gold_parse": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
        "query": "SELECT T2.name , T2.email FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.text ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT start_station_id FROM trip WHERE duration > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Can you provide the ids for all trips that occurred in a zip code area where the average mean temperature exceeded 60?",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT start_station_id FROM trip WHERE duration > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids for all the trips in zip code areas with an average mean temperature over 60?",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT start_station_id FROM trip WHERE duration > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "I need the ids for all trips in zip code areas where the average mean temperature is above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT start_station_id FROM trip WHERE duration > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Could you list the ids for all trips that happened in zip code areas with an average mean temperature greater than 60?",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT start_station_id FROM trip WHERE duration > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Show me the ids for all trips that were in zip code areas with an average mean temperature higher than 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT start_station_id FROM trip WHERE duration > value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are all the dates of enrollment and completion in record?",
        "gold_parse": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",
        "query": "SELECT T1.date_of_enrolment , T2.test_result FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Can you list all the enrollment and completion dates in the record?",
        "gold_parse": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",
        "query": "SELECT T1.date_of_enrolment , T2.test_result FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the dates of enrollment and completion recorded?",
        "gold_parse": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",
        "query": "SELECT T1.date_of_enrolment , T2.test_result FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Could you show me all the dates of enrollment and completion in the record?",
        "gold_parse": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",
        "query": "SELECT T1.date_of_enrolment , T2.test_result FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the recorded dates of enrollment and completion?",
        "gold_parse": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",
        "query": "SELECT T1.date_of_enrolment , T2.test_result FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Can I see all the dates of enrollment and completion in the record?",
        "gold_parse": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",
        "query": "SELECT T1.date_of_enrolment , T2.test_result FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",
        "question": "Show different teams in eliminations and the number of eliminations from each team.",
        "correctness": 1,
        "gold_parse": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",
        "question": "Display the various teams in the eliminations and their respective elimination counts",
        "correctness": 1,
        "gold_parse": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",
        "question": "Can you list the different teams in eliminations and how many eliminations each team has?",
        "correctness": 1,
        "gold_parse": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",
        "question": "Show me the distinct teams in eliminations and the total number of eliminations per team",
        "correctness": 1,
        "gold_parse": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",
        "question": "What are the different teams in eliminations and the number of eliminations they each have?",
        "correctness": 1,
        "gold_parse": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",
        "question": "Present the unique teams in eliminations and the count of eliminations for each team",
        "correctness": 1,
        "gold_parse": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team"
    },
    {
        "db_id": "book_review",
        "query": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3",
        "question": "What are the types of books that have at least three books belonging to?",
        "correctness": 1,
        "gold_parse": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "book_review",
        "query": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3",
        "question": "What are the categories of books that have a minimum of three books in them?",
        "correctness": 1,
        "gold_parse": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "book_review",
        "query": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3",
        "question": "Can you list the genres of books that contain at least three books?",
        "correctness": 1,
        "gold_parse": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "book_review",
        "query": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3",
        "question": "What are the different book types that include at least three books?",
        "correctness": 1,
        "gold_parse": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "book_review",
        "query": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3",
        "question": "Which book categories consist of three or more books?",
        "correctness": 1,
        "gold_parse": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "book_review",
        "query": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3",
        "question": "Identify the book genres that have three or more books in them.",
        "correctness": 1,
        "gold_parse": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "store_1",
        "question": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value OR T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Show the names of tracks that are either in the Rock genre or have the media type as MPEG audio file.",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value OR T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Can you provide the names of tracks that are classified as Rock or have an MPEG audio file format?",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value OR T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the names of tracks that fall under the Rock genre or are in the MPEG audio file format?",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value OR T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "I need the names of tracks that are either Rock genre or MPEG audio file type.",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value OR T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Display the track names that are either categorized as Rock or have a media type of MPEG audio file.",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value OR T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that have a vendor requested price less than 500,000?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price < 500000;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Can you list the properties with a vendor requested price below 500,000?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price < 500000;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Which properties have a vendor asking price under 500,000?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price < 500000;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the property names where the vendor's asking price is less than 500,000?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price < 500000;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Could you tell me the names of properties that are priced less than 500,000 by the vendor?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price < 500000;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Identify the properties that have a vendor's price request of less than 500,000.",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price < 500000;",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Support_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Which are the three highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Support_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Can you list the top three support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Support_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the three maximum support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Support_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Show me the three highest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Support_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Identify the top three support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Support_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Musical_ID NOT IN ( SELECT Name FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Can you show me the names of musicals without any actors?",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Musical_ID NOT IN ( SELECT Name FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Which musicals do not have any actors?",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Musical_ID NOT IN ( SELECT Name FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Could you provide the names of musicals that lack actors?",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Musical_ID NOT IN ( SELECT Name FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "I'm interested in musicals that have no actors, can you list them?",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Musical_ID NOT IN ( SELECT Name FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "What are the musicals that do not include any actors?",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Musical_ID NOT IN ( SELECT Name FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the maximum life expectancy in countries where the language is official.",
        "gold_parse": "",
        "query": "SELECT Language, MAX(LifeExpectancy) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the highest life expectancy in countries where the language is recognized as official?",
        "gold_parse": "",
        "query": "SELECT Language, MAX(LifeExpectancy) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Identify the maximum life span in nations where the language is official.",
        "gold_parse": "",
        "query": "SELECT Language, MAX(LifeExpectancy) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What's the top life expectancy in countries that have the language as official?",
        "gold_parse": "",
        "query": "SELECT Language, MAX(LifeExpectancy) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Can you find the greatest life expectancy in countries where the language is official?",
        "gold_parse": "",
        "query": "SELECT Language, MAX(LifeExpectancy) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T';",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Determine the peak life expectancy in countries recognizing the language as official.",
        "gold_parse": "",
        "query": "SELECT Language, MAX(LifeExpectancy) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T';",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;",
        "question": "Show the names of airlines and their flight numbers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;",
        "question": "Display the airline names along with their flight numbers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;",
        "question": "Can you list the names of airlines and their corresponding flight numbers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;",
        "question": "I want to see the names of airlines and their flight numbers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;",
        "question": "Provide the names of airlines and their flight numbers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;",
        "question": "Could you show me the names of airlines and their respective flight numbers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Airline, T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline;"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT DISTINCT model FROM headphone ORDER BY model",
        "question": "List all different headphone models in the alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT model FROM headphone ORDER BY model"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT DISTINCT model FROM headphone ORDER BY model",
        "question": "Show all unique headphone models sorted alphabetically",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT model FROM headphone ORDER BY model"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT DISTINCT model FROM headphone ORDER BY model",
        "question": "Provide a list of all distinct headphone models in alphabetical order",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT model FROM headphone ORDER BY model"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT DISTINCT model FROM headphone ORDER BY model",
        "question": "Can you display all the different models of headphones in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT model FROM headphone ORDER BY model"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT DISTINCT model FROM headphone ORDER BY model",
        "question": "I need to see all the different headphone models, arranged alphabetically",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT model FROM headphone ORDER BY model"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT DISTINCT model FROM headphone ORDER BY model",
        "question": "Could you list all the unique models of headphones in the order of A to Z?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT model FROM headphone ORDER BY model"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the manager and sponsor of the team that has the most drivers.",
        "correctness": 1,
        "gold_parse": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Who is the manager and sponsor of the team with the highest number of drivers?",
        "correctness": 1,
        "gold_parse": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Can you identify the manager and sponsor of the team that employs the most drivers?",
        "correctness": 1,
        "gold_parse": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the names of the manager and sponsor for the team that has the maximum number of drivers?",
        "correctness": 1,
        "gold_parse": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Could you find out who the manager and sponsor are for the team with the most drivers?",
        "correctness": 1,
        "gold_parse": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Who are the manager and sponsor of the team that has the greatest number of drivers?",
        "correctness": 1,
        "gold_parse": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the names of the workshop groups that have bookings with status code \"stop\"?",
        "gold_parse": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"",
        "query": "SELECT T1.Customer_Name FROM Performers AS T1 JOIN Bookings AS T2 JOIN Performers_in_Bookings AS T3 ON T1.Performer_ID = T3.Performer_ID AND T3.Order_ID = T2.Booking_ID WHERE T2.Status_Code = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Can you list the workshop groups with bookings that have a status code of 'stop'?",
        "gold_parse": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"",
        "query": "SELECT T1.Customer_Name FROM Performers AS T1 JOIN Bookings AS T2 JOIN Performers_in_Bookings AS T3 ON T1.Performer_ID = T3.Performer_ID AND T3.Order_ID = T2.Booking_ID WHERE T2.Status_Code = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Which workshop groups have bookings with a 'stop' status code?",
        "gold_parse": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"",
        "query": "SELECT T1.Customer_Name FROM Performers AS T1 JOIN Bookings AS T2 JOIN Performers_in_Bookings AS T3 ON T1.Performer_ID = T3.Performer_ID AND T3.Order_ID = T2.Booking_ID WHERE T2.Status_Code = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "I need the names of the workshop groups with bookings that are marked as 'stop'.",
        "gold_parse": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"",
        "query": "SELECT T1.Customer_Name FROM Performers AS T1 JOIN Bookings AS T2 JOIN Performers_in_Bookings AS T3 ON T1.Performer_ID = T3.Performer_ID AND T3.Order_ID = T2.Booking_ID WHERE T2.Status_Code = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Could you tell me the workshop groups that have bookings with a status code 'stop'?",
        "gold_parse": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"",
        "query": "SELECT T1.Customer_Name FROM Performers AS T1 JOIN Bookings AS T2 JOIN Performers_in_Bookings AS T3 ON T1.Performer_ID = T3.Performer_ID AND T3.Order_ID = T2.Booking_ID WHERE T2.Status_Code = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Identify the workshop groups with bookings that have the status code 'stop'.",
        "gold_parse": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"",
        "query": "SELECT T1.Customer_Name FROM Performers AS T1 JOIN Bookings AS T2 JOIN Performers_in_Bookings AS T3 ON T1.Performer_ID = T3.Performer_ID AND T3.Order_ID = T2.Booking_ID WHERE T2.Status_Code = value",
        "correctness": 0
    },
    {
        "db_id": "conference",
        "query": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
        "question": "How many conferences occur every year?",
        "correctness": 1,
        "gold_parse": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR"
    },
    {
        "db_id": "conference",
        "query": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
        "question": "What is the annual count of conferences?",
        "correctness": 1,
        "gold_parse": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR"
    },
    {
        "db_id": "conference",
        "query": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
        "question": "Can you tell me the number of conferences held each year?",
        "correctness": 1,
        "gold_parse": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR"
    },
    {
        "db_id": "conference",
        "query": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
        "question": "What's the yearly total of conferences?",
        "correctness": 1,
        "gold_parse": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR"
    },
    {
        "db_id": "conference",
        "query": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
        "question": "How many conferences are held on a yearly basis?",
        "correctness": 1,
        "gold_parse": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR"
    },
    {
        "db_id": "conference",
        "query": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
        "question": "What is the yearly frequency of conferences?",
        "correctness": 1,
        "gold_parse": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "How many songs does the singer with ID 1 have?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "What is the total number of songs by the singer with ID 1?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "Can you tell me the count of songs for the singer with ID 1?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "What's the quantity of songs the singer with ID 1 has?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "How many tracks does the singer with ID 1 own?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "What is the song count for the singer who has the ID 1?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "real_estate_properties",
        "question": "Sum the first house feature for properties that have been sold.",
        "gold_parse": "",
        "query": "SELECT property_address, SUM(hse_feature_1) FROM Properties WHERE date_sold IS NOT NULL GROUP BY property_address;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Calculate the sum of the first feature of houses that have been sold",
        "gold_parse": "",
        "query": "SELECT property_address, SUM(hse_feature_1) FROM Properties WHERE date_sold IS NOT NULL GROUP BY property_address;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the total of the first feature for all sold properties?",
        "gold_parse": "",
        "query": "SELECT property_address, SUM(hse_feature_1) FROM Properties WHERE date_sold IS NOT NULL GROUP BY property_address;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Can you add up the first feature of all the houses that have been sold?",
        "gold_parse": "",
        "query": "SELECT property_address, SUM(hse_feature_1) FROM Properties WHERE date_sold IS NOT NULL GROUP BY property_address;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the total sum of the first feature for properties that have been sold",
        "gold_parse": "",
        "query": "SELECT property_address, SUM(hse_feature_1) FROM Properties WHERE date_sold IS NOT NULL GROUP BY property_address;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What's the sum of the first house feature for all properties that have been sold?",
        "gold_parse": "",
        "query": "SELECT property_address, SUM(hse_feature_1) FROM Properties WHERE date_sold IS NOT NULL GROUP BY property_address;",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "question": "What are the checking and savings balances in accounts belonging to Brown?",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "question": "What are the balances for checking and savings accounts owned by Brown?",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "question": "Can you tell me the checking and savings account balances for Brown?",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "question": "What's the balance in Brown's checking and savings accounts?",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "question": "Could you provide the balances of checking and savings accounts for Brown?",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "question": "What are the amounts in the checking and savings accounts of Brown?",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'"
    },
    {
        "db_id": "sakila_1",
        "question": "Which film has the most copies in the inventory? List both title and id.",
        "gold_parse": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT title , film_id FROM film GROUP BY film_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which movie has the highest number of copies in stock? Include both the title and id.",
        "gold_parse": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT title , film_id FROM film GROUP BY film_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Can you tell me the film with the maximum number of copies in the inventory? I need both the title and id.",
        "gold_parse": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT title , film_id FROM film GROUP BY film_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What is the title and id of the film that has the most copies in our inventory?",
        "gold_parse": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT title , film_id FROM film GROUP BY film_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Identify the film with the most copies in the inventory, providing both its title and id.",
        "gold_parse": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT title , film_id FROM film GROUP BY film_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "I want to know the film that has the greatest number of copies in the inventory. Please provide the title and id.",
        "gold_parse": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT title , film_id FROM film GROUP BY film_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
        "question": "How many students live in each country?",
        "correctness": 1,
        "gold_parse": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
        "question": "What is the count of students residing in each country?",
        "correctness": 1,
        "gold_parse": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
        "question": "Can you tell me the number of students in each country?",
        "correctness": 1,
        "gold_parse": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
        "question": "What's the total number of students per country?",
        "correctness": 1,
        "gold_parse": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
        "question": "How many students are there in each country?",
        "correctness": 1,
        "gold_parse": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
        "question": "Give me the count of students living in each country.",
        "correctness": 1,
        "gold_parse": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country"
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who are from UK and have produced English songs.",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT artist_name FROM artist WHERE country = value INTERSECT SELECT artist_name FROM artist WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Identify the artists from the UK who have created English songs.",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT artist_name FROM artist WHERE country = value INTERSECT SELECT artist_name FROM artist WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Who are the UK-based artists that have produced songs in English?",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT artist_name FROM artist WHERE country = value INTERSECT SELECT artist_name FROM artist WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Can you list the names of artists from the UK who have made English songs?",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT artist_name FROM artist WHERE country = value INTERSECT SELECT artist_name FROM artist WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Which artists hailing from the UK have produced English tracks?",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT artist_name FROM artist WHERE country = value INTERSECT SELECT artist_name FROM artist WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Provide the names of the artists who are from the UK and have composed songs in English.",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT artist_name FROM artist WHERE country = value INTERSECT SELECT artist_name FROM artist WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "Show all cartoons that were directed by either Ben Jones or Brandon Vietti",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What are the titles of cartoons directed by Ben Jones or Brandon Vietti?",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "Can you list the cartoons directed by Ben Jones and Brandon Vietti?",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "Provide the titles of all cartoons directed by Ben Jones or Brandon Vietti",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "I want to see all cartoon titles directed by Ben Jones or Brandon Vietti",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value OR Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of course IDs for each transcript date?",
        "gold_parse": "",
        "query": "SELECT transcript_date, SUM(course_id) FROM Transcripts JOIN Courses ON Transcripts.transcript_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the total of course IDs for each transcript date?",
        "gold_parse": "",
        "query": "SELECT transcript_date, SUM(course_id) FROM Transcripts JOIN Courses ON Transcripts.transcript_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Can you calculate the sum of course IDs for every transcript date?",
        "gold_parse": "",
        "query": "SELECT transcript_date, SUM(course_id) FROM Transcripts JOIN Courses ON Transcripts.transcript_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What's the aggregate of course IDs per transcript date?",
        "gold_parse": "",
        "query": "SELECT transcript_date, SUM(course_id) FROM Transcripts JOIN Courses ON Transcripts.transcript_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Could you find the total sum of course IDs for each date on the transcript?",
        "gold_parse": "",
        "query": "SELECT transcript_date, SUM(course_id) FROM Transcripts JOIN Courses ON Transcripts.transcript_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the cumulative sum of course IDs for each date in the transcript?",
        "gold_parse": "",
        "query": "SELECT transcript_date, SUM(course_id) FROM Transcripts JOIN Courses ON Transcripts.transcript_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the states where the total lake area does not exceed 1000 square kilometers?",
        "gold_parse": "",
        "query": "SELECT state_name, SUM(area) FROM lake GROUP BY state_name HAVING SUM(area) > 1000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Can you list the states where the total lake area is less than or equal to 1000 square kilometers?",
        "gold_parse": "",
        "query": "SELECT state_name, SUM(area) FROM lake GROUP BY state_name HAVING SUM(area) > 1000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which states have a total lake area that doesn't surpass 1000 square kilometers?",
        "gold_parse": "",
        "query": "SELECT state_name, SUM(area) FROM lake GROUP BY state_name HAVING SUM(area) > 1000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "In which states is the total lake area not more than 1000 square kilometers?",
        "gold_parse": "",
        "query": "SELECT state_name, SUM(area) FROM lake GROUP BY state_name HAVING SUM(area) > 1000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Could you tell me the states where the total lake area is not over 1000 square kilometers?",
        "gold_parse": "",
        "query": "SELECT state_name, SUM(area) FROM lake GROUP BY state_name HAVING SUM(area) > 1000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Identify the states where the total lake area is under or equal to 1000 square kilometers.",
        "gold_parse": "",
        "query": "SELECT state_name, SUM(area) FROM lake GROUP BY state_name HAVING SUM(area) > 1000;",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 WHERE T2.Visit_Details = value )",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Identify the tourist spots that Alison visited but were not visited by Rosalind.",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 WHERE T2.Visit_Details = value )",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of the tourist attractions that were visited by Alison but not by Rosalind?",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 WHERE T2.Visit_Details = value )",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Can you list the tourist attractions that Alison went to but Rosalind didn't?",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 WHERE T2.Visit_Details = value )",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which tourist attractions did Alison visit that Rosalind did not?",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 WHERE T2.Visit_Details = value )",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Provide the names of the tourist attractions that were visited by Alison but not Rosalind.",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 WHERE T2.Visit_Details = value )",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Who is the author of paper 1?",
        "gold_parse": "",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.paperid WHERE writes.authorid = 1",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Who wrote paper 1?",
        "gold_parse": "",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.paperid WHERE writes.authorid = 1",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Can you tell me the author of paper 1?",
        "gold_parse": "",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.paperid WHERE writes.authorid = 1",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Who's the writer of paper 1?",
        "gold_parse": "",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.paperid WHERE writes.authorid = 1",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Who penned paper 1?",
        "gold_parse": "",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.paperid WHERE writes.authorid = 1",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Who is credited as the author of paper 1?",
        "gold_parse": "",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.paperid WHERE writes.authorid = 1",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What is the id and name of the browser that is compatible with the most web accelerators?",
        "gold_parse": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name FROM browser GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "Can you tell me the id and name of the browser that works with the highest number of web accelerators?",
        "gold_parse": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name FROM browser GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What's the id and name of the browser that supports the maximum number of web accelerators?",
        "gold_parse": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name FROM browser GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "Could you provide the id and name of the browser that is compatible with the greatest number of web accelerators?",
        "gold_parse": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name FROM browser GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "I'd like to know the id and name of the browser that can handle the most web accelerators.",
        "gold_parse": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name FROM browser GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What is the id and name of the browser that is able to work with the most web accelerators?",
        "gold_parse": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name FROM browser GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
        "question": "List all documents ids that are not the parent of other documents.",
        "correctness": 1,
        "gold_parse": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
        "question": "Show all document ids that do not have child documents",
        "correctness": 1,
        "gold_parse": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
        "question": "Retrieve all document ids that aren't parents to other documents",
        "correctness": 1,
        "gold_parse": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
        "question": "Display all ids of documents that don't have any subdocuments",
        "correctness": 1,
        "gold_parse": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
        "question": "Provide a list of document ids that are not parent documents",
        "correctness": 1,
        "gold_parse": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
        "question": "Can you list all the document ids that do not have any associated child documents?",
        "correctness": 1,
        "gold_parse": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects"
    },
    {
        "db_id": "world_1",
        "question": "Which region is the city Kabul located in?",
        "gold_parse": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "query": "SELECT LocalName FROM country WHERE Region = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "In which region can you find the city of Kabul?",
        "gold_parse": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "query": "SELECT LocalName FROM country WHERE Region = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What region is home to the city Kabul?",
        "gold_parse": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "query": "SELECT LocalName FROM country WHERE Region = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Can you tell me the region where Kabul city is located?",
        "gold_parse": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "query": "SELECT LocalName FROM country WHERE Region = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the region of the city Kabul?",
        "gold_parse": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "query": "SELECT LocalName FROM country WHERE Region = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Kabul is in which region?",
        "gold_parse": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "query": "SELECT LocalName FROM country WHERE Region = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER?",
        "gold_parse": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName ! = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Can you provide the first and last names of the first-grade students who are not under the instruction of teacher OTHA MOYER?",
        "gold_parse": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName ! = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Who are the first-grade students, by first and last name, who do not have OTHA MOYER as their teacher?",
        "gold_parse": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName ! = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "I need the first and last names of the first-grade students who aren't being taught by OTHA MOYER.",
        "gold_parse": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName ! = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Could you list the first and last names of the first-grade students who aren't in OTHA MOYER's class?",
        "gold_parse": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName ! = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the names of the first-grade students who aren't taught by teacher OTHA MOYER?",
        "gold_parse": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName ! = value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the maximum feature type name for each property name?",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_type_code = Ref_Feature_Types.feature_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the highest feature type name for each property name?",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_type_code = Ref_Feature_Types.feature_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Can you tell me the maximum feature type name for every property name?",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_type_code = Ref_Feature_Types.feature_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What's the top feature type name for each property name?",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_type_code = Ref_Feature_Types.feature_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Could you find the maximum feature type name for each property name?",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_type_code = Ref_Feature_Types.feature_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the peak feature type name for each property name?",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_type_code = Ref_Feature_Types.feature_type_code;",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Phone FROM EMPLOYEE",
        "question": "List the phone numbers of all employees.",
        "correctness": 1,
        "gold_parse": "SELECT Phone FROM EMPLOYEE"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Phone FROM EMPLOYEE",
        "question": "Can you show me the phone numbers of all employees?",
        "correctness": 1,
        "gold_parse": "SELECT Phone FROM EMPLOYEE"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Phone FROM EMPLOYEE",
        "question": "What are the contact numbers of all the staff members?",
        "correctness": 1,
        "gold_parse": "SELECT Phone FROM EMPLOYEE"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Phone FROM EMPLOYEE",
        "question": "I need to see the telephone numbers of every employee.",
        "correctness": 1,
        "gold_parse": "SELECT Phone FROM EMPLOYEE"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Phone FROM EMPLOYEE",
        "question": "Could you provide the phone numbers for all employees?",
        "correctness": 1,
        "gold_parse": "SELECT Phone FROM EMPLOYEE"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Phone FROM EMPLOYEE",
        "question": "Display the contact numbers for all the workers.",
        "correctness": 1,
        "gold_parse": "SELECT Phone FROM EMPLOYEE"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?",
        "gold_parse": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "query": "SELECT T2.staff_first_name , T2.staff_last_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T1.product_name ! = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Who are the staff members with their first and last names who reported issues with the 'rem' product but not 'aut'?",
        "gold_parse": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "query": "SELECT T2.staff_first_name , T2.staff_last_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T1.product_name ! = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Can you provide the first and last names of the staff who reported problems with 'rem' but not with 'aut'?",
        "gold_parse": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "query": "SELECT T2.staff_first_name , T2.staff_last_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T1.product_name ! = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the names of the staff members who reported issues with the product 'rem' and not 'aut'?",
        "gold_parse": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "query": "SELECT T2.staff_first_name , T2.staff_last_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T1.product_name ! = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "I need the first and last names of the staff who reported problems with the 'rem' product but not 'aut'.",
        "gold_parse": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "query": "SELECT T2.staff_first_name , T2.staff_last_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T1.product_name ! = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Could you list the staff members by first and last name who reported problems with 'rem' but not 'aut'?",
        "gold_parse": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "query": "SELECT T2.staff_first_name , T2.staff_last_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T1.product_name ! = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
        "question": "For each student, find the student id, student biographical data, and the number of courses he or she takes.",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
        "question": "Retrieve the student id, biographical information, and course count for each student.",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
        "question": "Can you show me the student id, biographical details, and the number of courses for every student?",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
        "question": "I need to see the student id, personal data, and the total number of courses for each student.",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
        "question": "Could you provide the student id, biographical data, and the course count for all students?",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
        "question": "Display the student id, personal information, and the number of courses taken by each student.",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
        "question": "Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
        "question": "Display the name and model year of vehicles where the city fuel economy rate is less than or equal to the highway fuel economy rate.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
        "question": "Can you list the name and model year for vehicles that have a city fuel economy rate that is less than or equal to their highway fuel economy rate?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
        "question": "I want to see the name and model year of vehicles with a city fuel economy rate that is not greater than the highway fuel economy rate.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
        "question": "Could you show me the name and model year of vehicles where the city fuel economy rate is equal to or less than the highway fuel economy rate?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
        "question": "Provide the name and model year for vehicles where the city fuel economy rate doesn't exceed the highway fuel economy rate.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate"
    },
    {
        "db_id": "csu_1",
        "question": "What is the number of faculty lines in campus \"Long Beach State University\" in 2002?",
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"",
        "query": "SELECT Count ( * ) FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "How many faculty lines were there at Long Beach State University in 2002?",
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"",
        "query": "SELECT Count ( * ) FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Can you tell me the count of faculty lines at Long Beach State University in 2002?",
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"",
        "query": "SELECT Count ( * ) FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What was the faculty lines count at Long Beach State University in the year 2002?",
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"",
        "query": "SELECT Count ( * ) FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "In 2002, what was the number of faculty lines at Long Beach State University?",
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"",
        "query": "SELECT Count ( * ) FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Could you provide the number of faculty lines at Long Beach State University in 2002?",
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"",
        "query": "SELECT Count ( * ) FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "question": "Can you list the unique reigns of wrestlers who are not located in 'Tokyo, Japan'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "question": "What are the different reigns of wrestlers not based in 'Tokyo, Japan'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "question": "Could you tell me the distinct reigns of wrestlers whose location isn't 'Tokyo, Japan'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "question": "What are the various reigns of wrestlers not from 'Tokyo, Japan'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "question": "Can you show me the unique reigns of wrestlers who don't reside in 'Tokyo, Japan'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\""
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "question": "Can you provide the names and operating systems of web client accelerators that are incompatible with 'Broadband' only connections?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "question": "What are the names and operating systems of web client accelerators that cannot function with a 'Broadband' connection only?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "question": "Could you list the names and operating systems of web client accelerators that don't work exclusively with 'Broadband' connections?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "question": "I need the names and operating systems of web client accelerators that aren't compatible with only 'Broadband' type connections.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "question": "What are the names and operating systems of web client accelerators that fail to work with just a 'Broadband' connection?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'"
    },
    {
        "db_id": "game_injury",
        "question": "List the dates of games by the home team name in descending order.",
        "gold_parse": "SELECT Date FROM game ORDER BY home_team DESC",
        "query": "SELECT Date FROM game ORDER BY Date Desc",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "Show the dates of matches sorted by the home team name in descending order.",
        "gold_parse": "SELECT Date FROM game ORDER BY home_team DESC",
        "query": "SELECT Date FROM game ORDER BY Date Desc",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "Can you provide the dates of games ordered by the home team name in a descending manner?",
        "gold_parse": "SELECT Date FROM game ORDER BY home_team DESC",
        "query": "SELECT Date FROM game ORDER BY Date Desc",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "I want to see the game dates sorted by the home team name in descending order.",
        "gold_parse": "SELECT Date FROM game ORDER BY home_team DESC",
        "query": "SELECT Date FROM game ORDER BY Date Desc",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "Display the dates of games with the home team name in descending order.",
        "gold_parse": "SELECT Date FROM game ORDER BY home_team DESC",
        "query": "SELECT Date FROM game ORDER BY Date Desc",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "Could you list the game dates by the home team name in a descending sequence?",
        "gold_parse": "SELECT Date FROM game ORDER BY home_team DESC",
        "query": "SELECT Date FROM game ORDER BY Date Desc",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "question": "Show company name and main industry without a gas station.",
        "correctness": 1,
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "question": "Display the name of the company and its primary industry that doesn't include a gas station.",
        "correctness": 1,
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "question": "Can you list the companies and their main industries that don't have a gas station?",
        "correctness": 1,
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "question": "Show me the company names and their main industries that are not gas stations.",
        "correctness": 1,
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "question": "I want to see the names of companies and their main industries, excluding those with gas stations.",
        "correctness": 1,
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "question": "Provide the names of companies and their primary industries that don't operate gas stations.",
        "correctness": 1,
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)"
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of the students who are in the position of striker and got a yes tryout decision.",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T3.pName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T2.pPos = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Identify the students who play as a striker and received a positive tryout decision.",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T3.pName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T2.pPos = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Who are the students that play in the striker position and have been approved in the tryouts?",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T3.pName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T2.pPos = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Can you list the names of the students who are strikers and got a yes for their tryout decision?",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T3.pName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T2.pPos = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Which students are in the striker position and have a tryout decision of yes?",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T3.pName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T2.pPos = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Provide the names of the students who hold the striker position and their tryout decision was yes.",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T3.pName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T2.pPos = value",
        "correctness": 0
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"",
        "question": "Find the titles of all the papers written by \"Aaron Turon\".",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"",
        "question": "What are the titles of all papers authored by Aaron Turon?",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"",
        "question": "Can you list all the paper titles written by Aaron Turon?",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"",
        "question": "Show me the titles of all papers that Aaron Turon has written.",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"",
        "question": "I want to know the titles of all papers written by Aaron Turon.",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"",
        "question": "Provide the titles of all papers that have been written by Aaron Turon.",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
        "question": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
        "question": "Display the teams that have wrestlers knocked out by both 'Orton' and 'Benjamin'.",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
        "question": "Can you list the teams with wrestlers who were eliminated by both 'Orton' and 'Benjamin'?",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
        "question": "Which teams have wrestlers that were defeated by both 'Orton' and 'Benjamin'?",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
        "question": "Identify the teams that have wrestlers ousted by both 'Orton' and 'Benjamin'.",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
        "question": "What are the teams that have wrestlers taken down by both 'Orton' and 'Benjamin'?",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the name of the client who has made the most orders.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
        "question": "Who is the client with the highest number of orders?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
        "question": "Can you tell me the name of the client who has placed the most orders?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
        "question": "Identify the client who has made the maximum number of orders.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
        "question": "Which client has the record for the most orders placed?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
        "question": "What's the name of the client who has ordered the most?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "storm_record",
        "question": "What is the average and maximum damage in millions for storms that had a max speed over 1000?",
        "gold_parse": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "query": "SELECT Avg ( Damage_millions_USD ) , Max ( Damage_millions_USD ) FROM storm WHERE Max_speed > = value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What is the mean and peak damage in millions for storms with a maximum speed exceeding 1000?",
        "gold_parse": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "query": "SELECT Avg ( Damage_millions_USD ) , Max ( Damage_millions_USD ) FROM storm WHERE Max_speed > = value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Can you tell me the average and highest damage in millions for storms where the top speed was over 1000?",
        "gold_parse": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "query": "SELECT Avg ( Damage_millions_USD ) , Max ( Damage_millions_USD ) FROM storm WHERE Max_speed > = value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What's the average and maximum monetary damage in millions for storms that reached speeds over 1000?",
        "gold_parse": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "query": "SELECT Avg ( Damage_millions_USD ) , Max ( Damage_millions_USD ) FROM storm WHERE Max_speed > = value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Could you find the average and the maximum damage in millions for storms that had a top speed of more than 1000?",
        "gold_parse": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "query": "SELECT Avg ( Damage_millions_USD ) , Max ( Damage_millions_USD ) FROM storm WHERE Max_speed > = value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What is the average and the maximum damage in millions for storms that had a maximum speed greater than 1000?",
        "gold_parse": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "query": "SELECT Avg ( Damage_millions_USD ) , Max ( Damage_millions_USD ) FROM storm WHERE Max_speed > = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "For each movie that received more than 3 reviews, what is the average rating?",
        "gold_parse": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.title HAVING Avg ( T2.stars ) > value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What is the average rating for each movie that has over 3 reviews?",
        "gold_parse": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.title HAVING Avg ( T2.stars ) > value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "Can you tell me the average rating for movies that have more than three reviews?",
        "gold_parse": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.title HAVING Avg ( T2.stars ) > value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "For all movies with more than three reviews, what's their average rating?",
        "gold_parse": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.title HAVING Avg ( T2.stars ) > value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What's the mean rating for each film that has received more than three reviews?",
        "gold_parse": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.title HAVING Avg ( T2.stars ) > value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "Could you provide the average rating for each movie that has been reviewed more than three times?",
        "gold_parse": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.title HAVING Avg ( T2.stars ) > value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which part has the least chargeable amount? List the part id and amount.",
        "gold_parse": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
        "query": "SELECT T1.part_id , T2.part_fault_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id ORDER BY Sum ( T1.chargeable_amount ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which component has the smallest billable amount? Provide the component id and the amount.",
        "gold_parse": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
        "query": "SELECT T1.part_id , T2.part_fault_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id ORDER BY Sum ( T1.chargeable_amount ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Identify the part with the lowest chargeable cost. Show the part id and cost.",
        "gold_parse": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
        "query": "SELECT T1.part_id , T2.part_fault_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id ORDER BY Sum ( T1.chargeable_amount ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "What part has the minimum billable amount? Display the part id and the amount.",
        "gold_parse": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
        "query": "SELECT T1.part_id , T2.part_fault_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id ORDER BY Sum ( T1.chargeable_amount ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Can you find the part with the smallest chargeable amount? Show the part id and the amount.",
        "gold_parse": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
        "query": "SELECT T1.part_id , T2.part_fault_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id ORDER BY Sum ( T1.chargeable_amount ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which part incurs the least cost? Indicate the part id and the cost.",
        "gold_parse": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
        "query": "SELECT T1.part_id , T2.part_fault_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id ORDER BY Sum ( T1.chargeable_amount ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "query": "SELECT County_name FROM county ORDER BY County_name DESC",
        "question": "Sort the names of all counties in descending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT County_name FROM county ORDER BY County_name DESC"
    },
    {
        "db_id": "election",
        "query": "SELECT County_name FROM county ORDER BY County_name DESC",
        "question": "Arrange all county names in reverse alphabetical order",
        "correctness": 1,
        "gold_parse": "SELECT County_name FROM county ORDER BY County_name DESC"
    },
    {
        "db_id": "election",
        "query": "SELECT County_name FROM county ORDER BY County_name DESC",
        "question": "List all the counties in order from Z to A",
        "correctness": 1,
        "gold_parse": "SELECT County_name FROM county ORDER BY County_name DESC"
    },
    {
        "db_id": "election",
        "query": "SELECT County_name FROM county ORDER BY County_name DESC",
        "question": "Can you order all the county names in descending alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT County_name FROM county ORDER BY County_name DESC"
    },
    {
        "db_id": "election",
        "query": "SELECT County_name FROM county ORDER BY County_name DESC",
        "question": "Show all county names sorted in descending order alphabetically",
        "correctness": 1,
        "gold_parse": "SELECT County_name FROM county ORDER BY County_name DESC"
    },
    {
        "db_id": "election",
        "query": "SELECT County_name FROM county ORDER BY County_name DESC",
        "question": "Display the names of all counties in alphabetical order from Z to A",
        "correctness": 1,
        "gold_parse": "SELECT County_name FROM county ORDER BY County_name DESC"
    },
    {
        "db_id": "university_basketball",
        "question": "What are the all games score and location of the school called Clemson?",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT Enrollment , Location FROM university WHERE School = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Can you tell me the scores and locations of all games for the school named Clemson?",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT Enrollment , Location FROM university WHERE School = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What are the scores and locations for all games at Clemson school?",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT Enrollment , Location FROM university WHERE School = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "I'd like to know the scores and locations of all games from Clemson school.",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT Enrollment , Location FROM university WHERE School = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Could you provide the scores and locations for all games of Clemson school?",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT Enrollment , Location FROM university WHERE School = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What's the score and location for every game of the school known as Clemson?",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT Enrollment , Location FROM university WHERE School = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the names and types of the dorms that have a capacity greater than 300 or less than 100?",
        "gold_parse": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
        "query": "SELECT dorm_name , dorm_name FROM Dorm WHERE student_capacity > value OR student_capacity < value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Can you list the names and types of dorms that can accommodate more than 300 or less than 100 students?",
        "gold_parse": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
        "query": "SELECT dorm_name , dorm_name FROM Dorm WHERE student_capacity > value OR student_capacity < value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the dorm names and their types that have a capacity of over 300 or under 100?",
        "gold_parse": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
        "query": "SELECT dorm_name , dorm_name FROM Dorm WHERE student_capacity > value OR student_capacity < value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Could you provide the names and types of dorms with a capacity exceeding 300 or falling below 100?",
        "gold_parse": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
        "query": "SELECT dorm_name , dorm_name FROM Dorm WHERE student_capacity > value OR student_capacity < value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "I need to know the names and types of dorms that can house more than 300 or fewer than 100 students.",
        "gold_parse": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
        "query": "SELECT dorm_name , dorm_name FROM Dorm WHERE student_capacity > value OR student_capacity < value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the names and types of dormitories that have a capacity of either more than 300 or less than 100?",
        "gold_parse": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
        "query": "SELECT dorm_name , dorm_name FROM Dorm WHERE student_capacity > value OR student_capacity < value",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What is the ID of every singer who has a net worth below the maximum?",
        "gold_parse": "",
        "query": "SELECT Singer_ID FROM singer WHERE Net_Worth_Millions < (SELECT Max(Net_Worth_Millions) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Can you provide the IDs of all singers with a net worth less than the maximum?",
        "gold_parse": "",
        "query": "SELECT Singer_ID FROM singer WHERE Net_Worth_Millions < (SELECT Max(Net_Worth_Millions) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the IDs of singers whose net worth is not the highest?",
        "gold_parse": "",
        "query": "SELECT Singer_ID FROM singer WHERE Net_Worth_Millions < (SELECT Max(Net_Worth_Millions) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Could you list the IDs of singers who don't have the maximum net worth?",
        "gold_parse": "",
        "query": "SELECT Singer_ID FROM singer WHERE Net_Worth_Millions < (SELECT Max(Net_Worth_Millions) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "I'd like to know the IDs of all singers who have a net worth below the maximum.",
        "gold_parse": "",
        "query": "SELECT Singer_ID FROM singer WHERE Net_Worth_Millions < (SELECT Max(Net_Worth_Millions) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What's the ID of each singer whose net worth isn't the maximum?",
        "gold_parse": "",
        "query": "SELECT Singer_ID FROM singer WHERE Net_Worth_Millions < (SELECT Max(Net_Worth_Millions) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which actors were born in London?",
        "gold_parse": "",
        "query": "SELECT name FROM actor WHERE birth_city = 'Toronto';",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Can you list the actors who were born in London?",
        "gold_parse": "",
        "query": "SELECT name FROM actor WHERE birth_city = 'Toronto';",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Who are the actors that have their birthplace as London?",
        "gold_parse": "",
        "query": "SELECT name FROM actor WHERE birth_city = 'Toronto';",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Identify the actors born in London.",
        "gold_parse": "",
        "query": "SELECT name FROM actor WHERE birth_city = 'Toronto';",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which actors have London as their place of birth?",
        "gold_parse": "",
        "query": "SELECT name FROM actor WHERE birth_city = 'Toronto';",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Tell me the names of actors who were born in London.",
        "gold_parse": "",
        "query": "SELECT name FROM actor WHERE birth_city = 'Toronto';",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the location and all games score of the school that has Clemson as its team name.",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT T2.Location , T2.Enrollment FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Retrieve the location and all game scores for the school with the team name Clemson.",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT T2.Location , T2.Enrollment FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What is the location and all game scores of the school whose team name is Clemson?",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT T2.Location , T2.Enrollment FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Can you show me the location and all game scores of the school that goes by the team name Clemson?",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT T2.Location , T2.Enrollment FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "I want to know the location and all game scores of the school with Clemson as its team name.",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT T2.Location , T2.Enrollment FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Please provide the location and all game scores of the school that has Clemson as its team name.",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "query": "SELECT T2.Location , T2.Enrollment FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "How many different series and contents are listed in the TV Channel table?",
        "gold_parse": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel",
        "query": "SELECT Count ( DISTINCT Episode ) , Count ( * ) FROM TV_series",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What is the count of unique series and contents in the TV Channel table?",
        "gold_parse": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel",
        "query": "SELECT Count ( DISTINCT Episode ) , Count ( * ) FROM TV_series",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "Can you tell me the number of distinct series and contents in the TV Channel table?",
        "gold_parse": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel",
        "query": "SELECT Count ( DISTINCT Episode ) , Count ( * ) FROM TV_series",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What's the total number of different series and contents in the TV Channel table?",
        "gold_parse": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel",
        "query": "SELECT Count ( DISTINCT Episode ) , Count ( * ) FROM TV_series",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "How many unique series and contents can be found in the TV Channel table?",
        "gold_parse": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel",
        "query": "SELECT Count ( DISTINCT Episode ) , Count ( * ) FROM TV_series",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "Could you provide the count of distinct series and contents in the TV Channel table?",
        "gold_parse": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel",
        "query": "SELECT Count ( DISTINCT Episode ) , Count ( * ) FROM TV_series",
        "correctness": 0
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
        "question": "What is the name of the institution that \"Matthias Blume\" belongs to?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
        "question": "Can you tell me the name of the institution associated with Matthias Blume?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
        "question": "What is the educational institution of Matthias Blume?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
        "question": "Which institution does Matthias Blume belong to?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
        "question": "What is the name of the institution where Matthias Blume is affiliated?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
        "question": "Can you identify the institution that Matthias Blume is a part of?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\""
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'",
        "question": "Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.",
        "correctness": 1,
        "gold_parse": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'"
    }
]