[
    {
        "db_id": "vehicle_driver",
        "query": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'",
        "question": "Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.",
        "correctness": 1,
        "gold_parse": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled > 250;",
        "question": "What are the names of courses with more than 250 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled > 250;"
    },
    {
        "db_id": "student_1",
        "question": "How many teachers does the student named CHRISSY NABOZNY have?",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"",
        "query": "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "book_press",
        "query": "SELECT title FROM book ORDER BY release_date DESC",
        "question": "Sort all the books in descending order of release date, and return the book titles.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM book ORDER BY release_date DESC"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
        "question": "Show the region name with at least two storms.",
        "correctness": 1,
        "gold_parse": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "riding_club",
        "question": "List the name and residence for players whose occupation is not \"Researcher\".",
        "gold_parse": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"",
        "query": "SELECT Player_name , Sponsor_name FROM player WHERE Occupation ! = value",
        "correctness": 0
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100",
        "question": "On what dates did the bakery sell more than 100 dollars worth of goods in total?",
        "correctness": 1,
        "gold_parse": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies WHERE rating  =  'null'",
        "question": "What are the names of movies that do not have any ratings?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies WHERE rating  =  'null'"
    },
    {
        "db_id": "scientist_1",
        "question": "What are the names of scientists who are assigned to any project?",
        "gold_parse": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn",
        "query": "SELECT Name FROM Scientists WHERE Name NOT IN ( SELECT Name FROM Scientists )",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'",
        "question": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'"
    },
    {
        "db_id": "solvency_ii",
        "question": "Show the names of products and the number of events they are in.",
        "gold_parse": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name",
        "query": "SELECT Product_Name , Count ( * ) FROM Products GROUP BY Product_Name",
        "correctness": 0
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'",
        "question": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.",
        "correctness": 1,
        "gold_parse": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1",
        "question": "Find the average points and average ages of all spokesmen whose rank position is 1.",
        "correctness": 1,
        "gold_parse": "SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1"
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who are liked by Jack?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT grade FROM Highschooler WHERE name = 'Jack'));",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the names of the courses that have just one student enrollment.",
        "gold_parse": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1",
        "query": "SELECT course_name FROM Courses",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "query": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC",
        "question": "What are the names and damage in millions for storms, ordered by their max speeds descending?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC"
    },
    {
        "db_id": "dorm_1",
        "question": "Find the number and average age of students living in each city.",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",
        "query": "SELECT city_code , Avg ( Age ) FROM Student GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name , ICAO FROM airport GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "question": "What are the different card type codes, and how many different customers hold each type?",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
        "question": "What is the average bike availablility for stations not in Palo Alto?",
        "correctness": 1,
        "gold_parse": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id",
        "question": "What are the names and total rental hours for each vehicle?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id"
    },
    {
        "db_id": "inn_1",
        "question": "What are the first and last names of people who payed more than the rooms' base prices?",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
        "query": "SELECT FirstName , LastName FROM Reservations WHERE Rate > value",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "query": "SELECT count(*) FROM track",
        "question": "How many tracks do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM track"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM artist",
        "question": "How many artists do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM artist"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code and description of the most common student address type?",
        "correctness": 1,
        "gold_parse": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain",
        "question": "How many vehicles have each type of powertrain?",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
        "question": "For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "query": "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.product_id > value GROUP BY T1.product_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the number of locations.",
        "gold_parse": "SELECT count(*) FROM Ref_locations",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the addresses of the course authors or tutors with personal name \"Cathrine\"",
        "gold_parse": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"",
        "query": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = value OR personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT song_name FROM song WHERE languages = value OR languages = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date",
        "question": "List the id of students who registered course statistics in the order of registration date.",
        "correctness": 1,
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"",
        "question": "Return the date of birth for all the guests with gender code \"Male\".",
        "correctness": 1,
        "gold_parse": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\""
    },
    {
        "db_id": "hr_1",
        "question": "Find employee with ID and name of the country presently where (s)he is working.",
        "gold_parse": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query": "SELECT T2.EMPLOYEE_ID , T1.COUNTRY_NAME FROM countries AS T1 JOIN employees AS T2 WHERE T1.COUNTRY_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "How many distinct official languages are there among countries of players whose positions are defenders.",
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "query": "SELECT Count ( DISTINCT Official_native_language ) FROM country",
        "correctness": 0
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1",
        "question": "Find the name and id of the good with the highest average rank.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the names of customers who have purchased both products Latte and Americano?",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'",
        "query": "SELECT customer_name FROM Customers WHERE payment_method = value INTERSECT SELECT customer_name FROM Customers WHERE payment_method = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Give the title of the prerequisite to the course International Finance.",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
        "query": "SELECT title FROM course WHERE dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "news_report",
        "query": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type",
        "question": "Find the average age and experience working length of journalists working on different role type.",
        "correctness": 1,
        "gold_parse": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products",
        "question": "What are the minimum, average, and maximum prices across all products?",
        "correctness": 1,
        "gold_parse": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products"
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value AND T1.MAX_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;",
        "question": "Give the states or provinces corresponding to each property.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "question": "Show the average age for male and female students.",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  sex FROM Student GROUP BY sex"
    },
    {
        "db_id": "farm",
        "question": "Count the number of farms.",
        "gold_parse": "SELECT count(*) FROM farm",
        "query": "SELECT Count ( * ) FROM city",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.preferred_genre = value OR T2.languages = value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Identify lakes that are all smaller than 50 square kilometers in area.",
        "gold_parse": "",
        "query": "SELECT lake_name, MIN(area) AS smallest_area FROM lake GROUP BY lake_name HAVING smallest_area > 50;",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Eduardo Martins is a customer at which company?",
        "gold_parse": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"",
        "query": "SELECT DISTINCT first_name FROM customers WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "query": "SELECT name FROM Highschooler WHERE grade = value INTERSECT SELECT name FROM Highschooler WHERE grade = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many templates do we have?",
        "gold_parse": "SELECT count(*) FROM Templates",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the names of all stations with a latitude smaller than 37.5?",
        "gold_parse": "SELECT name FROM station WHERE lat  <  37.5",
        "query": "SELECT name FROM station WHERE long < value",
        "correctness": 0
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age",
        "question": "Return the names of pilots who are younger than average, ordered by age ascending.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age"
    },
    {
        "db_id": "dorm_1",
        "question": "Find the first name of students living in city PHL whose age is between 20 and 25.",
        "gold_parse": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "query": "SELECT Fname FROM Student WHERE Age BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'",
        "question": "What are the usernames and passwords of all customers whose phone number starts with '+12'?",
        "correctness": 1,
        "gold_parse": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id",
        "question": "For each user, return the name and the average rating of reviews given by them.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id"
    },
    {
        "db_id": "school_finance",
        "question": "List the amount and donor name for the largest amount of donation.",
        "gold_parse": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "query": "SELECT T2.total_budget_percent_budgeted , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, population FROM city WHERE population > 1000000",
        "question": "What cities have a population over 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT city_name, population FROM city WHERE population > 1000000"
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the asset id, details, make and model for every asset.",
        "gold_parse": "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets",
        "query": "SELECT asset_id , asset_details , other_asset_details FROM Assets",
        "correctness": 0
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id",
        "question": "Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.",
        "correctness": 1,
        "gold_parse": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname, COUNT(*) FROM journal JOIN paper ON journal.journalid = paper.journalid GROUP BY journalname;",
        "question": "Show different journals and the number of papers published in each.",
        "correctness": 1,
        "gold_parse": "SELECT journalname, COUNT(*) FROM journal JOIN paper ON journal.journalid = paper.journalid GROUP BY journalname;"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000",
        "question": "Find the name and email of the users who have more than 1000 followers.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5",
        "question": "What are the titles of all movies that have between 3 and 5 stars?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "question": "How many students are in each department?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name"
    },
    {
        "db_id": "scholar",
        "question": "What are the titles and number of cited papers for all papers?",
        "gold_parse": "",
        "query": "SELECT title, numcitedby FROM paper WHERE numcitedby = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Count the number of clubs for which the student named \"Eric Tai\" is a member.",
        "gold_parse": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_status_code FROM Ref_Document_Status;",
        "question": "What document status codes do we have?",
        "correctness": 1,
        "gold_parse": "SELECT document_status_code FROM Ref_Document_Status;"
    },
    {
        "db_id": "world_1",
        "question": "What region does Angola belong to and what is its population?",
        "gold_parse": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "query": "SELECT Region , Population FROM country",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "What are the different organization IDs of authors?",
        "gold_parse": "",
        "query": "SELECT DISTINCT oid FROM author;",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the state in the US with the most invoices.",
        "gold_parse": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT billing_state FROM invoices GROUP BY billing_state ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many flights have destination ATO?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "query": "SELECT Count ( * ) FROM airports WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "What are the names of authors with the highest author ID in writes?",
        "gold_parse": "",
        "query": "SELECT name FROM author WHERE aid = (SELECT MAX(aid) FROM writes);",
        "correctness": 0
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
        "question": "What are the names of pilots who own both Piper Cub and the B-52 Bomber?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'"
    },
    {
        "db_id": "bike_1",
        "question": "For each zip code, return the average mean temperature of August there.",
        "gold_parse": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
        "query": "SELECT Avg ( duration ) , start_date FROM trip GROUP BY zip_code",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the number of professionals who have ever treated dogs.",
        "gold_parse": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "query": "SELECT Count ( * ) FROM Dogs WHERE weight = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT Date FROM perpetrator ORDER BY Killed DESC",
        "question": "List the date of perpetrators in descending order of the number of people killed.",
        "correctness": 1,
        "gold_parse": "SELECT Date FROM perpetrator ORDER BY Killed DESC"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)",
        "question": "What are the names of hosts who did not host any party in our record?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)"
    },
    {
        "db_id": "imdb",
        "question": "Which TV series have a recorded budget?",
        "gold_parse": "",
        "query": "SELECT title FROM tv_series WHERE budget IS NULL;",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
        "question": "What are the names of students who have taken Statistics courses?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Orchestra, T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID;",
        "question": "Show the names of orchestras and their conductors.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Orchestra, T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID;"
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the age of the oldest dog?",
        "gold_parse": "SELECT max(age) FROM Dogs",
        "query": "select age from Dogs order by date_adopted desc limit value",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the number of authors for each paper.",
        "gold_parse": "",
        "query": "SELECT title, COUNT(authorid) FROM paper JOIN writes ON paper.paperid = writes.paperid GROUP BY title;",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Who performed the song named \"Badlands\"? Show the first name and the last name.",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "correctness": 0
    },
    {
        "db_id": "book_1",
        "query": "SELECT name ,  address FROM Client",
        "question": "What are the names and addressed of all clients?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  address FROM Client"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT COUNT (DISTINCT team) FROM elimination",
        "question": "How many different teams have had eliminated wrestlers?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT (DISTINCT team) FROM elimination"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum transcript date for each department?",
        "gold_parse": "",
        "query": "SELECT department_name, MAX(transcript_date) FROM Departments JOIN Transcripts ON Departments.department_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT avg(top_speed) FROM vehicle",
        "question": "What is the average top speed of vehicles?",
        "correctness": 1,
        "gold_parse": "SELECT avg(top_speed) FROM vehicle"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
        "question": "What is the name of tracks whose genre is Rock?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date",
        "question": "For each date, return how many distinct customers visited on that day.",
        "correctness": 1,
        "gold_parse": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the names of customers who never ordered product Latte.",
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'",
        "query": "SELECT customer_name FROM Customers EXCEPT SELECT customer_name FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930",
        "question": "What are the locations that have works painted before 1885 and after 1930?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930"
    },
    {
        "db_id": "car_1",
        "question": "What is the minimum continent ID, average continent ID, and maximum country name?",
        "gold_parse": "",
        "query": "SELECT MIN(Continent), AVG(Continent), MAX(CountryName) FROM countries;",
        "correctness": 0
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id",
        "question": "Count the number of staff in each meeting by meeting id.",
        "correctness": 1,
        "gold_parse": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id"
    },
    {
        "db_id": "scholar",
        "question": "Sum the author IDs for each venue.",
        "gold_parse": "",
        "query": "SELECT venuename, SUM(authorid) FROM venue JOIN paper ON venue.venueid = paper.venueid JOIN writes ON paper.paperid = writes.paperid WHERE authorid IS NOT NULL GROUP BY venuename;",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the number of papers for each author.",
        "gold_parse": "",
        "query": "SELECT authorname, COUNT(paperid) FROM author JOIN writes ON author.authorid = writes.authorid WHERE paperid IS NOT NULL GROUP BY authorname;",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "question": "What are the names of artists who did not have an exhibition in 2004?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;",
        "question": "List the names and decor of rooms that have a king bed. Sort the list by their price.",
        "correctness": 1,
        "gold_parse": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;"
    },
    {
        "db_id": "pilot_record",
        "question": "Show the names of pilots and the number of records they have.",
        "gold_parse": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name",
        "query": "SELECT Pilot_name , Count ( * ) FROM pilot GROUP BY Pilot_name",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010.",
        "gold_parse": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010",
        "query": "SELECT DISTINCT Winery FROM wine WHERE Year > = value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT text FROM tweets WHERE text LIKE '%intern%'",
        "question": "Return the text of tweets about the topic 'intern'.",
        "correctness": 1,
        "gold_parse": "SELECT text FROM tweets WHERE text LIKE '%intern%'"
    },
    {
        "db_id": "flight_2",
        "question": "How many different abbreviations are there among airlines?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Abbreviation) FROM airlines;",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "question": "Show all flight number from Los Angeles.",
        "correctness": 1,
        "gold_parse": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT customer_id) FROM Customer_orders",
        "question": "How many customers have an order?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Customer_orders"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT COUNT(DISTINCT property_type_code) FROM Properties;",
        "question": "How many different property types are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT property_type_code) FROM Properties;"
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.district , T2.city , T2.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled < 5;",
        "question": "What are the names of courses with less than 5 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled < 5;"
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length > value OR length < value",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "query": "SELECT COUNT(DISTINCT Country) FROM climber",
        "question": "Count the number of different countries that climbers are from.",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM climber"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "question": "What is the full name and id of the customer who has the lowest total amount of payment?",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
    },
    {
        "db_id": "match_season",
        "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
        "question": "What are the different positions of players from UCLA or Duke colleges?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\""
    },
    {
        "db_id": "region_building",
        "query": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\"",
        "question": "Show the number of stories of buildings in the region with name \"Abruzzo\".",
        "correctness": 1,
        "gold_parse": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code",
        "question": "List all product type codes and the number of products in each type.",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with accounts, and what are the total savings balances for each?",
        "gold_parse": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "query": "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "Give the name of the student with the most likes.",
        "gold_parse": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC",
        "question": "List all affiliations with ascending ordered number of papers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many documents have expenses?",
        "gold_parse": "SELECT count(*) FROM Documents_with_expenses",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the titles and budgets of movies ordered by budget in descending order?",
        "gold_parse": "",
        "query": "SELECT title, budget FROM movie ORDER BY budget ASC;",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "question": "What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\"",
        "question": "What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\""
    },
    {
        "db_id": "game_injury",
        "query": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC",
        "question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
        "correctness": 1,
        "gold_parse": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price > (SELECT Max(vendor_requested_price) FROM Properties);",
        "question": "What is the name of the property that has the highest vendor requested price?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE vendor_requested_price > (SELECT Max(vendor_requested_price) FROM Properties);"
    },
    {
        "db_id": "book_2",
        "query": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
        "question": "Show different publishers together with the number of publications they have.",
        "correctness": 1,
        "gold_parse": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'",
        "question": "What are the id, language and original artist of the songs whose name is not 'Love'?",
        "correctness": 1,
        "gold_parse": "SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code",
        "question": "What are the distinct descriptions of all the detentions which have ever happened?",
        "correctness": 1,
        "gold_parse": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code"
    },
    {
        "db_id": "debate",
        "question": "How many debates are there?",
        "gold_parse": "SELECT count(*) FROM debate",
        "query": "SELECT Count ( * ) FROM people",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.",
        "gold_parse": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred",
        "query": "SELECT T2.name FROM department AS T1 JOIN instructor AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name ORDER BY T3.tot_cred Asc",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the card type code with most number of cards?",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of customers who do not have saving accounts?",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "query": "SELECT cust_name FROM customer WHERE cust_ID NOT IN ( SELECT cust_name FROM customer )",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM city WHERE Population < (SELECT Avg(Population) FROM city);",
        "question": "What are the names of cities that have a population below the average?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM city WHERE Population < (SELECT Avg(Population) FROM city);"
    },
    {
        "db_id": "world_1",
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "gold_parse": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "query": "select T1.Code from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.Language = value except select Code from country where GovernmentForm = value",
        "correctness": 0
    },
    {
        "db_id": "car_racing",
        "query": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150",
        "question": "What are the countries that have drivers with points larger than 150?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150"
    },
    {
        "db_id": "school_player",
        "question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
        "gold_parse": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
        "query": "SELECT Boys_or_Girls FROM school WHERE Founded > value INTERSECT SELECT Denomination FROM school WHERE Founded < value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MAX_SALARY BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE city = 'San Francisco';",
        "question": "What are the names of businesses in San Francisco?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE city = 'San Francisco';"
    },
    {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
        "question": "In which locations are there more than one movie theater with capacity above 300?",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "question": "Show all artist names who didn't have an exhibition in 2004.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004"
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "gold_parse": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "query": "SELECT T1.Name , T1.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Engineering%');",
        "question": "What are the names of departments that offer degree programs in Engineering?",
        "correctness": 1,
        "gold_parse": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Engineering%');"
    },
    {
        "db_id": "swimming",
        "question": "Find the names of stadiums that the most swimmers have been to.",
        "gold_parse": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM stadium GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Name ,  LOCATION FROM wrestler",
        "question": "Give the names and locations of all wrestlers.",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  LOCATION FROM wrestler"
    },
    {
        "db_id": "journal_committee",
        "question": "List the names of editors that are not on any journal committee.",
        "gold_parse": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)",
        "query": "SELECT T1.Name FROM editor AS T1 WHERE T1.Editor_ID NOT IN ( SELECT T2.Editor_ID FROM journal_committee AS T2 WHERE T2.Journal_ID = value )",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the IDs of journals where papers have been published?",
        "gold_parse": "",
        "query": "SELECT journalid FROM journal WHERE journalid IN (SELECT journalid FROM paper WHERE journalid = 'unknown');",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT T1.Issue_Date , T2.Result FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the field IDs for each keyphrase.",
        "gold_parse": "",
        "query": "SELECT keyphrasename, SUM(fieldid) FROM keyphrase JOIN paperkeyphrase ON keyphrase.keyphraseid = paperkeyphrase.keyphraseid JOIN paper ON paperkeyphrase.paperid = paper.paperid JOIN paperfield ON paper.paperid = paperfield.paperid GROUP BY keyphrasename;",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT StuID FROM Student WHERE Sex  =  'M'",
        "question": "Show student ids for all male students.",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM Student WHERE Sex  =  'M'"
    },
    {
        "db_id": "e_learning",
        "question": "List the name and the number of enrolled student for each course.",
        "gold_parse": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
        "query": "SELECT course_name , Count ( * ) FROM Courses GROUP BY course_name",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the average surface area of countries where the language is not official?",
        "gold_parse": "",
        "query": "SELECT Language, AVG(SurfaceArea) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'F';",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id",
        "question": "Show the apartment numbers, start dates, and end dates of all the apartment bookings.",
        "correctness": 1,
        "gold_parse": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id"
    },
    {
        "db_id": "singer",
        "query": "SELECT DISTINCT Name FROM singer WHERE Citizenship = 'Canadian';",
        "question": "What are the names of Canadian singers?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Name FROM singer WHERE Citizenship = 'Canadian';"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)",
        "question": "Find the headphone models that are not in stock in any store.",
        "correctness": 1,
        "gold_parse": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "What are the line 1 of addresses shared by some students and some teachers?",
        "gold_parse": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id",
        "query": "SELECT T1.email_address FROM Students AS T1 UNION SELECT T2.email_address FROM Teachers AS T2",
        "correctness": 0
    },
    {
        "db_id": "election",
        "query": "SELECT count(DISTINCT Governor) FROM party",
        "question": "How many distinct governors are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Governor) FROM party"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "question": "Find the location and all games score of the school that has Clemson as its team name.",
        "correctness": 1,
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'"
    },
    {
        "db_id": "conference",
        "query": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)",
        "question": "What are the names of all staff members who are older than average?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name",
        "question": "Return the names of the different planes, as well as the names of the oldest pilots who flew each.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements",
        "question": "What are the type code, details, and date of each achievement?",
        "correctness": 1,
        "gold_parse": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'",
        "question": "What are the names and results of battles between 1900 and 1950?",
        "correctness": 1,
        "gold_parse": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
        "question": "Which accelerator name contains substring \"Opera\"?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\""
    },
    {
        "db_id": "aan_1",
        "query": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\"",
        "question": "Count the number of papers Columbia University had during or prior to 2009 .",
        "correctness": 1,
        "gold_parse": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\""
    },
    {
        "db_id": "battle_death",
        "query": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'",
        "question": "How many ships are there of type Destroyer?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'"
    },
    {
        "db_id": "college_2",
        "question": "What is the course title of the prerequisite of course Mobile Computing?",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "query": "SELECT title FROM course WHERE title = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "query": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "question": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "correctness": 1,
        "gold_parse": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)",
        "question": "What are all the receipt numbers that have a good with a price above 10 or have the earliest date?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)"
    },
    {
        "db_id": "csu_1",
        "question": "How many degrees were conferred at San Jose State University in 2000?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
        "query": "SELECT Sum ( T2.Graduate ) FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "gold_parse": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "query": "SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value INTERSECT SELECT T2.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T1.semester_name = value",
        "correctness": 0
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT DISTINCT model FROM headphone ORDER BY model",
        "question": "Return the list of distinct headphone models ordered alphabetically.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT model FROM headphone ORDER BY model"
    },
    {
        "db_id": "singer",
        "question": "Sum the sales of songs with the highest position less than 20 for each singer.",
        "gold_parse": "",
        "query": "SELECT Name, SUM(Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position < 20;",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"",
        "question": "Find the cell mobile number of the candidates whose assessment code is \"Fail\"?",
        "correctness": 1,
        "gold_parse": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\""
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
        "question": "What are the different cities where students live?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id"
    },
    {
        "db_id": "singer",
        "question": "List the titles of songs that have sales less than 1,000,000 or a highest position greater than 10.",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Sales < 1000000 OR Highest_Position > 10;",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have destroyed a document.",
        "gold_parse": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "query": "SELECT T2.Destroyed_by_Employee_ID FROM Employees AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Employee_ID = T2.Destroyed_by_Employee_ID GROUP BY T1.Employee_ID HAVING Count ( * ) = value",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "Show the names of people who have been on the negative side of debates at least twice.",
        "gold_parse": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "query": "SELECT Name FROM people GROUP BY Name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the id of the patient who stayed in room 111 most recently?",
        "gold_parse": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1",
        "query": "SELECT Physician FROM Undergoes ORDER BY DateUndergoes Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')",
        "question": "What is the id of every painting created before the oldest painting in gallery 240?",
        "correctness": 1,
        "gold_parse": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')"
    },
    {
        "db_id": "hr_1",
        "question": "What are the first and last name for those employees who works either in department 70 or 90?",
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value OR T1.DEPARTMENT_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'",
        "question": "What are all the different contents stored in boxes in New York?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
        "question": "Find the average room count of the apartments that have the \"Studio\" type code.",
        "correctness": 1,
        "gold_parse": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\""
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the deparment with the highest enrollment?",
        "correctness": 1,
        "gold_parse": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "soccer_1",
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "query": "SELECT T1.player_api_id FROM Player AS T1 WHERE T1.height > value INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 WHERE T2.overall_rating < value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of customers who have purchased at least three different products?",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "question": "List the votes of elections in descending order.",
        "gold_parse": "SELECT Votes FROM election ORDER BY Votes DESC",
        "query": "SELECT Votes FROM election ORDER BY Vote_Percent Desc",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "How many routes go from the United States to Canada?",
        "gold_parse": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2",
        "question": "List the types of engines that are used by at least two drivers.",
        "correctness": 1,
        "gold_parse": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);",
        "question": "What are the names of journals with the lowest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "How many customers are there?",
        "gold_parse": "SELECT count(*) FROM customers",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Find the delegates who are from counties with population below 100000.",
        "gold_parse": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
        "query": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > value",
        "correctness": 0
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT HOST FROM performance ORDER BY Attendance ASC",
        "question": "List the hosts of performances in ascending order of attendance.",
        "correctness": 1,
        "gold_parse": "SELECT HOST FROM performance ORDER BY Attendance ASC"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find all the ids and dates of the logs for the problem whose id is 10.",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "query": "SELECT T1.problem_log_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_id = value",
        "correctness": 0
    },
    {
        "db_id": "car_racing",
        "query": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\"",
        "question": "Find the average age of the drivers from the countries that use \"English\" as official native language.",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\""
    },
    {
        "db_id": "department_management",
        "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
        "gold_parse": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'",
        "query": "SELECT DISTINCT T1.Creation FROM department AS T1 JOIN management AS T2 ON T1.Department_ID = T2.department_ID WHERE T2.temporary_acting = value",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname FROM journal WHERE journalid IN (SELECT journalid FROM paper);",
        "question": "What are the names of journals where papers have been published?",
        "correctness": 1,
        "gold_parse": "SELECT journalname FROM journal WHERE journalid IN (SELECT journalid FROM paper);"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "question": "Count the total number of policies used by the customer named \"Dayana Robel\".",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show all the Store_Name of drama workshop groups.",
        "gold_parse": "SELECT Store_Name FROM Drama_Workshop_Groups",
        "query": "SELECT Store_Name FROM Stores",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the id and name of the staff who has been assigned for the least amount of time?",
        "gold_parse": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "query": "SELECT staff_id , staff_name FROM Staff GROUP BY staff_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Give the maximum price and score for wines produced in the appelation St. Helena.",
        "gold_parse": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"",
        "query": "SELECT Max ( Price ) , Min ( Score ) FROM wine WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Best Buy');",
        "question": "What are the names of businesses that have the same name as 'Best Buy'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'Best Buy');"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
        "question": "How many female students have milk or egg allergies?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\""
    },
    {
        "db_id": "country_language",
        "query": "SELECT count(DISTINCT language_id) FROM official_languages",
        "question": "How many different official languages are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT language_id) FROM official_languages"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_selling_price , typical_selling_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "List property IDs and sum of house feature 3 where the vendor requested price is equal to the property type code.",
        "gold_parse": "",
        "query": "SELECT property_id, SUM(hse_feature_3) FROM Properties WHERE vendor_requested_price = (SELECT property_type_code FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "query": "SELECT COUNT(DISTINCT Country) FROM climber",
        "question": "How many distinct countries are the climbers from?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM climber"
    },
    {
        "db_id": "world_1",
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "gold_parse": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "query": "SELECT Avg ( GNP ) , Avg ( Population ) FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35",
        "question": "What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35"
    },
    {
        "db_id": "music_2",
        "question": "What is the first and last name of artist who performed \"Le Pop\"?",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"",
        "query": "SELECT Firstname , Lastname FROM Band WHERE Firstname = value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "How many residents does each property have? List property id and resident count.",
        "gold_parse": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id",
        "query": "SELECT resident_id , Count ( * ) FROM Residents GROUP BY resident_id",
        "correctness": 0
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse",
        "question": "Select the warehouse code and the average value of the boxes in each warehouse.",
        "correctness": 1,
        "gold_parse": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse"
    },
    {
        "db_id": "region_building",
        "query": "SELECT DISTINCT Address FROM building",
        "question": "Give me a list of distinct building addresses.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Address FROM building"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT DISTINCT product_size FROM Products",
        "question": "What are the different product sizes?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT product_size FROM Products"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
        "question": "How many courses are provided in each semester and year?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR"
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;",
        "question": "What are the name and id of the three highest priced rooms?",
        "correctness": 1,
        "gold_parse": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT COUNT(DISTINCT Country) FROM singer;",
        "question": "How many different countries are represented by the singers?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM singer;"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID < 5;",
        "question": "What are the names of conductors with IDs less than 5?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID < 5;"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;",
        "question": "What is the total shipments in each planet? List the planet name and total shipments.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;"
    },
    {
        "db_id": "phone_1",
        "question": "Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.",
        "gold_parse": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'",
        "query": "SELECT T1.Pixels FROM screen_mode AS T1 WHERE T1.Type = value INTERSECT SELECT T1.Pixels FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Accreditation_type = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Give me the name of the customer who ordered the most items in total.",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT CONTENTS FROM boxes",
        "question": "What are the different contents in boxes?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT CONTENTS FROM boxes"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year = 2021",
        "question": "What papers were published in the year 2021?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year = 2021"
    },
    {
        "db_id": "body_builder",
        "question": "List the snatch score and clean jerk score of body builders in ascending order of snatch score.",
        "gold_parse": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC",
        "query": "SELECT Total , Clean_Jerk FROM body_builder ORDER BY Total Asc",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the different names of the colleges involved in the tryout in alphabetical order?",
        "gold_parse": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
        "query": "SELECT DISTINCT cName FROM College ORDER BY cName Asc",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "gold_parse": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "query": "SELECT Document_ID , Count ( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY Count ( * ) Asc",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "book_1",
        "query": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book",
        "question": "Give the average purchase price and average sale price for books.",
        "correctness": 1,
        "gold_parse": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book"
    },
    {
        "db_id": "college_2",
        "query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "question": "What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?",
        "correctness": 1,
        "gold_parse": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?",
        "correctness": 1,
        "gold_parse": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT DISTINCT Nationality FROM conductor;",
        "question": "What are the different nationalities of conductors?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Nationality FROM conductor;"
    },
    {
        "db_id": "art_1",
        "query": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222",
        "question": "What are the titles of all paintings and sculpture works made by the artist whose id is 222?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222"
    },
    {
        "db_id": "music_1",
        "question": "List the names of all genres in alphabetical oder, together with its ratings.",
        "gold_parse": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "query": "SELECT g_name FROM genre ORDER BY rating Asc",
        "correctness": 0
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1",
        "question": "What is the name and age of the customer with the most membership credit?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "query": "SELECT venueid FROM venue WHERE venueid IN (SELECT venueid FROM paper);",
        "question": "What are the IDs of venues where papers have been published?",
        "correctness": 1,
        "gold_parse": "SELECT venueid FROM venue WHERE venueid IN (SELECT venueid FROM paper);"
    },
    {
        "db_id": "scholar",
        "question": "Show the year and the venue name for all papers.",
        "gold_parse": "",
        "query": "SELECT T1.year, T2.venuename FROM paper AS T1 JOIN venue AS T2 ON T1.venueid = T2.venueid;",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
        "question": "How many orders does Lucas Mancini has?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average section ID for each student's email address?",
        "gold_parse": "",
        "query": "SELECT email_address, AVG(section_id) FROM Students JOIN Sections ON Students.student_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;",
        "question": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.",
        "correctness": 1,
        "gold_parse": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;"
    },
    {
        "db_id": "hospital_1",
        "question": "Find the number of patients who are not using the medication of Procrastin-X.",
        "gold_parse": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
        "query": "SELECT Count ( * ) FROM Patient AS T1 WHERE T1.SSN NOT IN ( SELECT T2.Medication FROM Prescribes AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "How many products have prices of at least 180?",
        "gold_parse": "SELECT count(*) FROM products WHERE price >= 180",
        "query": "SELECT Count ( * ) FROM Products WHERE Price < value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
        "question": "For every student who is registered for some course, how many courses are they registered for?",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"",
        "question": "What is the phone and email for customer with first name Aniyah and last name Feest?",
        "correctness": 1,
        "gold_parse": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\""
    },
    {
        "db_id": "election_representative",
        "query": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2",
        "question": "What states have at least two representatives?",
        "correctness": 1,
        "gold_parse": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT name FROM people WHERE height  >  200 OR height  <  190",
        "question": "find the names of people who are taller than 200 or lower than 190.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM people WHERE height  >  200 OR height  <  190"
    },
    {
        "db_id": "city_record",
        "question": "Find the GDP of the city with the largest regional population.",
        "gold_parse": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
        "query": "SELECT City FROM city ORDER BY Regional_Population Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
        "question": "Show ids for all employees who don't have a certificate.",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";",
        "question": "What is maximum and minimum RAM size of phone produced by company named \"Nokia Corporation\"?",
        "correctness": 1,
        "gold_parse": "SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";"
    },
    {
        "db_id": "book_press",
        "query": "SELECT avg(age) ,  gender FROM author GROUP BY gender",
        "question": "For each gender, return gender and the average age of authors.",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  gender FROM author GROUP BY gender"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid;",
        "question": "What are the titles of papers and their authors?",
        "correctness": 1,
        "gold_parse": "SELECT title, authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid;"
    },
    {
        "db_id": "world_1",
        "question": "What language is predominantly spoken in Aruba?",
        "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "query": "SELECT Name FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Driver FROM driver ORDER BY Age ASC",
        "question": "Sort the driver names by age in ascending order.",
        "correctness": 1,
        "gold_parse": "SELECT Driver FROM driver ORDER BY Age ASC"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
        "question": "For each origin, how many flights came from there?",
        "correctness": 1,
        "gold_parse": "SELECT origin ,  count(*) FROM Flight GROUP BY origin"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_name FROM Courses WHERE course_name LIKE '%Programming%';",
        "question": "What are the names of courses that have 'Programming' in their name?",
        "correctness": 1,
        "gold_parse": "SELECT course_name FROM Courses WHERE course_name LIKE '%Programming%';"
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the names of manufacturers with revenue greater than the average of all revenues?",
        "gold_parse": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)",
        "query": "SELECT T2.Name FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T1.Revenue > ( SELECT Avg ( T1.Revenue ) FROM Manufacturers AS T1 )",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "query": "SELECT mean_temperature_f FROM weather WHERE zip_code = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "question": "What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?",
        "correctness": 1,
        "gold_parse": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000",
        "question": "In the year 2000, what is the campus fee for San Francisco State University?",
        "correctness": 1,
        "gold_parse": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000"
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which kind of part has the least number of faults? List the part name.",
        "gold_parse": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1",
        "query": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T2.part_fault_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the color description of the product with name \"catnip\"?",
        "gold_parse": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
        "query": "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name = value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List all the names of schools with an endowment amount smaller than or equal to 10.",
        "gold_parse": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
        "query": "SELECT School_name FROM School WHERE Enrollment > value OR Enrollment < value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "Show the country names and the count of their occurrences.",
        "gold_parse": "",
        "query": "SELECT CountryName, COUNT(*) FROM countries;",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.",
        "gold_parse": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
        "query": "SELECT Count ( * ) , Affiliation FROM university WHERE Founded < value GROUP BY Affiliation",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "query": "SELECT SourceAirport, COUNT(*) FROM flights GROUP BY SourceAirport;",
        "question": "How many flights are there from each source airport?",
        "correctness": 1,
        "gold_parse": "SELECT SourceAirport, COUNT(*) FROM flights GROUP BY SourceAirport;"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with a higher checking balance than savings balance?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What degrees were conferred in San Francisco State University in the year 2001?",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "query": "SELECT T2.Graduate FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T1.Id = T2.Campus JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T1.Campus = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the average latitude and longitude in San Jose?",
        "gold_parse": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
        "query": "SELECT Avg ( long ) , Avg ( long ) FROM station WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show all the planned delivery dates and actual delivery dates of bookings.",
        "gold_parse": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",
        "query": "SELECT Planned_Delivery_Date , Order_Date FROM Bookings",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "How many proteins are associated with an institution in a building with at least 20 floors?",
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20",
        "query": "SELECT Count ( * ) FROM building WHERE Floors < value",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990",
        "question": "Count the number of artists who are older than 46 and joined after 1990.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )",
        "question": "What are the prices and sizes of all products whose price is above the mean?",
        "correctness": 1,
        "gold_parse": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )"
    },
    {
        "db_id": "flight_4",
        "question": "For each  airport name, how many routes start at that airport, ordered from most to least?",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC",
        "query": "SELECT T2.name , Count ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.dst_apid ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "What is the name of the event that happened in the most recent year?",
        "gold_parse": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1",
        "query": "SELECT T2.Name FROM stadium AS T1 JOIN event AS T2 ON T1.ID = T2.Stadium_ID ORDER BY T1.Opening_year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "query": "SELECT T1.date_of_latest_logon , T2.date_of_completion FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);",
        "question": "What are the names of the oldest singers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Age) FROM singer);"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1",
        "question": "What are the clean and jerk score of the body builder with the highest total score?",
        "correctness": 1,
        "gold_parse": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1"
    },
    {
        "db_id": "student_1",
        "question": "Report the total number of students for each fourth-grade classroom.",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id",
        "question": "What are the guest first name, start date, and end date of each apartment booking?",
        "correctness": 1,
        "gold_parse": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"",
        "question": "Find the maximum and minimum millisecond lengths of pop tracks.",
        "correctness": 1,
        "gold_parse": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\""
    },
    {
        "db_id": "world_1",
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "gold_parse": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "query": "SELECT Name , Population , Capital FROM country WHERE Continent = value ORDER BY SurfaceArea Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Return the names of all regions other than Denmark.",
        "gold_parse": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
        "query": "SELECT Region_name FROM region GROUP BY Region_name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many students are there for each course description?",
        "gold_parse": "",
        "query": "SELECT course_description, COUNT(student_id) FROM Courses JOIN Students ON Courses.course_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "What are the different names of mountains ascended by climbers from the country of West Germany?",
        "gold_parse": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "query": "SELECT DISTINCT Name FROM mountain WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Return all the distinct secretary votes made in the fall election cycle.",
        "gold_parse": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"",
        "query": "SELECT DISTINCT Advisor FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT max_temperature_f FROM weather WHERE max_sea_level_pressure_inches < value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'David'));",
        "question": "What are the names of highschoolers who are friends with David?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'David'));"
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.PrepNurse ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Show storm name with at least two regions and 10 cities affected.",
        "gold_parse": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the name of aircrafts with top three lowest distances.",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Chemistry');",
        "question": "What are the names of journals that have the same name as 'Journal of Chemistry'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Chemistry');"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",
        "question": "What are the names of the technicians  and how many machines are they assigned to repair?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name"
    },
    {
        "db_id": "book_1",
        "query": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\"",
        "question": "Give the average sale price of books authored by George Orwell.",
        "correctness": 1,
        "gold_parse": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\""
    },
    {
        "db_id": "news_report",
        "query": "SELECT Nationality ,  Age FROM journalist",
        "question": "What are the nationalities and ages of journalists?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality ,  Age FROM journalist"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT count(DISTINCT Hometown) FROM people",
        "question": "How many distinct hometowns did these people have?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Hometown) FROM people"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
        "question": "Find the first name and major of the students who are not allegry to soy.",
        "correctness": 1,
        "gold_parse": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"",
        "question": "Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names.",
        "correctness": 1,
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\""
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM countries ORDER BY education_score DESC",
        "question": "List names of countries in descending order of education_score.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM countries ORDER BY education_score DESC"
    },
    {
        "db_id": "election",
        "question": "Who were the governors of the parties associated with delegates from district 1?",
        "gold_parse": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
        "query": "SELECT T2.Comptroller FROM county AS T1 JOIN party AS T2 JOIN election AS T3 ON T1.County_Id = T3.District AND T3.Party = T2.Party_ID WHERE T1.Population = value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC;",
        "question": "Show the property types and the number of properties in each, ordered by the number of properties in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC;"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
        "query": "SELECT T2.Name FROM Features AS T1 JOIN Tourist_Attractions AS T2 JOIN Tourist_Attraction_Features AS T3 ON T1.Feature_ID = T3.Feature_ID AND T3.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Feature_Details = value OR T1.Feature_Details = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What is the average weight of all players?",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "query": "SELECT Avg ( agility ) FROM Player_Attributes",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
        "question": "What are the names of students who haven't taken any Biology courses?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')"
    },
    {
        "db_id": "geography",
        "question": "Which state has the maximum population in its smallest city?",
        "gold_parse": "",
        "query": "SELECT state_name, MIN(population) FROM city GROUP BY state_name;",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Company FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many debit cards do we have?",
        "gold_parse": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
        "query": "SELECT Count ( DISTINCT card_number ) FROM Customers_Cards",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);",
        "question": "What are the names of businesses with the lowest business ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);"
    },
    {
        "db_id": "wine_1",
        "question": "What is the county that produces the most wines scoring higher than 90?",
        "gold_parse": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.County FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > value GROUP BY T2.State ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT avg(ERP_kW) FROM radio",
        "question": "What is the average ERP across all radios?",
        "correctness": 1,
        "gold_parse": "SELECT avg(ERP_kW) FROM radio"
    },
    {
        "db_id": "perpetrator",
        "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
        "query": "SELECT T2.Name FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Country = value OR T1.Location = value",
        "correctness": 0
    },
    {
        "db_id": "book_1",
        "query": "SELECT title ,  isbn ,  SalePrice FROM Book",
        "question": "What are the titles, ISBNs, and sale prices for all books?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  isbn ,  SalePrice FROM Book"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the type of powertrain with most number of vehicles.",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'",
        "question": "Which address do not have any member with the black membership card?",
        "correctness": 1,
        "gold_parse": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'"
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes for each source airport and the airport name.",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "query": "SELECT name , Count ( * ) FROM airports GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )",
        "question": "Count the number of drivers who have not driven any vehicles.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )"
    },
    {
        "db_id": "farm",
        "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
        "question": "Please show the themes of competitions with host cities having populations larger than 1000.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000"
    },
    {
        "db_id": "flight_2",
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "gold_parse": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "query": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        "correctness": 0
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
        "question": "What are the names of the products tht have been shipped, and on what days were they shipped?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id"
    },
    {
        "db_id": "poker_player",
        "question": "What are the names of poker players?",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "query": "SELECT Name FROM people",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What are the degrees conferred in \"San Francisco State University\" in 2001.",
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "query": "SELECT T2.Graduate FROM Campuses AS T1 JOIN discipline_enrollments AS T2 ON T1.Id = T2.Campus JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T1.Campus = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "How many products are not made by Sony?",
        "gold_parse": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')",
        "query": "SELECT Count ( * ) FROM Manufacturers AS T1 WHERE T1.Code NOT IN ( SELECT T2.Manufacturer FROM Products AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name",
        "question": "What is the average number of stars that each reviewer awards for a movie?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
        "question": "How many albums has Billy Cobam released?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";"
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "query": "SELECT T1.cName , T1.enr , T1.state FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.HS > value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value OR T1.GDP < value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
        "question": "What is the average unit price of tracks that belong to Jazz genre?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\""
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";",
        "question": "How long does student Linda Smith spend on the restaurant in total?",
        "correctness": 1,
        "gold_parse": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";"
    },
    {
        "db_id": "tracking_orders",
        "question": "What are the dates of the orders made by the customer named \"Jeramie\"?",
        "gold_parse": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "query": "SELECT T3.shipment_date FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Shipments AS T3 ON T2.order_id = T3.order_id WHERE T1.customer_name = value",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT(DISTINCT name) FROM domain;",
        "question": "How many different domain names are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT name) FROM domain;"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which store owns most items?",
        "correctness": 1,
        "gold_parse": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees who are managers?",
        "gold_parse": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "query": "SELECT * FROM regions",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "question": "What is the average fee on a CSU campus in 2005?",
        "correctness": 1,
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005"
    },
    {
        "db_id": "tvshow",
        "question": "List all cartoon directed by \"Ben Jones\".",
        "gold_parse": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
        "query": "SELECT Title FROM Cartoon WHERE Written_by = value AND Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "What are the titles and authors or editors that correspond to books made after 1989?",
        "gold_parse": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",
        "query": "SELECT T2.Title , T1.Author_or_Editor FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id WHERE T1.Year > value",
        "correctness": 0
    },
    {
        "db_id": "university_rank",
        "query": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5",
        "question": "What is the total enrollment of universities with a overall rank 5 or below?",
        "correctness": 1,
        "gold_parse": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";",
        "question": "How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?",
        "correctness": 1,
        "gold_parse": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";"
    },
    {
        "db_id": "music_1",
        "question": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "query": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct first names of all the students who have vice president votes and whose city code is not PIT.",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"",
        "query": "SELECT DISTINCT Fname FROM Student WHERE Advisor = value AND Advisor ! = value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "query": "SELECT Official_Name FROM city ORDER BY Population DESC",
        "question": "What are the official names of cities, ordered descending by population?",
        "correctness": 1,
        "gold_parse": "SELECT Official_Name FROM city ORDER BY Population DESC"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(DISTINCT student_id) FROM Detention",
        "question": "How many students have gone through a detention?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT student_id) FROM Detention"
    },
    {
        "db_id": "climbing",
        "query": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "question": "What are the different names of mountains ascended by climbers from the country of West Germany?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\""
    },
    {
        "db_id": "car_1",
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "gold_parse": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3",
        "query": "SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > = value INTERSECT SELECT T3.MakeId , T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker AND T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model WHERE T2.Model > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information about the department Marketing.",
        "gold_parse": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
        "query": "SELECT * FROM regions",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum transcript ID for each department description?",
        "gold_parse": "",
        "query": "SELECT department_description, MIN(transcript_id) FROM Departments JOIN Transcripts ON Departments.department_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "question": "Please show the different statuses of cities and the average population of cities with each status.",
        "correctness": 1,
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status"
    },
    {
        "db_id": "product_catalog",
        "question": "Find the names of catalog entries with level number 8.",
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds = value",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "What is the name and country for the artist with most number of exhibitions?",
        "gold_parse": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name , Country FROM artist GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job ids and dates of hire for employees hired after November 5th, 2007 and before July 5th, 2009?",
        "gold_parse": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "query": "SELECT T2.EMPLOYEE_ID , T1.MIN_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.FIRST_NAME = value AND T2.LAST_NAME > value AND T2.LAST_NAME < value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the IDs of properties that do not have any features?",
        "gold_parse": "",
        "query": "SELECT property_id FROM Properties EXCEPT SELECT feature_id FROM Other_Available_Features;",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "How many artworks are there?",
        "gold_parse": "SELECT count(*) FROM artwork",
        "query": "SELECT Count ( * ) FROM festival_detail",
        "correctness": 0
    },
    {
        "db_id": "address_1",
        "query": "SELECT state ,  count(*) FROM City GROUP BY state",
        "question": "How many cities are in each state?",
        "correctness": 1,
        "gold_parse": "SELECT state ,  count(*) FROM City GROUP BY state"
    },
    {
        "db_id": "match_season",
        "question": "What are the official languages of the countries of players from Maryland or Duke college?",
        "gold_parse": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
        "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = value OR T2.College = value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT DISTINCT card_type_code FROM Customers_Cards",
        "question": "Show all card type codes.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT card_type_code FROM Customers_Cards"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum semester ID for each student?",
        "gold_parse": "",
        "query": "SELECT first_name, MAX(semester_id) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id;",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Which customers made orders between 2009-01-01 and 2010-01-01? Find their names.",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
        "query": "SELECT customer_name FROM Customers WHERE customer_details BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT Position FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "When and in what zip code did max temperature reach 80?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code , min_humidity FROM weather WHERE min_visibility_miles > value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What is all the product data, as well as  each product's manufacturer?",
        "gold_parse": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code",
        "query": "SELECT Revenue , Revenue FROM Manufacturers",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many employees who are IT staff are from each city?",
        "gold_parse": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
        "query": "SELECT city , Count ( * ) FROM employees GROUP BY city",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "Find the details for all chip models.",
        "gold_parse": "SELECT * FROM chip_model",
        "query": "SELECT used_kb FROM screen_mode WHERE Type = value",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "query": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC",
        "question": "What are the themes of parties ordered by the number of hosts in ascending manner?",
        "correctness": 1,
        "gold_parse": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC"
    },
    {
        "db_id": "hospital_1",
        "question": "What is the employee id of the head whose department has the least number of employees?",
        "gold_parse": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1",
        "query": "SELECT T1.SSN FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
        "question": "How much amount in total were claimed in the most recently created document?",
        "correctness": 1,
        "gold_parse": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)"
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5",
        "question": "Which membership card has more than 5 members?",
        "correctness": 1,
        "gold_parse": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5"
    },
    {
        "db_id": "driving_school",
        "question": "List the number of customers that did not have any payment history.",
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments )",
        "query": "SELECT Count ( * ) FROM Customers AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Lessons AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List all the subject names.",
        "gold_parse": "SELECT subject_name FROM SUBJECTS",
        "query": "SELECT login_name FROM Students",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "gold_parse": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "query": "select avg ( LifeExpectancy ) , sum ( LifeExpectancy ) from country where Continent < value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the course with the most registered students?",
        "correctness": 1,
        "gold_parse": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "world_1",
        "question": "What are the names of European countries with many people?",
        "gold_parse": "",
        "query": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population > 'many'",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
        "question": "How many accounts have a savings balance above the average savings balance?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)"
    },
    {
        "db_id": "network_1",
        "question": "Show the names of highschoolers and the count of their occurrences.",
        "gold_parse": "",
        "query": "SELECT name, COUNT(*) FROM Highschooler;",
        "correctness": 0
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT DISTINCT Manager FROM branch",
        "question": "Who are the distinct managers of branches?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Manager FROM branch"
    },
    {
        "db_id": "shop_membership",
        "question": "Show the member name and hometown who registered a branch in 2016.",
        "gold_parse": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016",
        "query": "SELECT T1.Name , T1.Hometown FROM member AS T1 JOIN branch AS T2 JOIN membership_register_branch AS T3 ON T1.Member_ID = T3.Member_ID AND T3.Branch_ID = T2.Branch_ID WHERE T2.Open_year = value",
        "correctness": 0
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id",
        "question": "List all the pairs of buyer first names and product names.",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id"
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , min_temperature_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "behavior_monitoring",
        "question": "What is the zip code of the address where the teacher with first name \"Lyla\" lives?",
        "gold_parse": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"Lyla\"",
        "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the customer name and date of the orders that have the status \"Delivered\".",
        "gold_parse": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"",
        "query": "SELECT T1.customer_name , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = value",
        "correctness": 0
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
        "question": "What is the receipt number and date of the receipt in which the most expensive item was bought?",
        "correctness": 1,
        "gold_parse": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1"
    },
    {
        "db_id": "geography",
        "question": "List states where no city has a population of less than 200,000.",
        "gold_parse": "",
        "query": "SELECT state_name, MIN(population) AS min_pop FROM city GROUP BY state_name HAVING min_pop > 200000;",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the last names of students in room 111?",
        "gold_parse": "SELECT lastname FROM list WHERE classroom  =  111",
        "query": "SELECT LastName FROM teachers WHERE Classroom = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "question": "Show the flight number and distance of the flight with maximum price.",
        "correctness": 1,
        "gold_parse": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000",
        "question": "Which mountains are taller than 3000 meters?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000"
    },
    {
        "db_id": "election",
        "query": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "question": "Show the lieutenant governor and comptroller from the democratic party.",
        "correctness": 1,
        "gold_parse": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT count(*) FROM inst",
        "question": "How many institutions are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM inst"
    },
    {
        "db_id": "flight_1",
        "question": "What is the id and name of the aircraft that can cover the maximum distance?",
        "gold_parse": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "query": "SELECT aid , name FROM aircraft",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the titles of films that include 'Deleted Scenes' in their special feature section.",
        "gold_parse": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "query": "SELECT title FROM film WHERE title LIKE value",
        "correctness": 0
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "Find the type of contents that are not in the warehouses located at New York.",
        "correctness": 1,
        "gold_parse": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "question": "What is the name of the race held most recently?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM races ORDER BY date DESC LIMIT 1"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;",
        "question": "How many poker players are there from each nationality?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;"
    },
    {
        "db_id": "college_2",
        "question": "What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query": "SELECT T1.sec_id FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year ! = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of the physicians who have 'senior' in their titles.",
        "gold_parse": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "query": "SELECT Name FROM Physician WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "car_racing",
        "query": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1",
        "question": "Which make has more than one team?",
        "correctness": 1,
        "gold_parse": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000",
        "question": "What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000"
    },
    {
        "db_id": "document_management",
        "question": "Find the average access counts of documents with functional area \"Acknowledgement\".",
        "gold_parse": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"",
        "query": "SELECT Avg ( T2.access_count ) FROM Functional_Areas AS T1 JOIN Documents AS T2 JOIN Document_Functional_Areas AS T3 ON T1.functional_area_code = T3.functional_area_code AND T3.document_code = T2.document_code WHERE T1.parent_functional_area_code = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Return all the apartment numbers sorted by the room count in ascending order.",
        "gold_parse": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
        "query": "SELECT apt_number FROM Apartments ORDER BY bathroom_count Asc",
        "correctness": 0
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)",
        "question": "What are the headphone models that cost less than the average price?",
        "correctness": 1,
        "gold_parse": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)"
    },
    {
        "db_id": "singer",
        "question": "Sum the birth years of singers with songs having sales greater than 5000.",
        "gold_parse": "",
        "query": "SELECT Citizenship, SUM(Birth_Year) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 5000;",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts",
        "question": "What are the ids, date opened, name, and other details for all accounts?",
        "correctness": 1,
        "gold_parse": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the checking and savings balances in accounts belonging to Brown?",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "query": "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);",
        "question": "What are the names of the shortest poker players?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);"
    },
    {
        "db_id": "store_product",
        "question": "What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?",
        "gold_parse": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5",
        "query": "SELECT product FROM product WHERE dpi > value OR dpi < value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What is the day Number and date of all the documents?",
        "gold_parse": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date",
        "query": "SELECT T1.Day_Number , T2.Actual_Destruction_Date FROM Ref_Calendar AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Calendar_Date = T2.Planned_Destruction_Date",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.AirportName, T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport;",
        "question": "Show the names of source airports and their flight numbers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.AirportName, T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;",
        "question": "Give the feature name and description for the most common feature across all properties.",
        "correctness": 1,
        "gold_parse": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title, release_year FROM movie ORDER BY release_year DESC;",
        "question": "What are the titles and release years of movies ordered by release year in descending order?",
        "correctness": 1,
        "gold_parse": "SELECT title, release_year FROM movie ORDER BY release_year DESC;"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Name FROM climber ORDER BY Points DESC",
        "question": "List the names of climbers in descending order of points.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM climber ORDER BY Points DESC"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "question": "What are the name and level of catalog structure with level number between 5 and 10",
        "correctness": 1,
        "gold_parse": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "question": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Player ,  Years_Played FROM player",
        "question": "Who are the different players and how many years has each played?",
        "correctness": 1,
        "gold_parse": "SELECT Player ,  Years_Played FROM player"
    },
    {
        "db_id": "advising",
        "question": "What is the average name of courses?",
        "gold_parse": "",
        "query": "SELECT AVG(name) FROM course;",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type",
        "question": "What are the different transaction types, and how many transactions of each have taken place?",
        "correctness": 1,
        "gold_parse": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type"
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog content has the smallest capacity? Return the catalog entry name.",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number ORDER BY T3.height Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
        "query": "SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = value INTERSECT SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'",
        "question": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?",
        "correctness": 1,
        "gold_parse": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'"
    },
    {
        "db_id": "department_management",
        "question": "What are the distinct ages of the heads who are acting?",
        "gold_parse": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
        "query": "SELECT DISTINCT age FROM head",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the courses that are registered or attended by the student whose id is 121?",
        "gold_parse": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "query": "SELECT course_id FROM Student_Course_Attendance WHERE student_id = value OR student_id = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "question": "Find how many school locations have the word 'NY'.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\""
    },
    {
        "db_id": "hr_1",
        "question": "display those departments where more than ten employees work who got a commission percentage.",
        "gold_parse": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
        "query": "SELECT T1.DEPARTMENT_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
        "question": "Please show the least common assessment for students.",
        "correctness": 1,
        "gold_parse": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";",
        "question": "Find the number of times ROY SWEAZY has reserved a room.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which apartment type code appears the most often?",
        "correctness": 1,
        "gold_parse": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Kate');",
        "question": "What are the names of singers who are the same age as Kate?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Kate');"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Country, COUNT(*) FROM airlines GROUP BY Country;",
        "question": "How many airlines are there in each country?",
        "correctness": 1,
        "gold_parse": "SELECT Country, COUNT(*) FROM airlines GROUP BY Country;"
    },
    {
        "db_id": "hr_1",
        "question": "display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM countries AS T1 JOIN employees AS T2 WHERE T1.COUNTRY_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
        "question": "How many degrees were conferred in \"San Jose State University\" in 2000?",
        "correctness": 1,
        "gold_parse": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
        "question": "How many stations are in Mountain View?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\""
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3",
        "question": "Find the top three dates with the most receipts.",
        "correctness": 1,
        "gold_parse": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "What are the names of the youngest singers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT Max ( date ) FROM weather",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
        "question": "Show the name of colleges that have at least two players in descending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "query": "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT OMIM FROM enzyme )",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
        "question": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\""
    },
    {
        "db_id": "dorm_1",
        "question": "Find the number of students whose age is older than the average age for each gender.",
        "gold_parse": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
        "query": "SELECT Sex , Count ( * ) FROM Student WHERE Sex = value GROUP BY Sex",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;",
        "question": "Find the name of the room with the maximum occupancy.",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of section IDs for each student's other details?",
        "gold_parse": "",
        "query": "SELECT other_student_details, SUM(section_id) FROM Students JOIN Sections ON Students.student_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many different instructors have taught some course?",
        "gold_parse": "SELECT COUNT (DISTINCT id) FROM teaches",
        "query": "SELECT Count ( DISTINCT name ) FROM instructor",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , min_dew_point_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "question": "Count the number of different official languages corresponding to countries that players who play Defender are from.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers in grades below the maximum?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade < (SELECT MAX(grade) FROM Highschooler);",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > value OR T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join",
        "question": "What are the names, ages, and countries of artists, sorted by the year they joined?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)",
        "question": "What is the mean longitude for all stations that have never had more than 10 bikes available?",
        "correctness": 1,
        "gold_parse": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT * FROM PilotSkills WHERE age  <  30",
        "question": "Find all information of on pilots whose age is less than 30.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM PilotSkills WHERE age  <  30"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Title FROM ALBUM ORDER BY Title",
        "question": "What are all the album titles, in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM ALBUM ORDER BY Title"
    },
    {
        "db_id": "musical",
        "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
        "question": "Who are the nominees who have been nominated more than two times?",
        "correctness": 1,
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1",
        "question": "What are the names of authors who have exactly 1 paper?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
        "question": "Return the total points of the gymnast with the lowest age.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1"
    },
    {
        "db_id": "music_4",
        "question": "What are the famous titles of the artist \"Triumfall\"?",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"",
        "query": "SELECT Famous_Title FROM artist WHERE Famous_Release_date = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "question": "How many distinct official languages are there among countries of players whose positions are defenders.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
        "question": "Show all invoice ids and statuses without a payment.",
        "correctness": 1,
        "gold_parse": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'",
        "question": "What are the names of all directors whose movies have been reviewed by Sarah Martinez?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'"
    },
    {
        "db_id": "election",
        "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\"",
        "question": "Find the committees that have delegates both from from the democratic party and the liberal party.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\""
    },
    {
        "db_id": "phone_market",
        "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID",
        "question": "Show the names of phones and the districts of markets they are on.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID"
    },
    {
        "db_id": "geography",
        "question": "Which lakes are considered large?",
        "gold_parse": "",
        "query": "SELECT lake_name FROM lake WHERE area = 'large'",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "query": "SELECT DISTINCT birth_city FROM actor;",
        "question": "What are the different birth cities of actors?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT birth_city FROM actor;"
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT date FROM weather WHERE mean_dew_point_f > value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "query": "SELECT Count ( * ) FROM airlines WHERE Airline = value",
        "correctness": 0
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1",
        "question": "Find the names of districts which have more than one spokesman.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT age ,  count(*) FROM Student GROUP BY age",
        "question": "How old is each student and how many students are each age?",
        "correctness": 1,
        "gold_parse": "SELECT age ,  count(*) FROM Student GROUP BY age"
    },
    {
        "db_id": "dog_kennels",
        "question": "How many dogs went through any treatments?",
        "gold_parse": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "query": "SELECT Count ( * ) FROM Breeds",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county",
        "question": "List the state names and the number of customers living in each state.",
        "correctness": 1,
        "gold_parse": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "For which countries are there more than four distinct addresses listed?",
        "gold_parse": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4",
        "query": "SELECT country FROM Addresses GROUP BY country HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "How many camera lenses are not used in taking any photos?",
        "gold_parse": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
        "query": "SELECT Count ( * ) FROM mountain AS T1 WHERE T1.id NOT IN ( SELECT T2.mountain_id FROM photos AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"",
        "question": "Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\"",
        "correctness": 1,
        "gold_parse": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\""
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Max ( Consider_rate ) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum department ID for each student's middle name?",
        "gold_parse": "",
        "query": "SELECT middle_name, MIN(department_id) FROM Students JOIN Departments ON Students.student_id = Departments.department_id;",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000",
        "gold_parse": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "query": "SELECT Count ( * ) FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id WHERE T3.amount > value OR T2.Year < value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "gold_parse": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "query": "select T1.FlightNo from flights as T1 join airports as T2 on T1.DestAirport = T2.AirportCode where T2.AirportName = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "question": "Show all product names without an order.",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id"
    },
    {
        "db_id": "hr_1",
        "question": "Which job titles correspond to jobs with salaries over 9000?",
        "gold_parse": "SELECT job_title FROM jobs WHERE min_salary  >  9000",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";",
        "question": "What is the description of role code ED?",
        "correctness": 1,
        "gold_parse": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";"
    },
    {
        "db_id": "program_share",
        "question": "What is the list of program origins ordered alphabetically?",
        "gold_parse": "SELECT origin FROM program ORDER BY origin",
        "query": "SELECT Name FROM channel ORDER BY Name Asc",
        "correctness": 0
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the code of the product type that is least common?",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "question": "What are all the policy types of the customer named \"Dayana Robel\"?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\""
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4",
        "question": "What are the names of movies that get 3 star and 4 star?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the different descriptions for templates that have been used in a document.",
        "gold_parse": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "query": "select Document_Description from Documents",
        "correctness": 0
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code",
        "question": "Show all product type codes and the average price for each type.",
        "correctness": 1,
        "gold_parse": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code"
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Max ( Consider_rate ) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many different songs have shared vocals?",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"",
        "query": "SELECT Count ( DISTINCT Title ) FROM Songs",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "How many aircrafts exist in the database?",
        "gold_parse": "SELECT count(*) FROM Aircraft",
        "query": "SELECT Count ( * ) FROM flight",
        "correctness": 0
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
        "question": "Return the name of the youngest pilot to fly Piper Cub.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;",
        "question": "List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names, checking balances, and savings balances for all customers?",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "query": "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "question": "What is the savings balance of the account belonging to the customer with the highest checking balance?",
        "correctness": 1,
        "gold_parse": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1"
    },
    {
        "db_id": "wta_1",
        "question": "What are the codes of countries with more than 50 players?",
        "gold_parse": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "query": "SELECT country_code FROM players WHERE player_id > value",
        "correctness": 0
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name",
        "question": "List all Planets' names and coordinates in alphabetical order of name.",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);",
        "question": "What are the names of conductors with the highest conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "inn_1",
        "question": "How many rooms have a king bed?",
        "gold_parse": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\"",
        "query": "SELECT Count ( * ) FROM Reservations WHERE CheckIn = value",
        "correctness": 0
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1",
        "question": "What is the most uncommon order status?",
        "correctness": 1,
        "gold_parse": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT count(*) FROM campuses",
        "question": "What is the total number of campuses?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM campuses"
    },
    {
        "db_id": "world_1",
        "question": "Which continent has the most diverse languages?",
        "gold_parse": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "select Continent from country group by Continent order by count ( Continent ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "gold_parse": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
        "query": "SELECT Count ( * ) FROM cars_data WHERE Accelerate = value",
        "correctness": 0
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name FROM vehicles ORDER BY model_year DESC",
        "question": "Show names for all vehicles in descending order of model year.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM vehicles ORDER BY model_year DESC"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM tv_series WHERE num_of_seasons < 2;",
        "question": "Which TV series have less than 2 seasons?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM tv_series WHERE num_of_seasons < 2;"
    },
    {
        "db_id": "swimming",
        "question": "What is the name of the stadium which held the most events?",
        "gold_parse": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM stadium GROUP BY ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the minimum life expectancy of regions with cities having a population over 2 million.",
        "gold_parse": "",
        "query": "SELECT Region, MIN(LifeExpectancy) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Population > 2000000;",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY > = value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Count the number of universities that do not participate in the baketball match.",
        "gold_parse": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
        "query": "SELECT Count ( * ) FROM university AS T1 WHERE T1.School_ID NOT IN ( SELECT T2.School_ID FROM basketball_match AS T2 WHERE T2.ACC_Road = value )",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",
        "question": "Show the invoice number and the number of transactions for each invoice.",
        "correctness": 1,
        "gold_parse": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE department = 'Computer Science';",
        "question": "What are the names of courses in the Computer Science department?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE department = 'Computer Science';"
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of the employees whose salary if within the range of smallest salary and 2500.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM employees ORDER BY SALARY Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What is the first name and country code of the oldest player?",
        "gold_parse": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "query": "select first_name , country_code from players order by birth_date desc limit value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "gold_parse": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "query": "SELECT Name FROM wine WHERE Year < ( SELECT Year FROM wine WHERE Winery = value )",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_selling_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who are in the same grade as Eve?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade IN (SELECT grade FROM Highschooler WHERE name = 'Eve');",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "question": "Find courses that ran in Fall 2009 and in Spring 2010.",
        "correctness": 1,
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
        "question": "Find the IDs of customers whose name contains \"Diana\".",
        "correctness": 1,
        "gold_parse": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\""
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1",
        "question": "Who is the author of paper 1?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1"
    },
    {
        "db_id": "music_2",
        "question": "Which vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"?",
        "gold_parse": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"",
        "query": "SELECT T2.Type FROM Band AS T1 JOIN Vocals AS T2 ON T1.Id = T2.Bandmate WHERE T1.Lastname = value AND T1.Lastname = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What is the average weight of all players?",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "query": "SELECT Avg ( stamina ) FROM Player_Attributes",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY LIKE value",
        "correctness": 0
    },
    {
        "db_id": "address_1",
        "query": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" ORDER BY distance DESC LIMIT 1",
        "question": "What is the name of the city furthest to Boston?",
        "correctness": 1,
        "gold_parse": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" ORDER BY distance DESC LIMIT 1"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MAX(Height) FROM people);",
        "question": "What are the names of the tallest poker players?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height = (SELECT MAX(Height) FROM people);"
    },
    {
        "db_id": "hr_1",
        "question": "What are the employee ids, full names, and job ids for employees who make more than the highest earning employee with title PU_MAN?",
        "gold_parse": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )",
        "query": "SELECT T2.EMPLOYEE_ID , T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE = value UNION SELECT T2.EMPLOYEE_ID , T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE = value",
        "correctness": 0
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT min(rank) FROM review",
        "question": "Find the highest rank of all reviews.",
        "correctness": 1,
        "gold_parse": "SELECT min(rank) FROM review"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"",
        "question": "What are the addresses of customers living in Germany who have had an invoice?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\""
    },
    {
        "db_id": "hr_1",
        "query": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "question": "What are the first and last name for those employees who works either in department 70 or 90?",
        "correctness": 1,
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90"
    },
    {
        "db_id": "election",
        "query": "SELECT count(DISTINCT Governor) FROM party",
        "question": "Count the number of distinct governors.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Governor) FROM party"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1",
        "question": "Who is the author of paper 1?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1"
    },
    {
        "db_id": "program_share",
        "question": "find the program owners that have some programs in both morning and night time.",
        "gold_parse": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
        "query": "SELECT T2.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID WHERE T1.Owner = value INTERSECT SELECT T1.Owner FROM program AS T1 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID WHERE T3.Time_of_day = value",
        "correctness": 0
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code",
        "question": "What are the type of questions and their counts?",
        "correctness": 1,
        "gold_parse": "SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code"
    },
    {
        "db_id": "college_2",
        "question": "Find the name of students who didn't take any course from Biology department.",
        "gold_parse": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
        "query": "SELECT T1.name FROM student AS T1 EXCEPT SELECT T1.name FROM department AS T2 JOIN course AS T3 ON T3.dept_name = T2.dept_name JOIN student AS T1 ON T2.dept_name = T1.dept_name WHERE T3.dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "question": "Find the name and partition id for users who tweeted less than twice.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2"
    },
    {
        "db_id": "advising",
        "question": "How many distinct courses are there in the student records?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT course_id) FROM student_record;",
        "correctness": 0
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT avg(price) ,  food FROM goods GROUP BY food",
        "question": "What is the average price for each food type?",
        "correctness": 1,
        "gold_parse": "SELECT avg(price) ,  food FROM goods GROUP BY food"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID",
        "question": "What are the names of wrestlers and the elimination moves?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
        "question": "List all the distinct product names, price and descriptions which are bought by female customers.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'"
    },
    {
        "db_id": "museum_visit",
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "gold_parse": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
        "query": "SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT Min ( Num_of_Staff ) FROM museum WHERE Open_Year < value )",
        "correctness": 0
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome",
        "question": "Show meeting outcome codes and the number of meeting in each outcome.",
        "correctness": 1,
        "gold_parse": "SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome"
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.apt_number = value AND T1.building_short_name = value",
        "correctness": 0
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)",
        "question": "List the names of countries that do not have any official language.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "gold_parse": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "query": "SELECT Template_Details , Template_Type_Code FROM Templates WHERE Version_Number > value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
        "question": "Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?",
        "correctness": 1,
        "gold_parse": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900",
        "question": "What are the first and last names of all distinct artists who made sculptures before 1900?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(*) FROM Paper",
        "question": "Count the number of papers.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Paper"
    },
    {
        "db_id": "race_track",
        "query": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS",
        "question": "Show the race class and number of races in each class.",
        "correctness": 1,
        "gold_parse": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)",
        "question": "What are the names of all employees who have a salary greater than average or more than 5000?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)"
    },
    {
        "db_id": "wedding",
        "query": "SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)",
        "question": "Show the name and age for all male people who don't have a wedding.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names of enzymes who does not produce 'Heme'?",
        "gold_parse": "SELECT name FROM enzyme WHERE product != 'Heme'",
        "query": "SELECT name FROM enzyme WHERE Chromosome ! = value",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Count the number of distinct claim outcome codes.",
        "gold_parse": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing",
        "query": "SELECT Count ( DISTINCT Claim_Status_Code ) FROM Claim_Headers",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "Find the number of pets for each student who has any pet and student id.",
        "gold_parse": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "query": "SELECT Count ( * ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, LifeExpectancy FROM country WHERE LifeExpectancy IS NOT NULL;",
        "question": "What are the names and life expectancies of countries that have a recorded life expectancy?",
        "correctness": 1,
        "gold_parse": "SELECT Name, LifeExpectancy FROM country WHERE LifeExpectancy IS NOT NULL;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Grace'));",
        "question": "What are the names of highschoolers who are friends with Grace?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT ID FROM Highschooler WHERE name = 'Grace'));"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);",
        "question": "return the unique ids of sailors who are older than any sailors.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);"
    },
    {
        "db_id": "driving_school",
        "question": "What are the first and last names of all customers with more than 2 payments?",
        "gold_parse": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2",
        "query": "SELECT first_name , last_name FROM Customers GROUP BY customer_id HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id",
        "question": "What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?",
        "correctness": 1,
        "gold_parse": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU",
        "question": "For each gender, return the gender code and the number of students who identify as that gender.",
        "correctness": 1,
        "gold_parse": "SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT COUNT (DISTINCT Country) FROM player",
        "question": "How many different countries are players from?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT (DISTINCT Country) FROM player"
    },
    {
        "db_id": "orchestra",
        "question": "What is the minimum nationality, average nationality, and maximum conductor name?",
        "gold_parse": "",
        "query": "SELECT MIN(Nationality), AVG(Nationality), MAX(Name) FROM conductor;",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1",
        "question": "What is the department name and corresponding building for the department with the greatest budget?",
        "correctness": 1,
        "gold_parse": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\"",
        "question": "Find the titles of all the papers written by \"Jeremy Gibbons\"",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers",
        "question": "Count the number of customers.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID",
        "question": "What are the titles and ids for albums containing tracks with unit price greater than 1?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID"
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT(DISTINCT business_id) FROM category;",
        "question": "How many distinct businesses have categories?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT business_id) FROM category;"
    },
    {
        "db_id": "customer_complaints",
        "question": "What is the phone number of the customer who has filed the most recent complaint?",
        "gold_parse": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
        "query": "SELECT T1.phone_number FROM Customers AS T1 WHERE T1.customer_id IN ( SELECT T2.customer_id FROM Complaints AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show the protein name and the institution name.",
        "gold_parse": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",
        "query": "SELECT T2.common_name , T1.Type FROM Institution AS T1 JOIN protein AS T2 ON T1.Institution_id = T2.Institution_id",
        "correctness": 0
    },
    {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800",
        "question": "Show all the locations where no cinema has capacity over 800.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode < 'SFO';",
        "question": "What are the names of airports with airport codes less than 'SFO'?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode < 'SFO';"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
        "question": "Which assessment has the smallest frequency count?",
        "correctness": 1,
        "gold_parse": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "question": "When and in what zip code did max temperature reach 80?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "query": "SELECT zip_code , min_dew_point_f FROM weather WHERE min_visibility_miles < value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT count(*) FROM Staff_in_processes WHERE document_id  =  0 AND process_id  =  9",
        "question": "How many staff are the document with id 0 and process with id 9.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Staff_in_processes WHERE document_id  =  0 AND process_id  =  9"
    },
    {
        "db_id": "party_host",
        "query": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age",
        "question": "For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director",
        "question": "For each director, what is the title and score of their most poorly rated movie?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director"
    },
    {
        "db_id": "wine_1",
        "question": "What are the distinct wineries which produce wines costing between 50 and 100?",
        "gold_parse": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100",
        "query": "SELECT DISTINCT Winery FROM wine WHERE Score BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
        "question": "Return the names of entrepreneurs.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID"
    },
    {
        "db_id": "college_2",
        "question": "What is the title of the course that is a prerequisite for Mobile Computing?",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "query": "SELECT title FROM course WHERE dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the average, maximum and total revenues of all companies?",
        "gold_parse": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers",
        "query": "SELECT Avg ( Revenue ) , Min ( Revenue ) , Max ( Revenue ) FROM Manufacturers",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT T3.Document_Subset_Name ,  T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subset_Members  AS T2 ON T1.Related_Document_Object_ID = T2.Document_Object_ID JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID =  T3.Document_Subset_ID",
        "question": "List all document subsets of documents that related to each document id. List the name of document subset and the document id.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T3.Document_Subset_Name ,  T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subset_Members  AS T2 ON T1.Related_Document_Object_ID = T2.Document_Object_ID JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID =  T3.Document_Subset_ID"
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
        "question": "Give the title of the prerequisite to the course International Finance.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT fname FROM authors WHERE lname  =  \"Ueno\"",
        "question": "What is the first name of the author with last name \"Ueno\"?",
        "correctness": 1,
        "gold_parse": "SELECT fname FROM authors WHERE lname  =  \"Ueno\""
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Ref_Service_Types AS T1 JOIN Drama_Workshop_Groups AS T2 JOIN Services AS T3 ON T1.Service_Type_Code = T3.Service_Type_Code AND T3.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Service_Type_Description = value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "query": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'",
        "question": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000",
        "question": "What are the names of cities with a population over 500,000 and their respective countries?",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions",
        "question": "Show the number of transaction types.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions"
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the name of the property that has house features?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE property_type_code = (SELECT property_type_code FROM Ref_Feature_Types WHERE feature_type_name = 'House');",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_id FROM Business_processes EXCEPT SELECT process_id FROM Documents_processes",
        "question": "List all process ids with no document.",
        "correctness": 1,
        "gold_parse": "SELECT process_id FROM Business_processes EXCEPT SELECT process_id FROM Documents_processes"
    },
    {
        "db_id": "race_track",
        "query": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1",
        "question": "Show the name and location of track with 1 race.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1"
    },
    {
        "db_id": "hospital_1",
        "question": "Which patients made more than one appointment? Tell me the name and phone number of these patients.",
        "gold_parse": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1",
        "query": "SELECT T1.Name , T1.Phone FROM Patient AS T1 JOIN Appointment AS T2 ON T1.SSN = T2.Patient GROUP BY T2.Physician HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the countries having at least one car maker? List name and id.",
        "gold_parse": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1",
        "query": "SELECT Country , Id FROM car_makers GROUP BY Country HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which department has the largest number of employees?",
        "gold_parse": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1",
        "query": "SELECT Department FROM Affiliated_With GROUP BY Department ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);",
        "question": "What are the names of businesses with the lowest business ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MIN(bid) FROM business);"
    },
    {
        "db_id": "flight_1",
        "question": "Show the flight number of flights with three lowest distances.",
        "gold_parse": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
        "query": "SELECT flno FROM flight ORDER BY price Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name ORDER BY plane_name",
        "question": "What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name ORDER BY plane_name"
    },
    {
        "db_id": "government_shift",
        "query": "select distinct t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id where t2.service_id  =  (select service_id from services group by service_id order by count(*) asc limit 1)",
        "question": "Which customers used the least commonly-used service ? Give me the distinct customer details .",
        "correctness": 1,
        "gold_parse": "select distinct t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id where t2.service_id  =  (select service_id from services group by service_id order by count(*) asc limit 1)"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Return the most common type of affiliation across all institutions.",
        "correctness": 1,
        "gold_parse": "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT avg(bedroom_count) FROM Apartments",
        "question": "What is the average number of bedrooms of all apartments?",
        "correctness": 1,
        "gold_parse": "SELECT avg(bedroom_count) FROM Apartments"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "question": "How many courses that do not have prerequisite?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id",
        "question": "For each building, show the name of the building and the number of institutions in it.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id < 7;",
        "question": "What are the full names of car makers with IDs less than 7?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id < 7;"
    },
    {
        "db_id": "geography",
        "question": "How many states do not border California?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM border_info WHERE state_name = 'California';",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.",
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "query": "SELECT DISTINCT Eliminated_By FROM Elimination WHERE Team ! = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "query": "SELECT cName , enr FROM College WHERE enr > value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, highest_elevation FROM highlow WHERE highest_elevation = 'Mount Whitney';",
        "question": "Which state has the highest elevation at Mount Whitney?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, highest_elevation FROM highlow WHERE highest_elevation = 'Mount Whitney';"
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who are liked by others in the same grade as Bob?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE grade = (SELECT grade FROM Highschooler WHERE name = 'Bob'));",
        "correctness": 0
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the most popular plane?",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10",
        "question": "What are the ids of the stations in San Francisco that normally have more than 10 bikes available?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_buying_price , typical_buying_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "query": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9",
        "question": "Show the names of all the donors except those whose donation amount less than 9.",
        "correctness": 1,
        "gold_parse": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1",
        "question": "What are the name and the nationality of the host of the highest age?",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name FROM mountain WHERE mountain_altitude > 4000;",
        "question": "Which mountains have an altitude greater than 4,000 meters?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name FROM mountain WHERE mountain_altitude > 4000;"
    },
    {
        "db_id": "book_1",
        "query": "SELECT name FROM Client EXCEPT SELECT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
        "question": "Show all client names for clients who have not made orders.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Client EXCEPT SELECT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Student WHERE age  =  18",
        "question": "How many students are age 18?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Student WHERE age  =  18"
    },
    {
        "db_id": "ship_mission",
        "question": "What is the number of ships?",
        "gold_parse": "SELECT count(*) FROM ship",
        "query": "SELECT Count ( * ) FROM mission",
        "correctness": 0
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "What is all the information about hiring?",
        "gold_parse": "SELECT * FROM hiring",
        "query": "SELECT * FROM employee",
        "correctness": 0
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
        "question": "List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
        "question": "what are the first name and last name of all candidates?",
        "correctness": 1,
        "gold_parse": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"
    },
    {
        "db_id": "singer",
        "query": "SELECT T1.Sales, T2.Citizenship FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID;",
        "question": "Show the sales of songs and the citizenships of the singers.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Sales, T2.Citizenship FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID;"
    },
    {
        "db_id": "csu_1",
        "question": "What is the campus fee of \"San Francisco State University\" in year 2000?",
        "gold_parse": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000",
        "query": "SELECT T2.CampusFee FROM Campuses AS T1 JOIN csu_fees AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = value AND T2.Year = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Find the kind of program which most number of students are enrolled in?",
        "gold_parse": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'",
        "question": "Find the names and phone numbers of customers living in California state.",
        "correctness": 1,
        "gold_parse": "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'"
    },
    {
        "db_id": "flight_2",
        "question": "Return the number of flights departing from Aberdeen.",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "query": "SELECT Count ( * ) FROM airports WHERE AirportName = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "How many customers are there?",
        "gold_parse": "SELECT count(*) FROM Customers",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
        "question": "What is the full name of each student who is not allergic to any type of food.",
        "correctness": 1,
        "gold_parse": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT count(DISTINCT Province) FROM institution",
        "question": "Count the number of different provinces that have institutions.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Province) FROM institution"
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the different room counts for properties?",
        "gold_parse": "",
        "query": "SELECT DISTINCT room_count FROM Properties;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, COUNT(*) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY Name ORDER BY COUNT(*) DESC;",
        "question": "List the names of singers and the number of songs they have sung, ordered by the number of songs in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT Name, COUNT(*) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY Name ORDER BY COUNT(*) DESC;"
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name of physicians who are in charge of more than one patient.",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1",
        "query": "SELECT Name FROM Physician GROUP BY Name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the titles of songs that have sales above the minimum?",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Sales > (SELECT Min(Sales) FROM song);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name, property_type_code FROM Properties;",
        "question": "List the names of properties and their types.",
        "correctness": 1,
        "gold_parse": "SELECT property_name, property_type_code FROM Properties;"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT CONTENTS FROM boxes",
        "question": "Select all distinct contents in all the boxes.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT CONTENTS FROM boxes"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year",
        "question": "What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year"
    },
    {
        "db_id": "customer_complaints",
        "question": "What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints?",
        "gold_parse": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
        "query": "SELECT T1.email_address FROM Customers AS T1 JOIN Complaints AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"Carl Skerlong\" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
        "question": "Find the names of drivers who were in both \"James Hinchcliffe\" and \"Carl Skerlong\" pole positions before.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"Carl Skerlong\" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\""
    },
    {
        "db_id": "wrestler",
        "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8"
    },
    {
        "db_id": "riding_club",
        "query": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2",
        "question": "Show the residences that have at least two players.",
        "correctness": 1,
        "gold_parse": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "e_government",
        "question": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?",
        "gold_parse": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
        "query": "SELECT state_province_county FROM Addresses WHERE town_city = value",
        "correctness": 0
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T1.Number_of_Championships DESC",
        "question": "What are the names of institutions, ordered descending by their number of championships?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T1.Number_of_Championships DESC"
    },
    {
        "db_id": "scholar",
        "question": "Calculate the average number of citing papers for each journal.",
        "gold_parse": "",
        "query": "SELECT journalname, AVG(numciting) FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE numciting IS NOT NULL GROUP BY journalname;",
        "correctness": 0
    },
    {
        "db_id": "boat_1",
        "query": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1",
        "question": "How many reservations exist for each boat that has more than 1 reservation already?",
        "correctness": 1,
        "gold_parse": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC",
        "question": "Show names of clubs in descending order of average earnings of players belonging.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC"
    },
    {
        "db_id": "flight_2",
        "question": "Find the name of airports which do not have any flight in and out.",
        "gold_parse": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "query": "SELECT AirportName FROM airports EXCEPT SELECT AirportName FROM airports",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "query": "SELECT paperid, title FROM paper;",
        "question": "What are the IDs and titles of all papers?",
        "correctness": 1,
        "gold_parse": "SELECT paperid, title FROM paper;"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
        "question": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\""
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last names of all the female (sex is F) students who have president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Sex = value AND T2.President_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the total number of students living in the male dorm (with gender M).",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "query": "SELECT Count ( * ) FROM Student AS T1 JOIN Dorm AS T2 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid AND T3.dormid = T2.dormid WHERE T2.gender = value AND T1.Sex = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to > = value",
        "correctness": 0
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\"",
        "question": "What are the last names of the author of the paper titled \"Binders Unbound\"?",
        "correctness": 1,
        "gold_parse": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\""
    },
    {
        "db_id": "behavior_monitoring",
        "question": "What are the line 1 and average monthly rentals of all student addresses?",
        "gold_parse": "SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id",
        "query": "SELECT Avg ( monthly_rental ) , Avg ( monthly_rental ) FROM Student_Addresses",
        "correctness": 0
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1",
        "question": "List the names of institutions with at least one championship.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1"
    },
    {
        "db_id": "wine_1",
        "question": "How many appelations are in Napa Country?",
        "gold_parse": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
        "query": "SELECT Count ( * ) FROM wine WHERE Winery = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show all the information about election.",
        "gold_parse": "SELECT * FROM election",
        "query": "SELECT * FROM county",
        "correctness": 0
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 WHERE T1.student_id  =  T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 WHERE T1.student_id  =  T2.student_id",
        "question": "For those students who have gone through an event, who do not have a student loan? List the students' biographical data",
        "correctness": 1,
        "gold_parse": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 WHERE T1.student_id  =  T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 WHERE T1.student_id  =  T2.student_id"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2",
        "question": "Give the districts which have two or more addresses.",
        "correctness": 1,
        "gold_parse": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2"
    },
    {
        "db_id": "art_1",
        "query": "SELECT title ,  LOCATION FROM sculptures",
        "question": "What are the sculptures called and where are they located?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  LOCATION FROM sculptures"
    },
    {
        "db_id": "college_2",
        "query": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
        "question": "Find the id of instructors who didn't teach any courses?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches"
    },
    {
        "db_id": "geography",
        "query": "SELECT border FROM border_info WHERE state_name = 'Nevada';",
        "question": "What are the borders of the state of Nevada?",
        "correctness": 1,
        "gold_parse": "SELECT border FROM border_info WHERE state_name = 'Nevada';"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Name FROM wrestler ORDER BY Days_held DESC",
        "question": "List the names of wrestlers in descending order of days held.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM wrestler ORDER BY Days_held DESC"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT count(DISTINCT SOURCE) FROM injury_accident",
        "question": "How many different kinds of information sources are there for injury accidents?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT SOURCE) FROM injury_accident"
    },
    {
        "db_id": "singer",
        "question": "Sum the birth years of singers with USA citizenship.",
        "gold_parse": "",
        "query": "SELECT Singer_ID, SUM(Birth_Year) FROM singer WHERE Citizenship = 'USA';",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id",
        "question": "How many distinct order ids correspond to each product?",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE \"%Mckeown ,  Kathleen%\" OR T3.name LIKE \"%Rambow ,  Owen%\"",
        "question": "Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE \"%Mckeown ,  Kathleen%\" OR T3.name LIKE \"%Rambow ,  Owen%\""
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;",
        "question": "What is the staff id of the staff who attended the least meetings but attended some meeting?",
        "correctness": 1,
        "gold_parse": "SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT * FROM basketball_match",
        "question": "What is all the information about the basketball match?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM basketball_match"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
        "question": "Count the number of cities in Australia.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'",
        "question": "How many universities are in Illinois or Ohio?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'"
    },
    {
        "db_id": "real_estate_properties",
        "question": "Calculate the average feature name for each property name.",
        "gold_parse": "",
        "query": "SELECT property_name, AVG(feature_name) FROM Properties JOIN Other_Available_Features ON Properties.property_type_code = Other_Available_Features.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "query": "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC",
        "question": "give me names of all compatible browsers and accelerators in the descending order of compatible year",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC"
    },
    {
        "db_id": "sakila_1",
        "question": "How many kinds of different ratings are listed?",
        "gold_parse": "SELECT count(DISTINCT rating) FROM film",
        "query": "SELECT Count ( * ) FROM actor",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Find the average fee on a CSU campus in 1996",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Year = value AND T3.Faculty = value",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?",
        "gold_parse": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",
        "query": "SELECT T2.Location , T2.Representative_Name FROM company AS T1 JOIN gas_station AS T2 JOIN station_company AS T3 ON T1.Company_ID = T3.Company_ID AND T3.Station_ID = T2.Station_ID ORDER BY T1.Market_Value Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "query": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle",
        "question": "List the names of battles and the ships lost in them.",
        "correctness": 1,
        "gold_parse": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle"
    },
    {
        "db_id": "flight_2",
        "question": "Find all airlines that have at least 10 flights.",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "query": "SELECT Airline FROM airlines GROUP BY Airline HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY = value OR T1.MIN_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM author WHERE oid = 1;",
        "question": "What are the names of authors belonging to organization with ID 1?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM author WHERE oid = 1;"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) LIMIT 1",
        "question": "Which country has least number of students?",
        "correctness": 1,
        "gold_parse": "SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE birth_year IS NULL;",
        "question": "Which actors do not have a recorded birth year?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM actor WHERE birth_year IS NULL;"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1",
        "question": "What are the forename and surname of the driver who has the smallest laptime?",
        "correctness": 1,
        "gold_parse": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE birth_year > 1990;",
        "question": "Which actors were born after 1990?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM actor WHERE birth_year > 1990;"
    },
    {
        "db_id": "election",
        "question": "Find the parties associated with the delegates from district 1. Who served as governors of the parties?",
        "gold_parse": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
        "query": "SELECT Party FROM party WHERE Comptroller = value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the customer id of the customer with the most accounts, and how many accounts does this person have?",
        "correctness": 1,
        "gold_parse": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1",
        "question": "What are the ids of the students who registered for course 301 most recently?",
        "correctness": 1,
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1"
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
        "question": "Show the details of all trucks in the order of their license number.",
        "correctness": 1,
        "gold_parse": "SELECT truck_details FROM trucks ORDER BY truck_licence_number"
    },
    {
        "db_id": "world_1",
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "gold_parse": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "query": "select Name , Region from country order by SurfaceArea desc limit value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_full_name = value AND T1.building_short_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5",
        "question": "What are the names of all the Japanese constructors that have earned more than 5 points?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5"
    },
    {
        "db_id": "government_shift",
        "query": "select distinct t1.service_details from services as t1 join customers_and_services as t2 on t1.service_id  =  t2.service_id where t2.customers_and_services_details  =  \"unsatisfied\"",
        "question": "Find details of all the services that have been marked as `` unsatisfied '' in customers and services details .",
        "correctness": 1,
        "gold_parse": "select distinct t1.service_details from services as t1 join customers_and_services as t2 on t1.service_id  =  t2.service_id where t2.customers_and_services_details  =  \"unsatisfied\""
    },
    {
        "db_id": "perpetrator",
        "question": "What is the total kills of the perpetrators with height more than 1.84.",
        "gold_parse": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84",
        "query": "SELECT Count ( * ) FROM people WHERE Height > value",
        "correctness": 0
    },
    {
        "db_id": "book_press",
        "query": "SELECT title ,  release_date FROM book ORDER BY sale_amount DESC LIMIT 5",
        "question": "Find the titles and publish dates of the top 5 best sale books.",
        "correctness": 1,
        "gold_parse": "SELECT title ,  release_date FROM book ORDER BY sale_amount DESC LIMIT 5"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)",
        "question": "What are the names of players who do not play any games?",
        "correctness": 1,
        "gold_parse": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)"
    },
    {
        "db_id": "college_2",
        "query": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the year and semester when offers the largest number of courses.",
        "correctness": 1,
        "gold_parse": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "dorm_1",
        "question": "Find the name of amenities of the dorm where the student with last name Smith is living in.",
        "gold_parse": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'",
        "query": "SELECT T2.dorm_name FROM Student AS T1 JOIN Dorm AS T2 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid AND T3.dormid = T2.dormid WHERE T1.LName = value",
        "correctness": 0
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"",
        "question": "Find all the papers published by \"Aaron Turon\".",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\""
    },
    {
        "db_id": "formula_1",
        "question": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?",
        "gold_parse": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
        "query": "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the details and star ratings of the 3 least expensive hotels.",
        "gold_parse": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
        "query": "SELECT T1.star_rating_description , T1.star_rating_description FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "query": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM producer WHERE nationality = 'Canadian';",
        "question": "What are the names of Canadian producers?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM producer WHERE nationality = 'Canadian';"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID",
        "question": "What are the different descriptions of all the parent documents?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID"
    },
    {
        "db_id": "railway",
        "question": "Show the names of trains and locations of railways they are in.",
        "gold_parse": "SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID",
        "query": "SELECT Built , Location FROM railway",
        "correctness": 0
    },
    {
        "db_id": "region_building",
        "query": "SELECT Name FROM region ORDER BY Area DESC LIMIT 5",
        "question": "What are the names of the 5 largest regions in terms of area?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM region ORDER BY Area DESC LIMIT 5"
    },
    {
        "db_id": "college_2",
        "query": "SELECT * FROM instructor ORDER BY salary",
        "question": "List the information of all instructors ordered by their salary in ascending order.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM instructor ORDER BY salary"
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "query": "SELECT T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id JOIN Engineer_Visits AS T3 ON T2.fault_log_entry_id = T3.fault_log_entry_id ORDER BY T3.visit_start_datetime Asc",
        "correctness": 0
    },
    {
        "db_id": "address_1",
        "query": "SELECT T1.city_name ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code",
        "question": "Find the number of students living in each city.",
        "correctness": 1,
        "gold_parse": "SELECT T1.city_name ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code"
    },
    {
        "db_id": "world_1",
        "question": "What is the earliest independence year in each continent?",
        "gold_parse": "",
        "query": "SELECT Region, MIN(IndepYear) FROM country GROUP BY Continent;",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1",
        "question": "what is id of students who registered some courses but the least number of courses in these students?",
        "correctness": 1,
        "gold_parse": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "chinook_1",
        "question": "What is all the customer information for customers in NY state?",
        "gold_parse": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"",
        "query": "SELECT Email FROM Customer WHERE State = value",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "What are the names of poker players who are shorter than the tallest player?",
        "gold_parse": "",
        "query": "SELECT Name FROM people WHERE Height < (SELECT MAX(Height) FROM people);",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the employee ID and job name for all those jobs in department 80.",
        "gold_parse": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80",
        "query": "SELECT T2.EMPLOYEE_ID , T1.JOB_TITLE FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY = value",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "query": "SELECT Singer_ID FROM singer WHERE Net_Worth_Millions > 100;",
        "question": "What is the ID of every singer who has a net worth of more than 100 million?",
        "correctness": 1,
        "gold_parse": "SELECT Singer_ID FROM singer WHERE Net_Worth_Millions > 100;"
    },
    {
        "db_id": "loan_1",
        "question": "What are the states, account types, and credit scores for customers who have 0 loans?",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "query": "SELECT state , acc_type , credit_score FROM customer",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
        "question": "Find the name and email of the user followed by the least number of people.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Name all rivers longer than 500 kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);",
        "question": "What are the names of the shortest poker players?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"",
        "question": "How many faculty lines are there at San Francisco State University in 2004?",
        "correctness": 1,
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\""
    },
    {
        "db_id": "wta_1",
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "gold_parse": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "query": "SELECT Count ( * ) FROM players",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What country does Roberto Almeida live?",
        "gold_parse": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\"",
        "query": "SELECT country FROM employees WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "book_1",
        "query": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\" AND T1.saleprice  <  (SELECT avg(saleprice) FROM Book)",
        "question": "What is the title of the book written by Plato has price lower than the average sale price of all books?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\" AND T1.saleprice  <  (SELECT avg(saleprice) FROM Book)"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "question": "For each movie that received more than 3 reviews, what is the average rating?",
        "correctness": 1,
        "gold_parse": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'",
        "question": "Show all artist names and the year joined who are not from United States.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  year_join FROM artist WHERE country != 'United States'"
    },
    {
        "db_id": "match_season",
        "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "question": "What are the names of countries that have both players with position forward and players with position defender?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\""
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000",
        "question": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.",
        "correctness": 1,
        "gold_parse": "SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000"
    },
    {
        "db_id": "hr_1",
        "question": "What are all the employee ids and the names of the countries in which they work?",
        "gold_parse": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query": "SELECT COUNTRY_ID , COUNTRY_NAME FROM countries",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the total number of instructors who teach a course in the Spring 2010 semester.",
        "gold_parse": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query": "SELECT Count ( * ) FROM takes WHERE year = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "query": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
        "question": "List total amount of  invoice from Chicago, IL.",
        "correctness": 1,
        "gold_parse": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";"
    },
    {
        "db_id": "music_2",
        "question": "Who is performing in the back stage position for the song \"Badlands\"? Show the first name and the last name.",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "What are the delegate and name of the county they belong to, for each county?",
        "gold_parse": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District",
        "query": "SELECT T2.Governor , T1.County_name FROM county AS T1 JOIN party AS T2 JOIN election AS T3 ON T1.County_Id = T3.District AND T3.Party = T2.Party_ID",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Eduardo Martins is a customer at which company?",
        "gold_parse": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"",
        "query": "SELECT DISTINCT T1.first_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.first_name = value AND T2.last_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Find distinct cities of addresses of people?",
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
        "query": "SELECT DISTINCT city FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find all the male members of club \"Hopkins Student Enterprises\". Show the first name and last name.",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T2.ClubName = value",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Sum the highest positions of songs with sales greater than 1000 for each singer.",
        "gold_parse": "",
        "query": "SELECT Name, SUM(Highest_Position) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 1000;",
        "correctness": 0
    },
    {
        "db_id": "wedding",
        "query": "SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)",
        "question": "Show the name and country for all people whose age is smaller than the average.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)"
    },
    {
        "db_id": "government_shift",
        "query": "select customer_details from customers where customer_id not in (select customer_id from customers_and_services)",
        "question": "Find the details of the customer who has never used any services .",
        "correctness": 1,
        "gold_parse": "select customer_details from customers where customer_id not in (select customer_id from customers_and_services)"
    },
    {
        "db_id": "hr_1",
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "gold_parse": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "query": "SELECT T2.SALARY , T1.MAX_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of all English songs.",
        "gold_parse": "SELECT song_name FROM song WHERE languages  =  \"english\"",
        "query": "SELECT song_name FROM song",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Give id of the instructor who advises students in the History department.",
        "gold_parse": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
        "query": "SELECT T2.i_ID FROM instructor AS T1 JOIN advisor AS T2 ON T1.ID = T2.i_ID WHERE T1.dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number",
        "question": "List the invoices' status, date and the date of shipment.",
        "correctness": 1,
        "gold_parse": "SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and full name of the customer with the most accounts.",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"",
        "question": "What are the different names of all reviewers whose ratings do not have a date field?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\""
    },
    {
        "db_id": "workshop_paper",
        "question": "Show the date and venue of each workshop in ascending alphabetical order of the venue.",
        "gold_parse": "SELECT Date ,  Venue FROM workshop ORDER BY Venue",
        "query": "SELECT Date , Venue FROM workshop ORDER BY Date Asc",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT sum(balance) FROM checking",
        "question": "What is the total checking balance in all accounts?",
        "correctness": 1,
        "gold_parse": "SELECT sum(balance) FROM checking"
    },
    {
        "db_id": "network_1",
        "question": "How many likes does Kyle have?",
        "gold_parse": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "query": "SELECT Count ( * ) FROM Highschooler WHERE name = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names and addressed of customers who have both New and Pending orders?",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "query": "SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) = value INTERSECT SELECT customer_name , customer_email FROM Customers GROUP BY customer_id HAVING Count ( * ) < value",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM movie WHERE budget IS NULL;",
        "question": "Which movies do not have a recorded budget?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movie WHERE budget IS NULL;"
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.max_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What is the name of the most common genre in all tracks?",
        "gold_parse": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Name FROM Genre GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the id, name and nationality of the architect who built most mills?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name , nationality FROM architect GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'",
        "question": "What are the names and results of battles between 1900 and 1950?",
        "correctness": 1,
        "gold_parse": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS",
        "question": "Find the number of headphones with a price higher than 200 for each class.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT t1.model FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id  =  t2.headphone_id GROUP BY t1.model ORDER BY sum(t2.quantity) DESC LIMIT 1",
        "question": "Which headphone model has the largest quantity of stock across all the stores?",
        "correctness": 1,
        "gold_parse": "SELECT t1.model FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id  =  t2.headphone_id GROUP BY t1.model ORDER BY sum(t2.quantity) DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'",
        "question": "What are the names and salaries of instructors who advises students in the History department?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'"
    },
    {
        "db_id": "match_season",
        "query": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country",
        "question": "Show the season, the player, and the name of the country that player belongs to.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT AVG(UnitPrice) FROM TRACK",
        "question": "Find the average unit price for a track.",
        "correctness": 1,
        "gold_parse": "SELECT AVG(UnitPrice) FROM TRACK"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"",
        "question": "What are the birth dates of employees living in Edmonton?",
        "correctness": 1,
        "gold_parse": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\""
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;",
        "question": "List the name of playlist which has number of tracks greater than 100.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;"
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "question": "What are the titles of courses without prerequisites?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct ages of students who have secretary votes in the fall election cycle?",
        "gold_parse": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"",
        "query": "SELECT DISTINCT Age FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "List all the event names by year from the most recent to the oldest.",
        "gold_parse": "SELECT name FROM event ORDER BY YEAR DESC",
        "query": "SELECT Name FROM event ORDER BY Year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "What is the average number of injuries caused each time?",
        "gold_parse": "SELECT avg(injured) FROM death",
        "query": "select avg ( injured ) , avg ( injured ) from death",
        "correctness": 0
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2",
        "question": "Which services have been used more than twice in first notification of loss? Return the service name.",
        "correctness": 1,
        "gold_parse": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT T3.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T1.age BETWEEN 20 AND 30",
        "question": "Find the names of boats booked by sailors whose age is between 20 and 30.",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T1.age BETWEEN 20 AND 30"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names of enzymes who does not produce 'Heme'?",
        "gold_parse": "SELECT name FROM enzyme WHERE product != 'Heme'",
        "query": "SELECT name FROM enzyme WHERE Porphyria ! = value",
        "correctness": 0
    },
    {
        "db_id": "body_builder",
        "query": "SELECT count(DISTINCT Birth_Place) FROM people",
        "question": "How many distinct birth places are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Birth_Place) FROM people"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, Net_Worth_Millions FROM singer WHERE Net_Worth_Millions > 50;",
        "question": "What are the names and net worths of singers who have a net worth of more than 50 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Net_Worth_Millions FROM singer WHERE Net_Worth_Millions > 50;"
    },
    {
        "db_id": "network_1",
        "query": "SELECT ID FROM Highschooler EXCEPT SELECT student_id FROM Friend;",
        "question": "Find the IDs of highschoolers who do not have any friends?",
        "correctness": 1,
        "gold_parse": "SELECT ID FROM Highschooler EXCEPT SELECT student_id FROM Friend;"
    },
    {
        "db_id": "geography",
        "question": "Which is the largest city in Texas?",
        "gold_parse": "",
        "query": "SELECT city_name FROM city WHERE state_name = 'Texas' ORDER BY population ASC;",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "query": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15",
        "question": "What is the average number of employees of the departments whose rank is between 10 and 15?",
        "correctness": 1,
        "gold_parse": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15"
    },
    {
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights leaving from APG.",
        "gold_parse": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "query": "SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 WHERE T1.Abbreviation = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building",
        "question": "How many rooms in each building have a capacity of over 50?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building"
    },
    {
        "db_id": "student_assessment",
        "question": "What are the different cities where people live?",
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
        "query": "SELECT DISTINCT city FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "gold_parse": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "query": "select name from Highschooler group by ID having count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "online_exams",
        "query": "SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2",
        "question": "Which students have 2 or more answer records? Give me their first names.",
        "correctness": 1,
        "gold_parse": "SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "car_1",
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "gold_parse": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent",
        "query": "SELECT Continent , Count ( * ) FROM continents GROUP BY Continent",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper;",
        "question": "What are the titles of all papers?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper;"
    },
    {
        "db_id": "journal_committee",
        "query": "SELECT Name FROM editor ORDER BY Age ASC",
        "question": "List the names of editors in ascending order of age.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM editor ORDER BY Age ASC"
    },
    {
        "db_id": "election",
        "query": "SELECT Delegate FROM election WHERE District  =  1",
        "question": "Who is the delegate of district 1 in the elections?",
        "correctness": 1,
        "gold_parse": "SELECT Delegate FROM election WHERE District  =  1"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country",
        "question": "Please show the countries and the number of climbers from each country.",
        "correctness": 1,
        "gold_parse": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country"
    },
    {
        "db_id": "video_game",
        "query": "SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise",
        "question": "List the name of each franchise and the number of games belonging to that franchise.",
        "correctness": 1,
        "gold_parse": "SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise"
    },
    {
        "db_id": "world_1",
        "question": "How many countries speak both English and Dutch?",
        "gold_parse": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "query": "select count ( * ) from countrylanguage where Language = value intersect select T1.Name from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.Language = value",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Eve');",
        "question": "What are the names of poker players who are the same height as Eve?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Eve');"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE SurfaceArea > 1000000;",
        "question": "What are the names of countries that have a surface area greater than 1,000,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM country WHERE SurfaceArea > 1000000;"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which tourist attractions are visited at least twice? Give me their names and ids.",
        "gold_parse": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2",
        "query": "SELECT T2.Name , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "query": "SELECT Code2 FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "art_1",
        "query": "SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800",
        "question": "What are the names of paintings whose width is less than 600 or height is larger than 800?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of course IDs for each semester description?",
        "gold_parse": "",
        "query": "SELECT semester_description, SUM(course_id) FROM Semesters JOIN Courses ON Semesters.semester_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60",
        "question": "What are the names of rooms whose reservation frequency exceeds 60 times?",
        "correctness": 1,
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1",
        "question": "What is the venue with the least number of publications?",
        "correctness": 1,
        "gold_parse": "SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000",
        "question": "Which mountains are taller than 3000 meters?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn",
        "question": "What are the names of all books and their corresponding authors?",
        "correctness": 1,
        "gold_parse": "SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2",
        "question": "Return the client ids for clients with two or more invoices?",
        "correctness": 1,
        "gold_parse": "SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "poker_player",
        "question": "Show the names of people who are 165 cm tall.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Height FROM people AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height = 165;",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT name FROM people ORDER BY date_of_birth",
        "question": "What are the names of all people, ordered by their date of birth?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM people ORDER BY date_of_birth"
    },
    {
        "db_id": "flight_1",
        "question": "Show the name of aircraft which fewest people have its certificate.",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
        "query": "SELECT T1.Campus FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = value AND T2.Year > value AND T2.Year > value",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "Find the names of scientists who are not working on the project with the highest hours.",
        "gold_parse": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)",
        "query": "SELECT T1.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T2.Hours Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "address_1",
        "query": "SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  \"CHINA\"",
        "question": "How many students live in China?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  \"CHINA\""
    },
    {
        "db_id": "wrestler",
        "question": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".",
        "gold_parse": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
        "query": "SELECT T2.Team FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = value INTERSECT SELECT T2.Team FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = value",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "query": "SELECT Name ,  Party FROM representative",
        "question": "What are the names and parties of representatives?",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  Party FROM representative"
    },
    {
        "db_id": "company_employee",
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "gold_parse": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
        "query": "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Sales_in_Billion Desc",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length < 500;",
        "question": "Which rivers are shorter than 500 kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length < 500;"
    },
    {
        "db_id": "activity_1",
        "question": "Which faculty members are playing either Canoeing or Kayaking? Tell me their first names.",
        "gold_parse": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "query": "SELECT T2.Fname FROM Faculty_Participates_in AS T1 JOIN Faculty AS T2 ON T1.FacID = T2.FacID GROUP BY T1.FacID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the first names and last names of the students who are 18 years old and have vice president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.Election_Cycle = value AND T2.President_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU",
        "question": "List each gender and the corresponding number of students.",
        "correctness": 1,
        "gold_parse": "SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU"
    },
    {
        "db_id": "wta_1",
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "gold_parse": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.winner_rank Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Population FROM city WHERE Population > 1000000",
        "question": "Which cities have a population greater than 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Population FROM city WHERE Population > 1000000"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
        "question": "What is the average fee for a CSU campus in the year of 1996?",
        "correctness": 1,
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996"
    },
    {
        "db_id": "scholar",
        "question": "What are the names of datasets associated with papers?",
        "gold_parse": "",
        "query": "SELECT datasetname FROM dataset WHERE datasetid IN (SELECT datasetid FROM paperdataset WHERE datasetname = 'unknown');",
        "correctness": 0
    },
    {
        "db_id": "planet_1",
        "query": "SELECT PackageNumber ,  Weight FROM PACKAGE ORDER BY Weight ASC LIMIT 3;",
        "question": "List package number and weight of top 3 lightest packages.",
        "correctness": 1,
        "gold_parse": "SELECT PackageNumber ,  Weight FROM PACKAGE ORDER BY Weight ASC LIMIT 3;"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )",
        "question": "What is the date of all orders that have been placed by customers with at least 2 payment methods?",
        "correctness": 1,
        "gold_parse": "SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
        "question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\""
    },
    {
        "db_id": "boat_1",
        "query": "select count(*) from sailors where name like 'd%'",
        "question": "What is the count of the sailors whose name starts with letter D ?",
        "correctness": 1,
        "gold_parse": "select count(*) from sailors where name like 'd%'"
    },
    {
        "db_id": "bike_1",
        "question": "What are the days that had the smallest temperature range, and what was that range?",
        "gold_parse": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",
        "query": "SELECT T1.start_date , T1.duration FROM trip AS T1 JOIN weather AS T2 ORDER BY T2.min_humidity Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT count(*) ,  warehouse FROM boxes GROUP BY warehouse",
        "question": "How many boxes are stored in each warehouse?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  warehouse FROM boxes GROUP BY warehouse"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What is the detail of each visitor?",
        "gold_parse": "SELECT Tourist_Details FROM VISITORS",
        "query": "SELECT Address FROM Locations",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_status_code ,  process_status_description FROM Process_status",
        "question": "List the codes and descriptions for all process status.",
        "correctness": 1,
        "gold_parse": "SELECT process_status_code ,  process_status_description FROM Process_status"
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the different artists from Bangladesh who never received a rating higher than a 7?",
        "gold_parse": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",
        "query": "SELECT DISTINCT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;",
        "question": "What are the ids of the documents that have more than one child?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id",
        "question": "Show the meeting ids and the number of staff in each meeting.",
        "correctness": 1,
        "gold_parse": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What is the oldest log id and its corresponding problem id?",
        "gold_parse": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "query": "SELECT problem_log_id , problem_id FROM Problem_Log",
        "correctness": 0
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.conference_name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id = T2.conference_id JOIN staff AS T3 ON T2.staff_id  =  T3.staff_id WHERE T3.nationality  =  \"Canada\"",
        "question": "What are the names of all the conferences that has staff from Canada attending?",
        "correctness": 1,
        "gold_parse": "SELECT T1.conference_name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id = T2.conference_id JOIN staff AS T3 ON T2.staff_id  =  T3.staff_id WHERE T3.nationality  =  \"Canada\""
    },
    {
        "db_id": "movie_1",
        "question": "What are names of the movies that are either made before 1980 or directed by James Cameron?",
        "gold_parse": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T1.year < value OR T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Return the characters and durations for each actor.",
        "gold_parse": "SELECT Character ,  Duration FROM actor",
        "query": "SELECT Name , Duration FROM actor",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "query": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"",
        "question": "Show origins of all flights with destination Honolulu.",
        "correctness": 1,
        "gold_parse": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\""
    },
    {
        "db_id": "college_2",
        "query": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title",
        "question": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?",
        "correctness": 1,
        "gold_parse": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT avg(balance) FROM checking",
        "question": "What is the average balance in checking accounts?",
        "correctness": 1,
        "gold_parse": "SELECT avg(balance) FROM checking"
    },
    {
        "db_id": "student_assessment",
        "question": "What are the id of students who registered course 301?",
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
        "query": "SELECT student_id FROM Students",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
        "question": "Find the id of the candidate who got the lowest oppose rate.",
        "correctness": 1,
        "gold_parse": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"",
        "question": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\""
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, capital FROM state WHERE country_name = 'USA';",
        "question": "What are the state names and capitals in the USA?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, capital FROM state WHERE country_name = 'USA';"
    },
    {
        "db_id": "sakila_1",
        "question": "Where is store 1 located?",
        "gold_parse": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
        "query": "SELECT district FROM address WHERE address = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find the oldest log id and its corresponding problem id.",
        "gold_parse": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "query": "SELECT problem_log_id , problem_id FROM Problem_Log",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.genre_is = value OR T1.preferred_genre = value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "For each bed type, find the average room price.",
        "gold_parse": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType",
        "query": "SELECT bedType , Avg ( maxOccupancy ) FROM Rooms GROUP BY bedType",
        "correctness": 0
    },
    {
        "db_id": "video_game",
        "query": "SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'",
        "question": "Return the average number of units sold in millions for games not developed by Nintendo.",
        "correctness": 1,
        "gold_parse": "SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT name FROM people WHERE height  >  200 OR height  <  190",
        "question": "What are the names of people who have a height greater than 200 or less than 190?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM people WHERE height  >  200 OR height  <  190"
    },
    {
        "db_id": "school_bus",
        "question": "Show the type of school and the number of buses for each type.",
        "gold_parse": "SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type",
        "query": "SELECT Type , Count ( * ) FROM school GROUP BY Type",
        "correctness": 0
    },
    {
        "db_id": "car_racing",
        "query": "SELECT sum(Points) ,  avg(Points) FROM driver",
        "question": "Show total and average points of all drivers.",
        "correctness": 1,
        "gold_parse": "SELECT sum(Points) ,  avg(Points) FROM driver"
    },
    {
        "db_id": "book_press",
        "query": "SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender",
        "question": "How many authors are of age above 30 for each gender?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender"
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee on a CSU campus in 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( CampusFee ) FROM csu_fees",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "query": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "correctness": 1,
        "gold_parse": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002"
    },
    {
        "db_id": "world_1",
        "question": "Count the number of languages spoken in each government form.",
        "gold_parse": "",
        "query": "SELECT HeadOfState, COUNT(Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY GovernmentForm;",
        "correctness": 0
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Hardware\")",
        "question": "Show all hardware product names with price higher than the average price of hardware type products.",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Hardware\")"
    },
    {
        "db_id": "local_govt_mdm",
        "query": "SELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id",
        "question": "Wat is the tax source system code and master customer id of the taxes related to each parking fine id?",
        "correctness": 1,
        "gold_parse": "SELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
        "question": "what is the total weight of all packages shipped on Mars?",
        "correctness": 1,
        "gold_parse": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";"
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the number of apartment feature 2 where the date sold is in the list of dates on market.",
        "gold_parse": "",
        "query": "SELECT COUNT(apt_feature_2) FROM Properties WHERE date_sold IN (SELECT date_on_market FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
        "question": "What is the total point count of the youngest gymnast?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1"
    },
    {
        "db_id": "world_1",
        "question": "Count the number of countries in each region, grouped by city name.",
        "gold_parse": "",
        "query": "SELECT Region, COUNT(*) FROM country JOIN city ON country.Code = city.CountryCode GROUP BY city.Name;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "gold_parse": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "query": "select avg ( LifeExpectancy ) from country where GovernmentForm != value",
        "correctness": 0
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  \"Tart\")",
        "question": "What are the distinct ids of all goods that are cheaper than some goods of type Tart?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  \"Tart\")"
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids and names of all start stations that were the beginning of at least 200 trips?",
        "gold_parse": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",
        "query": "SELECT T1.id , T1.name FROM station AS T1 JOIN trip AS T2 WHERE T2.duration > = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "For each sex, what is the name and sex of the candidate with the oppose rate for their sex?",
        "gold_parse": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex",
        "query": "SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Oppose_rate > value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id and last name of the driver who participated in the most races after 2010?",
        "correctness": 1,
        "gold_parse": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "imdb",
        "question": "What are the names of Australian actors?",
        "gold_parse": "",
        "query": "SELECT name FROM actor WHERE nationality = 'American';",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)",
        "query": "SELECT T1.start_date , T2.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f = value AND T2.min_temperature_f < value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id",
        "question": "How many different products correspond to each order id?",
        "correctness": 1,
        "gold_parse": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "gold_parse": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT course_id , course_description FROM Courses GROUP BY course_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "question": "Find the name, checking balance and saving balance of all accounts in the bank.",
        "correctness": 1,
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many students are there for each course detail?",
        "gold_parse": "",
        "query": "SELECT other_details, COUNT(student_id) FROM Courses JOIN Students ON Courses.course_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "Which states have an area greater than 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director",
        "question": "Find the title and score of the movie with the lowest rating among all movies directed by each director.",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director"
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "gold_parse": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "query": "SELECT Avg ( age ) FROM Dogs WHERE gender = value",
        "correctness": 0
    },
    {
        "db_id": "riding_club",
        "query": "SELECT Gender ,  Occupation FROM player",
        "question": "What are the gender and occupation of players?",
        "correctness": 1,
        "gold_parse": "SELECT Gender ,  Occupation FROM player"
    },
    {
        "db_id": "wta_1",
        "question": "Find the name and rank points of the winner who won the most times.",
        "gold_parse": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT tourney_name , loser_rank FROM matches GROUP BY winner_entry ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements",
        "question": "List the achievement type code, achievement details and the date of the achievements.",
        "correctness": 1,
        "gold_parse": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements"
    },
    {
        "db_id": "dorm_1",
        "question": "Find the first and last name of students who are not in the largest major.",
        "gold_parse": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)",
        "query": "SELECT Fname , LName FROM Student EXCEPT SELECT Fname , LName FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "query": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'",
        "question": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?",
        "correctness": 1,
        "gold_parse": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'"
    },
    {
        "db_id": "phone_1",
        "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"",
        "gold_parse": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"",
        "query": "SELECT T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = value AND T1.Type = value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, population FROM city WHERE population > 1000000",
        "question": "What cities have a population over 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT city_name, population FROM city WHERE population > 1000000"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of degree program IDs for each semester?",
        "gold_parse": "",
        "query": "SELECT semester_name, SUM(degree_program_id) FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id;",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the catalog publisher that has the most catalogs.",
        "correctness": 1,
        "gold_parse": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle",
        "question": "List the names of battles and the ships lost in them.",
        "correctness": 1,
        "gold_parse": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle"
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who are in grades above the maximum?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade > (SELECT MAX(grade) FROM Highschooler);",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "How many appelations are in Napa Country?",
        "gold_parse": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
        "query": "SELECT Count ( * ) FROM appellations WHERE Appelation = value",
        "correctness": 0
    },
    {
        "db_id": "boat_1",
        "query": "SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating",
        "question": "What is the rating and average age for sailors who have reserved red boat grouped by rating?",
        "correctness": 1,
        "gold_parse": "SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT count(*) FROM driver WHERE Points  <  150",
        "question": "How many drivers have points smaller than 150?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM driver WHERE Points  <  150"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC",
        "question": "List the total points of gymnasts in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT degree_summary_name, department_name FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id;",
        "question": "List the names of degree programs and their associated departments.",
        "correctness": 1,
        "gold_parse": "SELECT degree_summary_name, department_name FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id;"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the name and phone of the customer without any mailshot.",
        "gold_parse": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)",
        "query": "SELECT T1.customer_name , T1.customer_phone FROM Customers AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Customer_Orders AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Find the id and color description of the products with at least 2 characteristics.",
        "gold_parse": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2",
        "query": "SELECT product_id , product_description FROM Products GROUP BY product_id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "gymnast",
        "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
        "question": "What is the average age of all gymnasts?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "question": "What are the names of catalog entries with level number 8?",
        "correctness": 1,
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\""
    },
    {
        "db_id": "college_2",
        "question": "What are the names of students and their respective departments, ordered by number of credits from least to greatest?",
        "gold_parse": "SELECT name ,  dept_name FROM student ORDER BY tot_cred",
        "query": "SELECT name , dept_name FROM student GROUP BY dept_name ORDER BY Sum ( tot_cred ) Asc",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "query": "SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20",
        "question": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?",
        "correctness": 1,
        "gold_parse": "SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid < 5;",
        "question": "What are the names of businesses with IDs less than 5?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid < 5;"
    },
    {
        "db_id": "college_2",
        "question": "What are the names of instructors who didn't teach?",
        "gold_parse": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
        "query": "SELECT name FROM instructor EXCEPT SELECT name FROM instructor",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "query": "SELECT count(*) FROM Rating WHERE stars  >  3",
        "question": "How many movie ratings have more than 3 stars?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Rating WHERE stars  >  3"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT count(DISTINCT heat) FROM cyclist",
        "question": "How many different levels of heat are there for the cyclists?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT heat) FROM cyclist"
    },
    {
        "db_id": "csu_1",
        "question": "Which campus has the most degrees conferred in all times?",
        "gold_parse": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
        "query": "SELECT T3.Campus FROM Campuses AS T1 JOIN degrees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus GROUP BY T3.Campus ORDER BY Avg ( T2.Degrees ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "query": "SELECT * FROM employees WHERE SALARY < = value ORDER BY SALARY Desc",
        "correctness": 0
    },
    {
        "db_id": "address_1",
        "query": "SELECT city_name FROM City WHERE country  =  \"USA\" ORDER BY latitude",
        "question": "What are all the city names for cities in the USA, ordered by latitude?",
        "correctness": 1,
        "gold_parse": "SELECT city_name FROM City WHERE country  =  \"USA\" ORDER BY latitude"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"",
        "question": "Which customers have the substring \"Diana\" in their names? Return the customer details.",
        "correctness": 1,
        "gold_parse": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\""
    },
    {
        "db_id": "phone_1",
        "query": "SELECT count(*) FROM phone WHERE Company_name = \"Nokia Corporation\";",
        "question": "How many phone hardware models are produced by the company named \"Nokia Corporation\"?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM phone WHERE Company_name = \"Nokia Corporation\";"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"",
        "question": "Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\".",
        "correctness": 1,
        "gold_parse": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\""
    },
    {
        "db_id": "culture_company",
        "question": "List all company names with a book published by Alyson.",
        "gold_parse": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'",
        "query": "SELECT Company_name FROM culture_company WHERE Type = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Count the number of rooms in Lamberton with capacity lower than 50.",
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "query": "SELECT Count ( * ) FROM classroom WHERE capacity > value AND capacity < value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Give the average number of working horses on farms with more than 5000 total horses.",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "query": "SELECT Avg ( Total_Cattle ) FROM farm WHERE Total_Horses > value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
        "query": "SELECT T1.County FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = value AND T2.Year > value AND T2.Year > value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the smallest country by surface area in Africa.",
        "gold_parse": "",
        "query": "SELECT LocalName, MIN(SurfaceArea) FROM country WHERE Continent = 'Africa';",
        "correctness": 0
    },
    {
        "db_id": "conference",
        "query": "SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)",
        "question": "Show institution name which there is no staff in our record.",
        "correctness": 1,
        "gold_parse": "SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(DISTINCT advisor) FROM Student",
        "question": "How many different advisors are listed?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT advisor) FROM Student"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Ref_Service_Types AS T1 JOIN Drama_Workshop_Groups AS T2 JOIN Services AS T3 ON T1.Service_Type_Code = T3.Service_Type_Code AND T3.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Parent_Service_Type_Code = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";",
        "question": "List the document ids for any documents with the status code done and the type code paper.",
        "correctness": 1,
        "gold_parse": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
        "question": "What are the document object ids of the objects owned by Marlin?",
        "correctness": 1,
        "gold_parse": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'"
    },
    {
        "db_id": "bike_1",
        "question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.",
        "gold_parse": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "query": "SELECT id FROM trip WHERE duration > ( SELECT Avg ( duration ) FROM trip WHERE subscription_type = value )",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height < (SELECT AVG(Height) FROM people);",
        "question": "What are the names of poker players who are shorter than the average height?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height < (SELECT AVG(Height) FROM people);"
    },
    {
        "db_id": "book_2",
        "query": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1",
        "question": "List the writers who have written more than one book.",
        "correctness": 1,
        "gold_parse": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "select t1.document_subset_id ,  t2.document_subset_name , count(distinct t1.document_object_id) from document_subset_members as t1 join document_subsets as t2 on t1.document_subset_id =  t2.document_subset_id group by t1.document_subset_id order by count(*) desc limit 1;",
        "question": "For the document subset with the most number of different documents , what are the ids and names of the subset , as well as the number of documents ?",
        "correctness": 1,
        "gold_parse": "select t1.document_subset_id ,  t2.document_subset_name , count(distinct t1.document_object_id) from document_subset_members as t1 join document_subsets as t2 on t1.document_subset_id =  t2.document_subset_id group by t1.document_subset_id order by count(*) desc limit 1;"
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who are friends with Grace?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend WHERE friend_id = (SELECT grade FROM Highschooler WHERE name = 'Grace'));",
        "correctness": 0
    },
    {
        "db_id": "movie_2",
        "query": "SELECT name FROM movietheaters GROUP BY name HAVING count(*)  >=  1",
        "question": "Find the name of theaters that has at least one movie playing.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM movietheaters GROUP BY name HAVING count(*)  >=  1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"panel\" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"canvas\"",
        "question": "Which locations have paintings in the mediums of on panel and on canvas?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"panel\" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"canvas\""
    },
    {
        "db_id": "department_store",
        "question": "Find the id and name of the staff who has been assigned for the shortest period.",
        "gold_parse": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "query": "SELECT staff_id , staff_name FROM Staff GROUP BY staff_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "query": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1",
        "question": "What are the names of all directors who have made one movie except for the director named NULL?",
        "correctness": 1,
        "gold_parse": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT count(*) FROM gymnast",
        "question": "How many gymnasts are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM gymnast"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
        "question": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1",
        "question": "What is detail of the student who most recently registered course?",
        "correctness": 1,
        "gold_parse": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1"
    },
    {
        "db_id": "climbing",
        "query": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
        "question": "Show names of climbers and the names of mountains they climb.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes WHERE liked_id = 1);",
        "question": "What are the names of highschoolers who like the student with ID 1?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes WHERE liked_id = 1);"
    },
    {
        "db_id": "match_season",
        "question": "Who are the different players and how many years has each played?",
        "gold_parse": "SELECT Player ,  Years_Played FROM player",
        "query": "SELECT Player , Count ( * ) FROM player GROUP BY Player",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "How many actors are there?",
        "gold_parse": "SELECT count(*) FROM actor",
        "query": "SELECT Count ( * ) FROM musical",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the first house features for properties with the lowest vendor requested price.",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(hse_feature_1) FROM Properties WHERE vendor_requested_price < (SELECT MIN(vendor_requested_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.deathYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) LIMIT 1",
        "question": "Find the death year of the artist who made the least number of sculptures?",
        "correctness": 1,
        "gold_parse": "SELECT T1.deathYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the customer last name, id and phone number with most number of orders?",
        "correctness": 1,
        "gold_parse": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "question": "What are the names of all the tracks that are in both the Movies and music playlists?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'"
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
        "question": "Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?",
        "correctness": 1,
        "gold_parse": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")",
        "question": "Find the number of students who are older than 18 and do not have allergy to either food or animal.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")"
    },
    {
        "db_id": "party_host",
        "question": "Which nations have both hosts of age above 45 and hosts of age below 35?",
        "gold_parse": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
        "query": "SELECT Nationality FROM host WHERE Age < value INTERSECT SELECT Nationality FROM host WHERE Age > value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'",
        "question": "List all countries along with their official languages.",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)",
        "question": "How many apartments do not have any facility?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT T2.name ,  T2.model_year FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name and model year of the vehicle which has been rented the most times?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T2.model_year FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards",
        "question": "How many customer cards are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
        "question": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.",
        "correctness": 1,
        "gold_parse": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5"
    },
    {
        "db_id": "real_estate_properties",
        "question": "Show the property type descriptions of properties belonging to that code.",
        "gold_parse": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
        "query": "SELECT property_type_description FROM Ref_Property_Types",
        "correctness": 0
    },
    {
        "db_id": "movie_2",
        "query": "SELECT count(*) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
        "question": "How many movies are playing across all theaters?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie"
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?",
        "gold_parse": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
        "query": "SELECT date FROM weather WHERE min_temperature_f BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of the 3 instructors who teach the most courses?",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3",
        "query": "SELECT Fname , Lname FROM Faculty GROUP BY Rank , Lname ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "question": "Show first name and id for all customers with at least 2 accounts.",
        "correctness": 1,
        "gold_parse": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
        "question": "What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?",
        "correctness": 1,
        "gold_parse": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex",
        "question": "Find the average and minimum weight for each gender.",
        "correctness": 1,
        "gold_parse": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Return the total number of distinct customers.",
        "gold_parse": "SELECT count(*) FROM customers",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Find the name of tracks which are in Movies playlist but not in music playlist.",
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "query": "SELECT name FROM tracks EXCEPT SELECT name FROM tracks",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the average balance in checking accounts?",
        "gold_parse": "SELECT avg(balance) FROM checking",
        "query": "SELECT Avg ( balance ) FROM SAVINGS",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee on a CSU campus in 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who has a friend that is from new york city?",
        "gold_parse": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'",
        "query": "SELECT name FROM Person WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many projects are there?",
        "gold_parse": "SELECT count(*) FROM Projects",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Which airlines have a flight with destination airport AHD?",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "query": "SELECT Airline FROM airlines WHERE Abbreviation = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "select document_object_id , count(*) from document_subset_members group by document_object_id order by count(*) asc limit 1;",
        "question": "What is the document object id with the least number of documents ?",
        "correctness": 1,
        "gold_parse": "select document_object_id , count(*) from document_subset_members group by document_object_id order by count(*) asc limit 1;"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor",
        "question": "What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?",
        "correctness": 1,
        "gold_parse": "SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show all card type codes and the number of customers holding cards in each type.",
        "gold_parse": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "query": "SELECT card_type_code , Count ( * ) FROM Customers_Cards GROUP BY card_type_code",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show the id and builder of the railway that are associated with the most trains.",
        "gold_parse": "SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Railway_ID , Builder FROM railway GROUP BY Railway_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "For students who have pets, how many pets does each student have?",
        "gold_parse": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "query": "SELECT StuID , Count ( * ) FROM Student GROUP BY StuID",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "query": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;",
        "question": "What are the top 5 countries by number of invoices and how many do they have?",
        "correctness": 1,
        "gold_parse": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\"",
        "question": "What are the full names of customers with the account name 900?",
        "correctness": 1,
        "gold_parse": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\""
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT build_year ,  model ,  builder FROM vehicle",
        "question": "Give the build year, model, and builder of each vehicle.",
        "correctness": 1,
        "gold_parse": "SELECT build_year ,  model ,  builder FROM vehicle"
    },
    {
        "db_id": "art_1",
        "query": "SELECT lname ,  fname FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
        "question": "Give the full name of the artist who lived the longest.",
        "correctness": 1,
        "gold_parse": "SELECT lname ,  fname FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
        "question": "Find the code of boxes that are stored at the warehouses located at Chicago or New York.",
        "correctness": 1,
        "gold_parse": "SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'"
    },
    {
        "db_id": "formula_1",
        "question": "What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20",
        "query": "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
        "correctness": 0
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
        "question": "What types of contents cannot be found in warehouses in New York?",
        "correctness": 1,
        "gold_parse": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'"
    },
    {
        "db_id": "imdb",
        "question": "What is the name and nationality of every actor born in New York City?",
        "gold_parse": "",
        "query": "SELECT name, nationality FROM actor WHERE birth_city = 'New York';",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2",
        "question": "What is the id, forename, and number of races for all drivers that have participated in at least 2 races?",
        "correctness": 1,
        "gold_parse": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Collection_Name FROM Collections;",
        "question": "List the name of all collections.",
        "correctness": 1,
        "gold_parse": "SELECT Collection_Name FROM Collections;"
    },
    {
        "db_id": "news_report",
        "query": "SELECT Date ,  Name ,  venue FROM event ORDER BY Event_Attendance DESC",
        "question": "Show the dates, places, and names of events in descending order of the attendance.",
        "correctness": 1,
        "gold_parse": "SELECT Date ,  Name ,  venue FROM event ORDER BY Event_Attendance DESC"
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1",
        "question": "What is the transmitter of the radio with the largest ERP_kW?",
        "correctness": 1,
        "gold_parse": "SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1"
    },
    {
        "db_id": "hospital_1",
        "question": "Find the number of patients' prescriptions physician John Dorian made.",
        "gold_parse": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"",
        "query": "SELECT Count ( * ) FROM Physician WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;",
        "question": "List the number of invoices from the US, grouped by state.",
        "correctness": 1,
        "gold_parse": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "question": "What are the ids and full names of customers who hold two or more cards?",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID",
        "question": "What are the names of representatives and the dates of elections they participated in.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the dates for the documents with both 'GV' type and 'SF' type expenses?",
        "gold_parse": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'",
        "query": "SELECT T1.Document_Date FROM Documents AS T1 WHERE T1.Document_Type_Code = value INTERSECT SELECT T1.Document_Date FROM Ref_Document_Types AS T2 JOIN Documents AS T1 ON T2.Document_Type_Code = T1.Document_Type_Code WHERE T2.Document_Type_Name = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor WHERE name LIKE '%dar%'",
        "question": "What are the names of all instructors with names that include \"dar\"?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor WHERE name LIKE '%dar%'"
    },
    {
        "db_id": "farm",
        "query": "SELECT max(Cows) ,  min(Cows) FROM farm",
        "question": "What are the maximum and minimum number of cows across all farms.",
        "correctness": 1,
        "gold_parse": "SELECT max(Cows) ,  min(Cows) FROM farm"
    },
    {
        "db_id": "train_station",
        "question": "Show the station name with at least two trains.",
        "gold_parse": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2",
        "query": "SELECT Name FROM station GROUP BY Station_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students have a food allergy?",
        "gold_parse": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
        "query": "SELECT Count ( * ) FROM Allergy_Type WHERE AllergyType = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.",
        "gold_parse": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\"",
        "query": "SELECT T2.document_id , T2.document_type_code FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code WHERE T1.shipping_agent_name = value INTERSECT SELECT T2.document_id , T2.document_type_code FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code WHERE T1.shipping_agent_name = value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;",
        "question": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.",
        "correctness": 1,
        "gold_parse": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_number ,  room_count FROM Apartments",
        "question": "Return the apartment number and the number of rooms for each apartment.",
        "correctness": 1,
        "gold_parse": "SELECT apt_number ,  room_count FROM Apartments"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION",
        "question": "Find the total, average, and maximum capacity for different locations.",
        "correctness": 1,
        "gold_parse": "SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION"
    },
    {
        "db_id": "roller_coaster",
        "question": "How many countries do not have an roller coaster longer than 3000?",
        "gold_parse": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )",
        "query": "SELECT Count ( * ) FROM country AS T1 WHERE T1.Country_ID NOT IN ( SELECT T2.Country_ID FROM roller_coaster AS T2 WHERE T2.Height > value )",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37",
        "question": "What are the names of the technicians aged either 36 or 37?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)",
        "question": "find the name of people whose height is lower than the average.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)"
    },
    {
        "db_id": "election",
        "query": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\"",
        "question": "Which parties have delegates in both the \"Appropriations\" committee and the \"Economic Matters\" committee?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\""
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"",
        "question": "What are the names of gymnasts whose hometown is not \"Santo Domingo\"?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\""
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT student_id ,  sum(amount_of_loan) FROM Student_Loans GROUP BY student_id",
        "question": "For each student, find the student id and the total amount of loan he or she has.",
        "correctness": 1,
        "gold_parse": "SELECT student_id ,  sum(amount_of_loan) FROM Student_Loans GROUP BY student_id"
    },
    {
        "db_id": "city_record",
        "question": "What is the city with the smallest GDP? Return the city and its GDP.",
        "gold_parse": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1",
        "query": "SELECT City , City FROM city ORDER BY GDP Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "What are the names of authors with the minimum organization ID?",
        "gold_parse": "",
        "query": "SELECT name FROM author WHERE aid = (SELECT MIN(oid) FROM author);",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show all train names and times in stations in London in descending order by train time.",
        "gold_parse": "SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  'London' ORDER BY T3.time DESC",
        "query": "SELECT Name , Time FROM train ORDER BY Time Desc",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "query": "SELECT S.name, COUNT(D.id) AS death_count FROM ship S LEFT JOIN death D ON S.id = D.caused_by_ship_id GROUP BY S.name",
        "question": "How many deaths were caused by each ship?",
        "correctness": 1,
        "gold_parse": "SELECT S.name, COUNT(D.id) AS death_count FROM ship S LEFT JOIN death D ON S.id = D.caused_by_ship_id GROUP BY S.name"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT count(*) FROM building",
        "question": "How many buildings are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM building"
    },
    {
        "db_id": "musical",
        "query": "SELECT Name FROM actor WHERE Age != 20",
        "question": "What are the names of actors who are not 20 years old?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM actor WHERE Age != 20"
    },
    {
        "db_id": "scholar",
        "question": "What are the names of all venues?",
        "gold_parse": "",
        "query": "SELECT venuename FROM venue WHERE venueid = 'Conference A';",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average section ID for each degree summary description?",
        "gold_parse": "",
        "query": "SELECT degree_summary_description, AVG(section_id) FROM Degree_Programs JOIN Sections ON Degree_Programs.degree_program_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "query": "SELECT count(*) FROM actor",
        "question": "How many actors are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM actor"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_id ,  count(*) FROM Documents_processes GROUP BY process_id",
        "question": "Show all process ids and the number of documents in each process.",
        "correctness": 1,
        "gold_parse": "SELECT process_id ,  count(*) FROM Documents_processes GROUP BY process_id"
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)",
        "question": "Find the name of spokesmen who do not speak for any district.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT director FROM Movie WHERE title  = 'Avatar'",
        "question": "Who is the director of movie Avatar?",
        "correctness": 1,
        "gold_parse": "SELECT director FROM Movie WHERE title  = 'Avatar'"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;",
        "question": "What are the names of all playlists that have more than 100 tracks?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;"
    },
    {
        "db_id": "flight_1",
        "question": "What are the aircrafts with top 3 shortest lengthes? List their names.",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "query": "SELECT name FROM aircraft ORDER BY distance Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "query": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name",
        "question": "How many players are from each country?",
        "correctness": 1,
        "gold_parse": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
        "question": "What are the ids of the candidates that have an outcome code of Pass?",
        "correctness": 1,
        "gold_parse": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\""
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "question": "What are the names of courses without prerequisites?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
    },
    {
        "db_id": "cinema",
        "query": "SELECT title ,  directed_by FROM film",
        "question": "Show the title and director for all films.",
        "correctness": 1,
        "gold_parse": "SELECT title ,  directed_by FROM film"
    },
    {
        "db_id": "movie_1",
        "question": "What is the reviewer name, film title, movie rating, and rating date  for every movie ordered by reviewer name, movie title, then finally rating?",
        "gold_parse": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars",
        "query": "SELECT T2.name , T1.title , T3.ratingDate FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID AND T1.mID = T3.mID ORDER BY T3.stars Asc",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What is the team name and acc regular season score of the school that was founded for the longest time?",
        "gold_parse": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
        "query": "SELECT T1.Team_Name , T2.Founded FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID ORDER BY T2.Founded Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "party_people",
        "query": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"",
        "question": "Count the number of Annual Meeting events that took place in the region of the United Kingdom.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT lname ,  fname FROM artists WHERE birthYear  >  1850",
        "question": "Find the first and last names of all artists who were born after 1850.",
        "correctness": 1,
        "gold_parse": "SELECT lname ,  fname FROM artists WHERE birthYear  >  1850"
    },
    {
        "db_id": "conference",
        "query": "SELECT DISTINCT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.year  =  2003 OR T3.year  =  2004",
        "question": "What are the staff names who participated in conferences between 2003 or 2004?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.year  =  2003 OR T3.year  =  2004"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id > 10;",
        "question": "What are the full names of car makers with IDs greater than 10?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id > 10;"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "question": "How many customers have an account?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Accounts"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id",
        "question": "Give the order ids for all orders, as well as the total product quantity in each.",
        "correctness": 1,
        "gold_parse": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id"
    },
    {
        "db_id": "book_press",
        "query": "SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)",
        "question": "Find the name of the publisher whose monthly profit is the highest or the lowest.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)"
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2",
        "question": "What are the names of customers who have two or more records of rental history?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2"
    },
    {
        "db_id": "products_for_hire",
        "question": "What is the average amount due for all the payments?",
        "gold_parse": "SELECT avg(amount_due) FROM payments",
        "query": "SELECT Avg ( amount_paid ) FROM Payments",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "gold_parse": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "query": "SELECT T2.EMPLOYEE_ID FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MIN_SALARY > ( SELECT Avg ( T2.SALARY ) FROM employees AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "country_language",
        "query": "SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != \"Norway\"",
        "question": "Return the maximum and minimum health scores across all countries other than Norway.",
        "correctness": 1,
        "gold_parse": "SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != \"Norway\""
    },
    {
        "db_id": "aan_1",
        "query": "select t4.name from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id join author as t4 on t2.author_id  =  t4.author_id where t3.name = \"mckeown ,  kathleen\" group by t2.author_id order by count(*) desc limit 1",
        "question": "Who has the most papers co-authored with Mckeown , Kathleen ?",
        "correctness": 1,
        "gold_parse": "select t4.name from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id join author as t4 on t2.author_id  =  t4.author_id where t3.name = \"mckeown ,  kathleen\" group by t2.author_id order by count(*) desc limit 1"
    },
    {
        "db_id": "world_1",
        "question": "Give the names of the nations that were founded after 1950.",
        "gold_parse": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "query": "SELECT Continent FROM country WHERE IndepYear > value",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "How many exhibition are there in year 2005 or after?",
        "gold_parse": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005",
        "query": "SELECT Count ( * ) FROM exhibition WHERE Year = value OR Year > value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'",
        "question": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'"
    },
    {
        "db_id": "csu_1",
        "question": "Which campus was opened between 1935 and 1939?",
        "gold_parse": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939",
        "query": "SELECT T3.Campus FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year > = value AND T2.Year < = value",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MIN(Conductor_ID) FROM conductor);",
        "question": "What are the names of conductors with the lowest conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MIN(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements",
        "question": "Find the maximum and minimum settlement amount.",
        "correctness": 1,
        "gold_parse": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many different departments offer degrees?",
        "gold_parse": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "query": "SELECT Count ( DISTINCT department_name ) FROM Departments",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "question": "Show id, first and last names for all customers with at least two cards.",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582?",
        "gold_parse": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'",
        "query": "SELECT first_name FROM Students WHERE cell_mobile_number LIKE value UNION SELECT first_name FROM Students WHERE cell_mobile_number = value",
        "correctness": 0
    },
    {
        "db_id": "online_exams",
        "query": "SELECT * FROM Students",
        "question": "What is al the available information of each student?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM Students"
    },
    {
        "db_id": "browser_web",
        "query": "SELECT id ,  market_share FROM browser WHERE name  =  'Safari'",
        "question": "What is the id and market share of the browser Safari?",
        "correctness": 1,
        "gold_parse": "SELECT id ,  market_share FROM browser WHERE name  =  'Safari'"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the minimum, average, and maximum quantities ordered? Check all the invoices.",
        "gold_parse": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES",
        "query": "SELECT Min ( Order_Quantity ) , Max ( Order_Quantity ) , Avg ( Order_Quantity ) FROM Invoice_Items",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T1.Collection_Name ,  T1.Collection_ID ,  count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" GROUP BY T1.Collection_ID ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which collection have most number of documents? List collection name, id and number of documents.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Collection_Name ,  T1.Collection_ID ,  count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" GROUP BY T1.Collection_ID ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the customer first, last name and id with least number of accounts.",
        "correctness": 1,
        "gold_parse": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "singer",
        "question": "What is the name of the singer who sang 'Song A'?",
        "gold_parse": "",
        "query": "SELECT Name FROM singer WHERE Singer_ID = (SELECT Song_ID FROM song WHERE Title = 'Song A');",
        "correctness": 0
    },
    {
        "db_id": "ship_1",
        "question": "Sort all captain names by their ages from old to young.",
        "gold_parse": "SELECT name FROM captain ORDER BY age DESC",
        "query": "SELECT Name FROM captain ORDER BY age Asc",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Population FROM city WHERE Population > 1000000",
        "question": "Which cities have a population greater than 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Population FROM city WHERE Population > 1000000"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "question": "Return the top 3 greatest support rates.",
        "correctness": 1,
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and ids of every course with less than 2 sections?",
        "gold_parse": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "query": "SELECT course_name , course_id FROM Courses GROUP BY course_id HAVING Count ( * ) < value",
        "correctness": 0
    },
    {
        "db_id": "university_rank",
        "query": "SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'",
        "question": "What is the name and overall ranking of universities in Wisconsin state?",
        "correctness": 1,
        "gold_parse": "SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT count(*) FROM Student WHERE Advisor =  1121;",
        "question": "Advisor 1121 has how many students?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Student WHERE Advisor =  1121;"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)",
        "question": "What is the receipt number with the latest date, and what is that date?",
        "correctness": 1,
        "gold_parse": "SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)"
    },
    {
        "db_id": "hospital_1",
        "question": "Return the name of each physician and the number of patients he or she treats.",
        "gold_parse": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid",
        "query": "SELECT Name , Count ( * ) FROM Physician GROUP BY Name",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the total percentage share of all channels owned by CCTV.",
        "gold_parse": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'",
        "query": "SELECT Sum ( Share_in_percent ) FROM channel",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the email and phone number of Astrid Gruber the customer?",
        "gold_parse": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\"",
        "query": "SELECT email , phone FROM customers WHERE first_name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT DISTINCT payment_method_code FROM Customers",
        "question": "Give the different payment method codes that customers use.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT payment_method_code FROM Customers"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'",
        "question": "Count the number of courses in the Physics department.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'"
    },
    {
        "db_id": "musical",
        "question": "How many actors have appeared in each musical?",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
        "query": "SELECT Count ( * ) , Name FROM actor GROUP BY Character",
        "correctness": 0
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID",
        "question": "What are the names of cities, as well as the names of the counties they correspond to?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID"
    },
    {
        "db_id": "student_1",
        "question": "How many students are taught by teacher TARRING LEIA?",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\"",
        "query": "SELECT Count ( * ) FROM teachers WHERE FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "art_1",
        "query": "SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950",
        "question": "What are the names of both paintings and sculptures created between 1900 and 1950?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT count(DISTINCT LOCATION) FROM warehouses",
        "question": "Find all distinct locations of warehouses.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT LOCATION) FROM warehouses"
    },
    {
        "db_id": "imdb",
        "question": "Which movies were released in 1999?",
        "gold_parse": "",
        "query": "SELECT title FROM movie WHERE release_year = 1980;",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "query": "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Sheep_and_Goats > value",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?",
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "query": "SELECT DISTINCT T1.Event FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Team ! = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "query": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type",
        "question": "Find the number of phones for each accreditation type.",
        "correctness": 1,
        "gold_parse": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type"
    },
    {
        "db_id": "loan_1",
        "question": "For each state, find the total account balance of customers whose credit score is above 100.",
        "gold_parse": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state",
        "query": "SELECT state , Sum ( no_of_loans ) FROM customer WHERE credit_score > value GROUP BY state",
        "correctness": 0
    },
    {
        "db_id": "aan_1",
        "query": "select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
        "question": "Count the number of collaborators that Mckeown , Kathleen has had .",
        "correctness": 1,
        "gold_parse": "select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\""
    },
    {
        "db_id": "customer_complaints",
        "question": "What are the emails and phone numbers of custoemrs who have never filed a complaint?",
        "gold_parse": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",
        "query": "SELECT email_address , phone_number FROM Staff EXCEPT SELECT email_address , phone_number FROM Staff",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'",
        "question": "Find the names of all instructors in the Art department who have taught some course and the course_id.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM author WHERE oid = 1;",
        "question": "What are the names of authors belonging to organization with ID 1?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM author WHERE oid = 1;"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"",
        "question": "What is the first and last name of all the German drivers?",
        "correctness": 1,
        "gold_parse": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\""
    },
    {
        "db_id": "store_1",
        "query": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";",
        "question": "What is the number of invoices and total money billed in them from CA?",
        "correctness": 1,
        "gold_parse": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC",
        "question": "What are the names and buildings of the deparments, sorted by budget descending?",
        "correctness": 1,
        "gold_parse": "SELECT dept_name ,  building FROM department ORDER BY budget DESC"
    },
    {
        "db_id": "apartment_rentals",
        "question": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.",
        "gold_parse": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2",
        "query": "SELECT building_description FROM Apartment_Buildings GROUP BY building_description HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "government_shift",
        "query": "SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customer_interactions AS t2 ON t1.service_id  =  t2.service_id JOIN channels AS t3 ON t2.channel_id  =  t3.channel_id WHERE t3.channel_details  =  \"15 ij\"",
        "question": "Give me the details of all the services that have interacted with the channel with detail \"15 ij\".",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customer_interactions AS t2 ON t1.service_id  =  t2.service_id JOIN channels AS t3 ON t2.channel_id  =  t3.channel_id WHERE t3.channel_details  =  \"15 ij\""
    },
    {
        "db_id": "behavior_monitoring",
        "question": "List all information about the assessment notes sorted by date in ascending order.",
        "gold_parse": "SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC",
        "query": "SELECT * FROM Behavior_Incident ORDER BY date_incident_start Asc",
        "correctness": 0
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC",
        "question": "Show the ages of gymnasts in descending order of total points.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15",
        "question": "What are the customer ids of customers who have at least 15 receipts?",
        "correctness": 1,
        "gold_parse": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15"
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT tv_show_name ,  Original_Airdate FROM tv_show",
        "question": "What are the names and original air dates of tv shows?",
        "correctness": 1,
        "gold_parse": "SELECT tv_show_name ,  Original_Airdate FROM tv_show"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Dallas');",
        "question": "What are the names of airports in Dallas?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Dallas');"
    },
    {
        "db_id": "flight_4",
        "question": "What is the name of the airport that is the destination of the most number of routes that start in China?",
        "gold_parse": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.dst_ap FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = value GROUP BY T1.dst_ap ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "What is the name of the party form that is most common?",
        "gold_parse": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.party_email FROM Parties AS T1 JOIN Party_Forms AS T2 ON T1.party_id = T2.party_id GROUP BY T2.party_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "List the names of roller coasters by ascending order of length.",
        "gold_parse": "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC",
        "query": "SELECT Name FROM roller_coaster ORDER BY Height Asc",
        "correctness": 0
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.teacher_details ,  T1.teacher_id FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the detail and id of the teacher who teaches the largest number of courses?",
        "correctness": 1,
        "gold_parse": "SELECT T1.teacher_details ,  T1.teacher_id FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"",
        "question": "Find all the customer information in state NY.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\""
    },
    {
        "db_id": "inn_1",
        "question": "What is the decor of room Recluse and defiance?",
        "gold_parse": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\"",
        "query": "SELECT decor FROM Rooms WHERE decor = value INTERSECT SELECT decor FROM Rooms WHERE bedType = value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Which students are advised by Michael Goodrich? Give me their first and last names.",
        "gold_parse": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"",
        "query": "SELECT Fname , LName FROM Student WHERE Advisor = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM employees WHERE SALARY > value OR SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939",
        "question": "What campuses opened between 1935 and 1939?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939"
    },
    {
        "db_id": "world_1",
        "question": "What are the population and life expectancies in Brazil?",
        "gold_parse": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "query": "SELECT Population , GNPOld FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "query": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director",
        "question": "How many movie reviews does each director get?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What is the detail of the location UK Gallery?",
        "gold_parse": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"",
        "query": "SELECT Address FROM Locations WHERE Location_Name = value",
        "correctness": 0
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90",
        "question": "Show the crime rate of counties with a city having white percentage more than 90.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90"
    },
    {
        "db_id": "manufactory_1",
        "question": "What is the total revenue of each manufacturer?",
        "gold_parse": "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name",
        "query": "SELECT Sum ( T1.Revenue ) , T2.Manufacturer FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer GROUP BY T2.Manufacturer",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM movie WHERE release_year > 2015;",
        "question": "Which movies were released after 2015?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movie WHERE release_year > 2015;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100",
        "question": "Which singers have a net worth greater than 100 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100"
    },
    {
        "db_id": "music_2",
        "question": "How many different instruments does the musician with the last name \"Heilo\" use?",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"",
        "query": "SELECT Count ( * ) FROM Band WHERE Lastname = value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "query": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"",
        "question": "Who are the players from Indonesia?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\""
    },
    {
        "db_id": "college_2",
        "question": "Find the name of students who have taken the prerequisite course of the course with title International Finance.",
        "gold_parse": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')",
        "query": "SELECT T3.name FROM department AS T1 JOIN course AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name WHERE T2.dept_name = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "gold_parse": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "query": "SELECT DISTINCT T1.breed_name , T3.treatment_type_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
        "question": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid GROUP BY T2.sid HAVING COUNT(*)  >  1",
        "question": "Find the id and name of the sailors who reserved more than one boat.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid GROUP BY T2.sid HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);",
        "question": "What are the names of conductors with the highest conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year",
        "question": "Show gas station id, location, and manager_name for all gas stations ordered by open year.",
        "correctness": 1,
        "gold_parse": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";",
        "question": "What are the tracks that Dean Peeters bought?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'",
        "question": "What are the names of pilots who have either the Piper Cub or the F-14 Fighter?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'"
    },
    {
        "db_id": "flight_1",
        "question": "Show all flight number from Los Angeles.",
        "gold_parse": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "query": "SELECT Count ( * ) FROM flight WHERE destination = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE MAX_SALARY > value AND MIN_SALARY < = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
        "query": "SELECT T1.Campus FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = value AND T1.Year < value AND T2.Year > value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE JOB_TITLE LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
        "question": "What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)",
        "question": "What is the name of the most recent movie?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Ivy');",
        "question": "What are the names of singers who are the same age as Ivy?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Ivy');"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE room_count > 5 OR room_count < 3;",
        "question": "List the names of properties that have more than 5 rooms or less than 3 rooms.",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE room_count > 5 OR room_count < 3;"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the planned delivery date and actual delivery date for each booking?",
        "gold_parse": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",
        "query": "SELECT Planned_Delivery_Date , Order_Date FROM Bookings",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "query": "SELECT Date , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "correctness": 0
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.conference_name FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id ORDER BY count(*) DESC LIMIT 2",
        "question": "Find the name of the conferences that have the top 2 most number of attendants.",
        "correctness": 1,
        "gold_parse": "SELECT T1.conference_name FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id ORDER BY count(*) DESC LIMIT 2"
    },
    {
        "db_id": "program_share",
        "question": "Who are the owners of the programs that broadcast both in the morning and at night?",
        "gold_parse": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
        "query": "SELECT T1.Owner FROM program AS T1 JOIN broadcast AS T2 ON T1.Program_ID = T2.Program_ID WHERE T2.Time_of_day = value INTERSECT SELECT T3.Owner FROM channel AS T3 JOIN broadcast AS T2 ON T3.Channel_ID = T2.Channel_ID WHERE T2.Time_of_day = value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the famous titles of the artist called \"Triumfall\".",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"",
        "query": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Famous_Release_date = value",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Count the number of authors for each dataset.",
        "gold_parse": "",
        "query": "SELECT datasetname, COUNT(authorid) FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid JOIN paper ON paperdataset.paperid = paper.paperid JOIN writes ON paper.paperid = writes.paperid GROUP BY datasetname;",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT count(DISTINCT last_name) FROM actor",
        "question": "How many different last names do the actors and actresses have?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT last_name) FROM actor"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT customer_id ,  customer_name FROM Customers",
        "question": "Show all customer ids and customer names.",
        "correctness": 1,
        "gold_parse": "SELECT customer_id ,  customer_name FROM Customers"
    },
    {
        "db_id": "dog_kennels",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "gold_parse": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "query": "select first_name , street , state from Professionals where city like value",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT DISTINCT Location FROM stadium;",
        "question": "What are the different locations of stadiums?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Location FROM stadium;"
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct last names of the students who have president votes and have 8741 as the advisor?",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"",
        "query": "SELECT DISTINCT T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value AND T2.Secretary_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the average latitude and longitude of stations located in San Jose city?",
        "gold_parse": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
        "query": "SELECT Avg ( long ) , Avg ( long ) FROM station WHERE city = value",
        "correctness": 0
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2",
        "question": "What are the first names of all artists who have at least two paintings, and how many works did each create?",
        "correctness": 1,
        "gold_parse": "SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2"
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "query": "SELECT T1.City FROM city AS T1 EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender HAVING count(*)  >  1;",
        "question": "What is the name of all clients who sent more than one package?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender HAVING count(*)  >  1;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE property_type_code IN (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description LIKE '%House%');",
        "question": "What are the names of properties that have 'House' in their type description?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE property_type_code IN (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description LIKE '%House%');"
    },
    {
        "db_id": "singer",
        "question": "Find the average sales of songs by singers born before 1990 for each singer.",
        "gold_parse": "",
        "query": "SELECT Name, AVG(Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Birth_Year < 1990;",
        "correctness": 0
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name",
        "question": "What are the names and coordinates of all planets in alphabetical order by name?",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID",
        "question": "What is the unique description of every parent document?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID"
    },
    {
        "db_id": "book_1",
        "query": "SELECT DISTINCT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
        "question": "Show the names of clients who have ordered at least once.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T2.Address_ID = T1.Address_ID JOIN Stores AS T3 ON T1.Address_ID = T3.Address_ID WHERE T3.Store_Name = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Return all the apartment numbers sorted by the room count in ascending order.",
        "gold_parse": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
        "query": "SELECT bathroom_count FROM Apartments ORDER BY bathroom_count Asc",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What is the last name of the staff who has handled the first ever complaint?",
        "gold_parse": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1",
        "query": "SELECT T1.last_name FROM Staff AS T1 JOIN Complaints AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the cost and treatment type description of each treatment?",
        "gold_parse": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "query": "SELECT treatment_type_description , treatment_type_code FROM Treatment_Types",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "Find number of pets owned by students who are older than 20.",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "query": "SELECT Count ( * ) FROM Pets WHERE pet_age > value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "question": "What are all info of students who registered courses but not attended courses?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1",
        "question": "Who is the author of paper 1?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1"
    },
    {
        "db_id": "csu_1",
        "question": "Find the average fee on a CSU campus in 1996",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Year = value AND T3.Year = value",
        "correctness": 0
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'",
        "question": "What are the model names and build year of the cars with 'DJ' in its model name?",
        "correctness": 1,
        "gold_parse": "SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Name all rivers longer than 500 kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the names of the dogs for which the owner spent more than 1000 for treatment?",
        "gold_parse": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )",
        "query": "select T1.name from Dogs as T1 join Treatments as T2 on T1.dog_id = T2.dog_id where T2.cost_of_treatment > value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?",
        "gold_parse": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "query": "SELECT CName FROM Course WHERE Days = value UNION SELECT CName FROM Course WHERE Days = value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.",
        "gold_parse": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2",
        "query": "SELECT T1.roomName , T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.basePrice > value AND T2.Adults > value",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "query": "SELECT D.note, S.name FROM death D JOIN ship S ON D.caused_by_ship_id = S.id",
        "question": "What notes are there on deaths caused by each ship?",
        "correctness": 1,
        "gold_parse": "SELECT D.note, S.name FROM death D JOIN ship S ON D.caused_by_ship_id = S.id"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Party_Theme ,  LOCATION FROM party",
        "question": "Give me the theme and location of each party.",
        "correctness": 1,
        "gold_parse": "SELECT Party_Theme ,  LOCATION FROM party"
    },
    {
        "db_id": "world_1",
        "question": "How many people live in countries that do not speak English?",
        "gold_parse": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "query": "SELECT T1.Population FROM country AS T1 WHERE T1.Continent NOT IN ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value )",
        "correctness": 0
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  age ,  membership_credit FROM customers",
        "question": "Show the name, age, membership credit for all customers?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age ,  membership_credit FROM customers"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Driver FROM driver ORDER BY Points DESC",
        "question": "What is the list of drivers ordered by points in descending order?",
        "correctness": 1,
        "gold_parse": "SELECT Driver FROM driver ORDER BY Points DESC"
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_dollars ) , Min ( price_in_euros ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many colors are never used by any product?",
        "gold_parse": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
        "query": "SELECT Count ( * ) FROM Products AS T1 WHERE T1.product_id NOT IN ( SELECT T2.product_id FROM Product_Characteristics AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Support_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the student ids of students who don't have any allergies?",
        "gold_parse": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Student",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the name of track with most number of races.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "question": "Find the ids and names of stations from which at least 200 trips started.",
        "gold_parse": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",
        "query": "SELECT id , name FROM station GROUP BY id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 2000;",
        "question": "Which rivers are longer than 2,000 kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 2000;"
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Advisor = value AND T2.Treasurer_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
        "question": "What are the ids and details of the clients who have attended any meeting or have any invoice?",
        "correctness": 1,
        "gold_parse": "SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Frank'));",
        "question": "What are the names of highschoolers who are liked by Frank?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Frank'));"
    },
    {
        "db_id": "wrestler",
        "question": "What is the time of elimination for the wrestler with the most days held?",
        "gold_parse": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1",
        "query": "SELECT Days_held FROM wrestler GROUP BY Days_held ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id = (SELECT MAX(Id) FROM car_makers);",
        "question": "What are the full names of car makers with the highest car maker ID?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id = (SELECT MAX(Id) FROM car_makers);"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T1.Name, T2.Theme FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID;",
        "question": "Show the names of stadiums and the themes of the concerts held there.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name, T2.Theme FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID;"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT DISTINCT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id WHERE T2.purchase_year  >  2015",
        "question": "What are the distinct ids and product names of the bikes that are purchased after year 2015?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id WHERE T2.purchase_year  >  2015"
    },
    {
        "db_id": "activity_1",
        "question": "Show the names of all the activities Mark Giuliano participates in.",
        "gold_parse": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_Participates_in AS T2 ON T1.actid = T2.actid JOIN Faculty AS T3 ON T2.FacID = T3.FacID WHERE T3.Lname = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)",
        "question": "Find the salaries of all distinct instructors that are less than the largest salary.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
        "question": "What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\""
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"",
        "question": "What is the first name and last name of the customer that has email \"luisg@embraer.com.br\"?",
        "correctness": 1,
        "gold_parse": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\""
    },
    {
        "db_id": "party_host",
        "query": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1",
        "question": "Show the name and the nationality of the oldest host.",
        "correctness": 1,
        "gold_parse": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1"
    },
    {
        "db_id": "musical",
        "query": "SELECT Character FROM actor ORDER BY age DESC",
        "question": "What are the characters of actors in descending order of age?",
        "correctness": 1,
        "gold_parse": "SELECT Character FROM actor ORDER BY age DESC"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";",
        "question": "List the type of bed and name of all traditional rooms.",
        "correctness": 1,
        "gold_parse": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";"
    },
    {
        "db_id": "candidate_poll",
        "question": "What is the name and sex of the candidate with the highest support rate?",
        "gold_parse": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "query": "SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Unsure_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents?",
        "gold_parse": "SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000",
        "query": "SELECT District_name , Headquartered_City FROM district WHERE City_Population BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "What is the location of the perpetrator with the largest kills.",
        "gold_parse": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1",
        "query": "SELECT Location FROM perpetrator ORDER BY Injured Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "region_building",
        "query": "SELECT avg(Population) FROM region",
        "question": "What is the average population for all regions?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Population) FROM region"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT D.note, S.name FROM death D JOIN ship S ON D.caused_by_ship_id = S.id",
        "question": "What notes are there on deaths caused by each ship?",
        "correctness": 1,
        "gold_parse": "SELECT D.note, S.name FROM death D JOIN ship S ON D.caused_by_ship_id = S.id"
    },
    {
        "db_id": "movie_1",
        "question": "What are the titles and directors of all movies that have a rating higher than the average James Cameron film rating?",
        "gold_parse": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")",
        "query": "SELECT T1.title , T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars > ( SELECT Avg ( T2.stars ) FROM Rating AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
        "query": "SELECT T1.Campus FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = value AND T1.Year > value AND T2.Year > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
        "question": "List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.",
        "correctness": 1,
        "gold_parse": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT rating FROM movies WHERE title LIKE '%Citizen%'",
        "question": "What is the rating of the movie what has a name including a word like 'Citizen'?",
        "correctness": 1,
        "gold_parse": "SELECT rating FROM movies WHERE title LIKE '%Citizen%'"
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1",
        "question": "What are the id and height of the painting with the longest width in gallery 240?",
        "correctness": 1,
        "gold_parse": "SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1"
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1",
        "question": "Find the average card credit customers whose membership level is above 1.",
        "correctness": 1,
        "gold_parse": "SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1"
    },
    {
        "db_id": "orchestra",
        "question": "What is the average name of conductors?",
        "gold_parse": "",
        "query": "SELECT AVG(Name) FROM conductor;",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show the card type codes and the number of transactions.",
        "gold_parse": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
        "query": "SELECT transaction_type , Count ( * ) FROM Financial_Transactions GROUP BY transaction_type",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find all students taught by MARROTTE KIRK. Output first and last names of students.",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\"",
        "query": "SELECT FirstName , LastName FROM list WHERE FirstName = value AND LastName = value",
        "correctness": 0
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC",
        "question": "Who are the constructors of drivers sorted by drivers' age in ascending order?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC"
    },
    {
        "db_id": "world_1",
        "question": "What is name of the country that speaks the largest number of languages?",
        "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "select Name from country group by Name order by count ( * ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which engineers have never visited to maintain the assets? List the engineer first name and last name.",
        "gold_parse": "SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)",
        "query": "SELECT first_name , last_name FROM Maintenance_Engineers EXCEPT SELECT first_name , last_name FROM Maintenance_Engineers",
        "correctness": 0
    },
    {
        "db_id": "art_1",
        "query": "SELECT title ,  LOCATION ,  YEAR FROM paintings ORDER BY YEAR LIMIT 1",
        "question": "What is the name of the oldest painting and where is it located?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  LOCATION ,  YEAR FROM paintings ORDER BY YEAR LIMIT 1"
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1",
        "question": "What are the movie titles and average rating of the movies with the lowest average rating?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1"
    },
    {
        "db_id": "pets_1",
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "query": "SELECT Count ( * ) FROM Pets WHERE PetType = value AND PetType = value",
        "correctness": 0
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies WHERE rating  =  'G'",
        "question": "Find the names of movies whose rating is \u2018G\u2019.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies WHERE rating  =  'G'"
    },
    {
        "db_id": "hr_1",
        "question": "what are the employee ids and job titles for employees in department 80?",
        "gold_parse": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80",
        "query": "SELECT T2.EMPLOYEE_ID , T1.JOB_TITLE FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID",
        "correctness": 0
    },
    {
        "db_id": "museum_visit",
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "gold_parse": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
        "query": "SELECT T3.visitor_ID , T2.Name , T1.Num_of_Staff FROM museum AS T1 JOIN visitor AS T2 JOIN visit AS T3 ON T1.Museum_ID = T3.Museum_ID AND T3.visitor_ID = T2.ID AND T1.Museum_ID = T3.Museum_ID GROUP BY T3.Museum_ID ORDER BY Sum ( T3.Total_spent ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the names of all Rock tracks that are stored on MPEG audio files?",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\"",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1",
        "question": "List the country that have more than one player.",
        "correctness": 1,
        "gold_parse": "SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "soccer_1",
        "query": "SELECT avg(weight) FROM Player",
        "question": "What is the average weight of all players?",
        "correctness": 1,
        "gold_parse": "SELECT avg(weight) FROM Player"
    },
    {
        "db_id": "concert_singer",
        "question": "What is the name and capacity of the stadium  with the most concerts after 2013?",
        "gold_parse": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.Name , T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > value GROUP BY T1.Stadium_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "How many different names are there among singers?",
        "gold_parse": "",
        "query": "SELECT COUNT(DISTINCT Name) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "List the name, nationality and id of all male architects ordered by their names lexicographically.",
        "gold_parse": "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name",
        "query": "SELECT name , nationality , id FROM architect ORDER BY gender Asc",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the aircraft name for the flight with number 99",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno LIKE value",
        "correctness": 0
    },
    {
        "db_id": "car_racing",
        "query": "SELECT avg(age) ,  Make FROM driver GROUP BY make",
        "question": "What is the average age of drivers for each make? Return the average age and make.",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  Make FROM driver GROUP BY make"
    },
    {
        "db_id": "election",
        "query": "SELECT County_name FROM county ORDER BY County_name DESC",
        "question": "Return the names of all counties sorted by county name in descending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT County_name FROM county ORDER BY County_name DESC"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id",
        "question": "Find the names of users who do not have a first notification of loss record.",
        "correctness": 1,
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id",
        "question": "What is the average latitude and longitude of all starting stations for the trips?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
        "question": "What is the team name and acc regular season score of the school that was founded for the longest time?",
        "correctness": 1,
        "gold_parse": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common valid answer text?",
        "correctness": 1,
        "gold_parse": "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "real_estate_properties",
        "question": "Calculate the average first house feature for properties that have been sold.",
        "gold_parse": "",
        "query": "SELECT property_address, AVG(hse_feature_1) FROM Properties WHERE date_sold IS NOT NULL;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "gold_parse": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "query": "SELECT transcript_id , transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";",
        "question": "What are the names of rooms that have either king or queen bed?",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of course IDs for each state/province/county?",
        "gold_parse": "",
        "query": "SELECT state_province_county, SUM(course_id) FROM Addresses JOIN Courses ON Addresses.address_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "address_1",
        "query": "SELECT count(DISTINCT country) FROM City",
        "question": "How many countries do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT country) FROM City"
    },
    {
        "db_id": "bike_1",
        "question": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?",
        "gold_parse": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id",
        "query": "SELECT T1.name , T2.subscription_type , T2.duration FROM station AS T1 JOIN trip AS T2",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many times the number of adults and kids staying in a room reached the maximum capacity of the room?",
        "gold_parse": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids",
        "query": "SELECT Max ( Adults ) , Sum ( Kids ) FROM Reservations",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct last names of all the students who have president votes and whose advisor is not 2192.",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"",
        "query": "SELECT DISTINCT LName FROM Student WHERE Advisor ! = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT DISTINCT Major FROM Student",
        "question": "What are the different majors?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Major FROM Student"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT DISTINCT property_type_code FROM Properties;",
        "question": "What are the different property types?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT property_type_code FROM Properties;"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "How many medicines have the FDA approval status 'No' ?",
        "gold_parse": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
        "query": "SELECT Count ( * ) FROM enzyme WHERE Porphyria ! = value",
        "correctness": 0
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT CONTENTS FROM boxes WHERE Value  >  150",
        "question": "What are the contents of boxes with value greater than 150?",
        "correctness": 1,
        "gold_parse": "SELECT CONTENTS FROM boxes WHERE Value  >  150"
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Max ( price_in_pounds ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "query": "SELECT S.name, COUNT(D.id) AS death_count FROM ship S LEFT JOIN death D ON S.id = D.caused_by_ship_id GROUP BY S.name",
        "question": "How many deaths were caused by each ship?",
        "correctness": 1,
        "gold_parse": "SELECT S.name, COUNT(D.id) AS death_count FROM ship S LEFT JOIN death D ON S.id = D.caused_by_ship_id GROUP BY S.name"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
        "question": "What are the the full names and ids for all customers, and how many accounts does each have?",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "How many transactions do we have?",
        "gold_parse": "SELECT count(*) FROM Financial_transactions",
        "query": "SELECT Count ( * ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)",
        "question": "Show all product names with price higher than the average.",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)"
    },
    {
        "db_id": "tvshow",
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "gold_parse": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "query": "SELECT T1.Package_Option FROM TV_Channel AS T1 EXCEPT SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the smallest population of cities in each district?",
        "gold_parse": "",
        "query": "SELECT CountryCode, MIN(Population) FROM city GROUP BY District;",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
        "question": "How many medicines were not approved by the FDA?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'"
    },
    {
        "db_id": "music_4",
        "question": "What are the ages of all music artists?",
        "gold_parse": "SELECT Age FROM artist",
        "query": "SELECT Sum ( Age ) FROM artist",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled > 300;",
        "question": "What are the names of courses with more than 300 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled > 300;"
    },
    {
        "db_id": "academic",
        "query": "SELECT cid, COUNT(*) FROM publication GROUP BY cid;",
        "question": "How many publications are there for each conference?",
        "correctness": 1,
        "gold_parse": "SELECT cid, COUNT(*) FROM publication GROUP BY cid;"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",
        "question": "Find the maximum and minimum durations of tracks in milliseconds.",
        "correctness": 1,
        "gold_parse": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000",
        "question": "What are the names of cities with a population over 500,000 and their respective countries?",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000"
    },
    {
        "db_id": "world_1",
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "query": "select T2.IsOfficial from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T1.HeadOfState = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans )",
        "question": "Which students have a student loan more than the average amount? List the students' biographical data and the details.",
        "correctness": 1,
        "gold_parse": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans )"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20",
        "question": "Give the different entrant types for drivers at least 20 years old.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20"
    },
    {
        "db_id": "chinook_1",
        "question": "Find the average millisecond length of Latin and Pop tracks.",
        "gold_parse": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"",
        "query": "SELECT Avg ( Milliseconds ) , Avg ( Milliseconds ) FROM Track",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the dataset IDs for each venue.",
        "gold_parse": "",
        "query": "SELECT venuename, SUM(datasetid) FROM venue JOIN paper ON venue.venueid = paper.venueid JOIN paperdataset ON paper.paperid = paperdataset.paperid WHERE datasetid IS NOT NULL GROUP BY venuename;",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What campus has the most faculties in 2003?",
        "gold_parse": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1",
        "query": "SELECT Faculty FROM faculty WHERE Year = value GROUP BY Campus ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T2.SALARY , T2.DEPARTMENT_ID FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE ! = value",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"",
        "question": "What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"?",
        "correctness": 1,
        "gold_parse": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\""
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Show all product names and the total quantity ordered for each product name.",
        "gold_parse": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name",
        "query": "SELECT T2.product_name , Sum ( T1.vat_rating ) FROM Product_Categories AS T1 JOIN Products AS T2 ON T1.production_type_code = T2.production_type_code GROUP BY T2.product_name",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "How many users are there?",
        "gold_parse": "SELECT count(*) FROM user_profiles",
        "query": "SELECT Count ( * ) FROM follows",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'",
        "question": "Find the names of all instructors in computer science department",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'"
    },
    {
        "db_id": "assets_maintenance",
        "question": "List all every engineer's first name, last name, details and coresponding skill description.",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
        "query": "SELECT T2.first_name , T2.last_name , T1.skill_description FROM Skills AS T1 JOIN Maintenance_Engineers AS T2 JOIN Engineer_Skills AS T3 ON T1.skill_id = T3.skill_id AND T3.engineer_id = T2.engineer_id",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".",
        "gold_parse": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'",
        "query": "SELECT meter_700 , meter_400 FROM swimmer WHERE Nationality = value",
        "correctness": 0
    },
    {
        "db_id": "movie_2",
        "query": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'",
        "question": "Find the name of the movies that are played in either cinema Odeon or Imperial.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'"
    },
    {
        "db_id": "geography",
        "question": "Which states have populations exceeding one million?",
        "gold_parse": "",
        "query": "SELECT state_name FROM state WHERE population < 1000000;",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Bob');",
        "question": "What are the names of singers who are the same age as Bob?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Bob');"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30",
        "question": "Find the driver id and number of races of all drivers who have at most participated in 30 races?",
        "correctness": 1,
        "gold_parse": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30"
    },
    {
        "db_id": "store_1",
        "query": "SELECT title FROM albums;",
        "question": "List every album's title.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM albums;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'",
        "question": "Find the name of rooms booked by some customers whose first name contains ROY.",
        "correctness": 1,
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the codes, names, and descriptions of the different document types?",
        "gold_parse": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types",
        "query": "SELECT Document_Type_Name , Document_Type_Name , Document_Type_Description FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Name all the products with next entry ID greater than 8.",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "query": "SELECT catalog_name FROM Catalogs WHERE date_of_publication > value",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "query": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;",
        "question": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26",
        "question": "What are the names of races in which drivers 26 or older took part?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name, agreed_selling_price FROM Properties WHERE agreed_selling_price > (SELECT Avg(agreed_selling_price) FROM Properties);",
        "question": "What are the names and selling prices of properties that have a selling price above the average?",
        "correctness": 1,
        "gold_parse": "SELECT property_name, agreed_selling_price FROM Properties WHERE agreed_selling_price > (SELECT Avg(agreed_selling_price) FROM Properties);"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "question": "what are the top 3 highest support rates?",
        "correctness": 1,
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3"
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the average feature description for all available features?",
        "gold_parse": "",
        "query": "SELECT Avg(feature_description) FROM Other_Available_Features;",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "query": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";",
        "question": "How much is the track Fast As a Shark?",
        "correctness": 1,
        "gold_parse": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"",
        "question": "Who are the players from UCLA?",
        "correctness": 1,
        "gold_parse": "SELECT Player FROM match_season WHERE College  =  \"UCLA\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT title ,  LOCATION FROM paintings",
        "question": "List the title and location of all paintings.",
        "correctness": 1,
        "gold_parse": "SELECT title ,  LOCATION FROM paintings"
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_pounds ) , Min ( price_in_euros ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT count(*) FROM Agencies",
        "question": "Count the number of agencies.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Agencies"
    },
    {
        "db_id": "city_record",
        "question": "Please give me a list of cities whose regional population is over 8000000 or under 5000000.",
        "gold_parse": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000",
        "query": "SELECT City FROM city WHERE Regional_Population > value OR Regional_Population > value",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show all distinct product categories along with the number of mailshots in each category.",
        "gold_parse": "SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category",
        "query": "SELECT product_category , Count ( * ) FROM Products GROUP BY product_category",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "query": "SELECT first_name , last_name , owner_id FROM Owners",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
        "query": "SELECT T1.Company FROM entrepreneur AS T1 EXCEPT SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?",
        "gold_parse": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017",
        "query": "SELECT country FROM circuits WHERE lat > value AND circuitRef = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average transcript ID for each section?",
        "gold_parse": "",
        "query": "SELECT section_name, AVG(transcript_id) FROM Sections JOIN Transcript_Contents ON Sections.course_id = Transcript_Contents.student_course_id;",
        "correctness": 0
    },
    {
        "db_id": "institution_sports",
        "query": "select sum(enrollment) from institution where city  =  \"vancouver\" or city  =  \"calgary\"",
        "question": "Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary .",
        "correctness": 1,
        "gold_parse": "select sum(enrollment) from institution where city  =  \"vancouver\" or city  =  \"calgary\""
    },
    {
        "db_id": "department_store",
        "question": "What are the names and addressed of customers who have both New and Pending orders?",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "query": "SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) = value INTERSECT SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) < value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "How many different levels do members have?",
        "gold_parse": "SELECT count(DISTINCT LEVEL) FROM member",
        "query": "SELECT Count ( * ) FROM member",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Which airline has most number of flights?",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Airline FROM airlines GROUP BY Airline ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
        "query": "SELECT Company FROM entrepreneur WHERE Investor ! = value",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the number of citing papers for each journal with less than 20 citing papers.",
        "gold_parse": "",
        "query": "SELECT journalname, SUM(numciting) FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE numciting < 20 GROUP BY journalname;",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List all of the ids for left-footed players with a height between 180cm and 190cm.",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  \"left\"",
        "query": "SELECT id FROM Player WHERE height BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the first and last name of the faculty who has the most students?",
        "gold_parse": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Fname , Lname FROM Faculty GROUP BY FacID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM city WHERE Population > 100000;",
        "question": "What are the names of cities that have a population greater than 100,000?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM city WHERE Population > 100000;"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price > 750000;",
        "question": "What are the names of properties that have a vendor requested price greater than 750,000?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE vendor_requested_price > 750000;"
    },
    {
        "db_id": "department_store",
        "question": "What are the ids of products from the supplier with id 2, which are more expensive than the average price across all products?",
        "gold_parse": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)",
        "query": "SELECT T2.product_id FROM Products AS T1 JOIN Product_Suppliers AS T2 ON T1.product_id = T2.product_id WHERE T1.product_price > ( SELECT Avg ( T1.product_price ) FROM Products AS T1 )",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Find the distinct names of all races held between 2014 and 2017?",
        "gold_parse": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017",
        "query": "SELECT DISTINCT country FROM circuits WHERE circuitRef BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'",
        "question": "List all singers from the USA along with their birth years.",
        "correctness": 1,
        "gold_parse": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'"
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of all movies that received 3 or 4 stars?",
        "gold_parse": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars LIKE value OR T2.stars LIKE value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
        "question": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1"
    },
    {
        "db_id": "hr_1",
        "question": "display the full name (first and last name), and salary of those employees who working in any department located in London.",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME , T1.SALARY FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = value",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the maximum length in meters for the bridges and what are the architects' names?",
        "gold_parse": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id",
        "query": "SELECT Max ( T2.length_feet ) FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT count(*) FROM Authors",
        "question": "How many authors do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Authors"
    },
    {
        "db_id": "aan_1",
        "query": "select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
        "question": "Count the number of citations Mckeown , Kathleen has .",
        "correctness": 1,
        "gold_parse": "select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\""
    },
    {
        "db_id": "culture_company",
        "question": "What are the titles of movies and books corresponding to companies incorporated in China?",
        "gold_parse": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'",
        "query": "SELECT T1.Title , T2.Company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id WHERE T2.Company_name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "What are the ids for transactions that have an amount greater than the average amount of a transaction?",
        "gold_parse": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)",
        "query": "SELECT account_id FROM Financial_Transactions WHERE transaction_amount > ( SELECT Avg ( transaction_amount ) FROM Financial_Transactions )",
        "correctness": 0
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10",
        "question": "Give the last names of customers who have been to the bakery more than 10 times?",
        "correctness": 1,
        "gold_parse": "SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10"
    },
    {
        "db_id": "bike_1",
        "question": "What are all the different start station names for a trip that lasted less than 100?",
        "gold_parse": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100",
        "query": "SELECT DISTINCT start_date FROM trip WHERE duration < value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.",
        "gold_parse": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
        "query": "SELECT T1.Address , Count ( * ) FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "List the names of all distinct wines that are made of red color grape.",
        "gold_parse": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"",
        "query": "SELECT DISTINCT Appelation FROM wine",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000",
        "question": "Which countries have a population over 50 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000"
    },
    {
        "db_id": "musical",
        "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
        "question": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?",
        "correctness": 1,
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\""
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "query": "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.date_problem_closed > value GROUP BY T1.product_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Display the first name, and department number for all employees whose last name is \"McEwen\".",
        "gold_parse": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'",
        "query": "SELECT T2.FIRST_NAME , T1.DEPARTMENT_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.LAST_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "In February, which city marks the highest temperature?",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1",
        "query": "SELECT T1.City , T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who are in grades below the minimum?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade < (SELECT MIN(grade) FROM Highschooler);",
        "correctness": 0
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
        "question": "Find the number of items that did not receive any review.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)"
    },
    {
        "db_id": "college_2",
        "query": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50",
        "question": "Find the buildings which have rooms with capacity more than 50.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50"
    },
    {
        "db_id": "local_govt_mdm",
        "query": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'",
        "question": "Which distinct source system code includes the substring 'en'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Lisa');",
        "question": "What are the names of conductors that have the same name as 'Lisa'?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM conductor WHERE Name = 'Lisa');"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the agency id and details with most number of clients?",
        "correctness": 1,
        "gold_parse": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that have a vendor requested price less than 750,000?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price < 750000;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974?",
        "gold_parse": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1",
        "query": "SELECT Min ( Weight ) FROM cars_data WHERE Year = value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT name FROM enzyme WHERE product != 'Heme'",
        "question": "What are the names of enzymes whose product is not 'Heme'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM enzyme WHERE product != 'Heme'"
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT Music_Festival FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "Find the names of all reviewers who have ratings with a NULL value for the date.",
        "gold_parse": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"",
        "query": "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Show invoice dates and order id and details for all invoices.",
        "gold_parse": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id",
        "query": "SELECT T1.date_order_placed , T2.order_id FROM Orders AS T1 JOIN Invoices AS T2 ON T1.order_id = T2.order_id",
        "correctness": 0
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products",
        "question": "Show the minimum, average, maximum price for all products.",
        "correctness": 1,
        "gold_parse": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products"
    },
    {
        "db_id": "performance_attendance",
        "query": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the most common location of performances.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title, release_year FROM tv_series WHERE release_year > 2010;",
        "question": "What are the titles and release years of TV series released after 2010?",
        "correctness": 1,
        "gold_parse": "SELECT title, release_year FROM tv_series WHERE release_year > 2010;"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid",
        "question": "How many reservations exist for each boat?",
        "correctness": 1,
        "gold_parse": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15",
        "question": "Give me a list of all the distinct items bought by the customer number 15.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT shipment_tracking_number ,  shipment_date FROM Shipments",
        "question": "What are the tracking numbers and dates for all shipments listed?",
        "correctness": 1,
        "gold_parse": "SELECT shipment_tracking_number ,  shipment_date FROM Shipments"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT region_code ,  region_name FROM region ORDER BY region_code",
        "question": "Show all region code and region name sorted by the codes.",
        "correctness": 1,
        "gold_parse": "SELECT region_code ,  region_name FROM region ORDER BY region_code"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT avg(room_count) FROM Properties;",
        "question": "What is the average number of rooms in a property?",
        "correctness": 1,
        "gold_parse": "SELECT avg(room_count) FROM Properties;"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT StuID FROM Student WHERE age  >  20",
        "question": "Show all student ids who are older than 20.",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM Student WHERE age  >  20"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the codes of card types that have 5 or more cards?",
        "gold_parse": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
        "query": "SELECT T1.card_type_code FROM Customers_Cards AS T1 JOIN Financial_Transactions AS T2 ON T1.card_id = T2.card_id GROUP BY T2.transaction_type HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What is the placement date of the order whose invoice number is 10?",
        "gold_parse": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10",
        "query": "SELECT invoice_date FROM Invoices WHERE invoice_number = value",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'",
        "question": "What are the names and results of battles between 1900 and 1950?",
        "correctness": 1,
        "gold_parse": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'"
    },
    {
        "db_id": "dorm_1",
        "question": "Find the name of dorms that do not have amenity TV Lounge.",
        "gold_parse": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'",
        "query": "SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name ! = value",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'",
        "question": "What are the names and results of battles between 1900 and 1950?",
        "correctness": 1,
        "gold_parse": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'"
    },
    {
        "db_id": "driving_school",
        "question": "What is the first name of the staff who did not give any lesson?",
        "gold_parse": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id",
        "query": "SELECT first_name FROM Staff EXCEPT SELECT first_name FROM Staff",
        "correctness": 0
    },
    {
        "db_id": "movie_2",
        "query": "SELECT DISTINCT name FROM MovieTheaters WHERE Movie  =  'null'",
        "question": "Select the name of all movie theaters that are not currently showing a movie.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT name FROM MovieTheaters WHERE Movie  =  'null'"
    },
    {
        "db_id": "singer",
        "query": "SELECT Title FROM song WHERE Sales > 500000",
        "question": "What songs have sales over 500,000 copies?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM song WHERE Sales > 500000"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "question": "Show all official native languages that contain the word \"English\".",
        "correctness": 1,
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\""
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2",
        "question": "List the invoice dates and ids of the invoices causing at least 2 shipments.",
        "correctness": 1,
        "gold_parse": "SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2"
    },
    {
        "db_id": "school_finance",
        "question": "List the amount and donor name for the largest amount of donation.",
        "gold_parse": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "query": "SELECT T2.Budgeted , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Find the names of Japanese constructors that have once earned more than 5 points?",
        "gold_parse": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5",
        "query": "SELECT * FROM results WHERE milliseconds > value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "question": "What destination has the fewest number of flights?",
        "correctness": 1,
        "gold_parse": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
        "question": "What are the first names and support rep ids for employees serving 10 or more customers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10"
    },
    {
        "db_id": "loan_1",
        "question": "Find the city and name of bank branches that provide business loans.",
        "gold_parse": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
        "query": "SELECT T1.city , T2.cust_name FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID",
        "correctness": 0
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1",
        "question": "Find the name and id of the item with the highest average rating.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "question": "What are the  ids of every student who has never attended a course?",
        "correctness": 1,
        "gold_parse": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the average prices of hotels grouped by their pet policy.",
        "gold_parse": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn",
        "query": "SELECT Avg ( T2.price_range ) , T1.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Hotels AS T2 GROUP BY T1.Attraction_Type_Code",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What model has the most different versions?",
        "gold_parse": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Model FROM model_list GROUP BY Model ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name",
        "question": "How many total credits are offered by each department?",
        "correctness": 1,
        "gold_parse": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled < 2;",
        "question": "What are the names of courses with less than 2 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled < 2;"
    },
    {
        "db_id": "geography",
        "query": "SELECT lake_name, area FROM lake WHERE area >= 100",
        "question": "List all lakes with an area of at least 100 square kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT lake_name, area FROM lake WHERE area >= 100"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  \"Baltimore\"",
        "question": "Return the first name and major of students are living in Baltimore?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  \"Baltimore\""
    },
    {
        "db_id": "culture_company",
        "question": "Show the movie titles and book titles for all companies in China.",
        "gold_parse": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'",
        "query": "SELECT T1.Title , T2.Company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id WHERE T2.Company_name = value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the different first names for customers from Brazil who have also had an invoice?",
        "gold_parse": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"",
        "query": "SELECT DISTINCT T1.FirstName FROM Customer AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.BillingCountry = value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the first name and country code of the oldest player.",
        "gold_parse": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "query": "SELECT first_name , country_code FROM players ORDER BY birth_date Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "query": "SELECT count(*) FROM Aircraft",
        "question": "How many aircrafts exist in the database?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Aircraft"
    },
    {
        "db_id": "advising",
        "question": "What are the different course IDs in the student record table?",
        "gold_parse": "",
        "query": "SELECT DISTINCT course_id FROM student_record;",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the visit date and details of the tourist whose detail is 'Vincent'",
        "gold_parse": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\"",
        "query": "SELECT T3.Visit_Date , T3.Visit_Details FROM Tourist_Attractions AS T1 JOIN Shops AS T2 ON T2.Shop_ID = T1.Tourist_Attraction_ID JOIN Visits AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID WHERE T2.Shop_Details = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "query": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
        "question": "What is the average distance and price for all flights from LA?",
        "correctness": 1,
        "gold_parse": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\""
    },
    {
        "db_id": "network_2",
        "question": "How many different jobs are listed?",
        "gold_parse": "SELECT count(DISTINCT job) FROM Person",
        "query": "SELECT Count ( DISTINCT city ) FROM Person",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Return the names of teams that have no match season record.",
        "gold_parse": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "query": "SELECT T1.Name FROM team AS T1 WHERE T1.Team_id NOT IN ( SELECT T2.Team FROM player AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many songs have used the instrument \"drums\"?",
        "gold_parse": "SELECT count(*) FROM instruments WHERE instrument  =  \"drums\"",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "query": "SELECT MIN(Earnings), AVG(Earnings), MAX(Earnings) FROM poker_player;",
        "question": "What is the minimum, average, and maximum earnings of poker players?",
        "correctness": 1,
        "gold_parse": "SELECT MIN(Earnings), AVG(Earnings), MAX(Earnings) FROM poker_player;"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the manager and sponsor of the team that has the most drivers?",
        "correctness": 1,
        "gold_parse": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "race_track",
        "query": "SELECT DISTINCT LOCATION FROM track",
        "question": "Give the different locations of tracks.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM track"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );",
        "question": "What is the count of enzymes without any interactions?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );"
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name = value AND T1.building_short_name = value",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are the prices of products that have never gotten a complaint?",
        "gold_parse": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)",
        "query": "SELECT product_price FROM Products EXCEPT SELECT product_price FROM Products",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average student ID for each section?",
        "gold_parse": "",
        "query": "SELECT section_name, AVG(student_id) FROM Sections JOIN Students ON Sections.course_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.Treasurer_Vote = value",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "How many ships ended up being 'Captured'?",
        "gold_parse": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
        "query": "select count ( * ) from battle as T1 join ship as T2 on T1.id = T2.lost_in_battle where T1.result = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')",
        "question": "Find the title of course whose prerequisite is course Differential Geometry.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT D.note, S.name FROM death D JOIN ship S ON D.caused_by_ship_id = S.id",
        "question": "What notes are there on deaths caused by each ship?",
        "correctness": 1,
        "gold_parse": "SELECT D.note, S.name FROM death D JOIN ship S ON D.caused_by_ship_id = S.id"
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT bike_id FROM trip WHERE duration > value",
        "correctness": 0
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
        "question": "What are the IDs of customers who have \"Diana\" in part of their names?",
        "correctness": 1,
        "gold_parse": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\""
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show all cities where at least one customer lives in but no performer lives in.",
        "gold_parse": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID",
        "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Clients AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T2.Address_ID HAVING Count ( * ) < = value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id",
        "question": "What are the different customer ids, and how many cards does each one hold?",
        "correctness": 1,
        "gold_parse": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "question": "Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.",
        "correctness": 1,
        "gold_parse": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'"
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many properties are there for each property type?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM Properties GROUP BY property_type_code;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the maximum feature name for each property name.",
        "gold_parse": "",
        "query": "SELECT property_name, MAX(feature_name) FROM Properties JOIN Other_Available_Features ON Properties.property_id = Other_Available_Features.feature_id GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What is the total number of ratings that has more than 3 stars?",
        "gold_parse": "SELECT count(*) FROM Rating WHERE stars  >  3",
        "query": "SELECT Count ( * ) FROM Movie",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Which customer have the most policies? Give me the customer details.",
        "gold_parse": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Customer_Details FROM Customers GROUP BY Customer_Details ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give the names of countries with English and French as official languages.",
        "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "query": "select T1.Name from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.IsOfficial = value intersect select T3.Name from country as T3 join countrylanguage as T4 on T3.Code = T4.CountryCode where T4.IsOfficial = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "question": "Find the entry name of the catalog with the highest price (in USD).",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;",
        "question": "What is the number of child documents for each parent document, and what are the ids of the parent documents?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Name all rivers longer than 500 kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
        "question": "On which day has it neither been foggy nor rained in the zip code of 94107?",
        "correctness": 1,
        "gold_parse": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\""
    },
    {
        "db_id": "club_1",
        "question": "Count the members of the club \"Tennis Club\".",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"",
        "query": "SELECT Count ( * ) FROM Club WHERE ClubName = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the average price of clothes?",
        "gold_parse": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'",
        "query": "SELECT Avg ( product_price ) FROM Products",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Find the average fee on a CSU campus in 1996",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Please list the countries and years of film market estimations.",
        "gold_parse": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID",
        "query": "SELECT T2.Country , T3.Year FROM film AS T1 JOIN market AS T2 JOIN film_market_estimation AS T3 ON T1.Film_ID = T3.Film_ID AND T3.Market_ID = T2.Market_ID AND T1.Film_ID = T3.Film_ID WHERE T1.Title = value",
        "correctness": 0
    },
    {
        "db_id": "book_press",
        "query": "SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)",
        "question": "What are the names of the press that makes the highest monthly profit or the lowest monthly profit?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'",
        "question": "List all countries along with their official languages.",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled > (SELECT AVG(num_enrolled) FROM course);",
        "question": "What are the names of courses with enrollment above the average?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled > (SELECT AVG(num_enrolled) FROM course);"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1",
        "question": "On which days more than one revisions were made on catalogs.",
        "correctness": 1,
        "gold_parse": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS",
        "question": "List all different types of contents ordered by contents.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS"
    },
    {
        "db_id": "geography",
        "query": "SELECT lake_name, area FROM lake WHERE area >= 100",
        "question": "List all lakes with an area of at least 100 square kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT lake_name, area FROM lake WHERE area >= 100"
    },
    {
        "db_id": "election",
        "query": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2",
        "question": "Show the name of the party that has at least two records.",
        "correctness": 1,
        "gold_parse": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "college_2",
        "question": "What are the names and budgets of departments with budgets greater than the average?",
        "gold_parse": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "query": "SELECT T1.dept_name , T2.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name WHERE T1.budget > ( SELECT Avg ( T1.budget ) FROM department AS T1 )",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "gold_parse": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "query": "SELECT property_name FROM Properties WHERE room_count > value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Population FROM city WHERE Population < 100000;",
        "question": "What are the names and populations of cities that have a population less than 100,000?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Population FROM city WHERE Population < 100000;"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\"",
        "question": "Which apartments have bookings with status code \"Confirmed\"? Return their apartment numbers.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\""
    },
    {
        "db_id": "flight_2",
        "question": "Which city has the most frequent destination airport?",
        "gold_parse": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT City FROM airports GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000",
        "question": "What are the names of cities with a population over 500,000 and their respective countries?",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, ci.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE ci.Population > 500000"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
        "question": "Which manufacturers work for more than 1 club?",
        "correctness": 1,
        "gold_parse": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "race_track",
        "query": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS",
        "question": "What are the different classes of races, and how many races correspond to each?",
        "correctness": 1,
        "gold_parse": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS"
    },
    {
        "db_id": "university_basketball",
        "question": "Return the name of the team and the acc during the regular season for the school that was founded the earliest.",
        "gold_parse": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
        "query": "SELECT T1.Team_Name , T2.School FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID ORDER BY T2.Founded Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "What are the names of Japanese directors?",
        "gold_parse": "",
        "query": "SELECT name FROM director WHERE nationality = 'American';",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009",
        "question": "What are the average, minimum, and maximum ticket prices for exhibitions that happened prior to 2009?",
        "correctness": 1,
        "gold_parse": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009"
    },
    {
        "db_id": "geography",
        "question": "Which states do not share a border with Oregon?",
        "gold_parse": "",
        "query": "SELECT state_name FROM border_info WHERE border = 'Oregon';",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "query": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15",
        "question": "What is the name of every city that has at least 15 stations and how many stations does it have?",
        "correctness": 1,
        "gold_parse": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the id and the number of citations of the most cited paper.",
        "correctness": 1,
        "gold_parse": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id",
        "question": "Return the names and ids of each account, as well as the number of transactions.",
        "correctness": 1,
        "gold_parse": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum address ID for each student's middle name?",
        "gold_parse": "",
        "query": "SELECT middle_name, MIN(address_id) FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id;",
        "correctness": 0
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1",
        "question": "Tell me the height and id number of the widest painting in gallery 240.",
        "correctness": 1,
        "gold_parse": "SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000",
        "question": "Which countries have a population over 50 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1",
        "question": "What is the name of the highest mountain?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1"
    },
    {
        "db_id": "election",
        "question": "Which people severed as comptroller most frequently? Give me the name of the person and the frequency count.",
        "gold_parse": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Governor , Count ( * ) FROM party GROUP BY Comptroller ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many orders does Lucas Mancini has?",
        "gold_parse": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\"",
        "query": "SELECT Count ( * ) FROM employees WHERE first_name = value",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "query": "SELECT Name FROM Representative WHERE Party != \"Republican\"",
        "question": "What are the names of representatives whose party is not \"Republican\"?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM Representative WHERE Party != \"Republican\""
    },
    {
        "db_id": "party_people",
        "query": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"",
        "question": "How many Annual Meeting events happened in the United Kingdom region?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\""
    },
    {
        "db_id": "election",
        "question": "Show the delegates and the names of the party they belong to.",
        "gold_parse": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
        "query": "SELECT Governor , Party FROM party",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
        "question": "How many male students (sex is 'M') are allergic to any type of food?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);",
        "question": "What are the names of journals with the lowest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC",
        "question": "What are the names of representatives in descending order of votes?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id ORDER BY T2.search_datetime LIMIT 1;",
        "question": "What is the age range category of the user who made the first search?",
        "correctness": 1,
        "gold_parse": "SELECT T1.age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id ORDER BY T2.search_datetime LIMIT 1;"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the customer name and date of the orders whose status is \"Delivered\".",
        "gold_parse": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"",
        "query": "SELECT T1.customer_name , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = value",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "gold_parse": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "query": "SELECT Name FROM conductor",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "gold_parse": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "query": "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value AND T1.country = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "query": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;",
        "question": "What are the names of the top 8 countries by total invoice size and what are those sizes?",
        "correctness": 1,
        "gold_parse": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;"
    },
    {
        "db_id": "music_2",
        "question": "How many instruments does the song \"Badlands\" use?",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "query": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3",
        "question": "Find the accreditation level that more than 3 phones use.",
        "correctness": 1,
        "gold_parse": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3"
    },
    {
        "db_id": "world_1",
        "query": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'",
        "question": "List all countries along with their official languages.",
        "correctness": 1,
        "gold_parse": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T'"
    },
    {
        "db_id": "school_player",
        "question": "Show the nicknames of schools that are not in division 1.",
        "gold_parse": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"",
        "query": "SELECT Nickname FROM school_details EXCEPT SELECT Nickname FROM school_details WHERE Division = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(DISTINCT student_id) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the most common result in the behavioral monitoring details. What are the count and the details of this result?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT student_id) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12",
        "question": "What is the name and distance for the aircraft that has an id of 12?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12"
    },
    {
        "db_id": "activity_1",
        "question": "Show all the ranks and the number of male and female faculty for each rank.",
        "gold_parse": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex",
        "query": "SELECT Count ( * ) , Rank FROM Faculty WHERE Sex = value GROUP BY Rank",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "How many courses are there in total?",
        "gold_parse": "SELECT count(*) FROM COURSES",
        "query": "SELECT Count ( * ) FROM Course_Authors_and_Tutors",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "How many calendar items do we have?",
        "gold_parse": "SELECT count(*) FROM Ref_calendar",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150",
        "question": "Find the name of rooms whose base price is between 120 and 150.",
        "correctness": 1,
        "gold_parse": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"",
        "question": "What is the id of the reviewer whose name includes the word \"Mike\"?",
        "correctness": 1,
        "gold_parse": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\""
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000",
        "question": "Which countries have a population over 50 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000"
    },
    {
        "db_id": "music_1",
        "question": "List the name and gender for all artists who released songs in March.",
        "gold_parse": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"",
        "query": "SELECT T1.artist_name , T1.gender FROM artist AS T1 JOIN files AS T2 ON T1.artist_name = T2.artist_name WHERE T2.formats = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the different product names for products that have the 'warm' characteristic:?",
        "gold_parse": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"",
        "query": "SELECT DISTINCT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_data_type LIKE value",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "What are the different first names and ages of the students who do have pets?",
        "gold_parse": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "query": "select Fname , Age from Student",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Denver');",
        "question": "What are the names of airports in Denver?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Denver');"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of colors.",
        "gold_parse": "SELECT count(*) FROM ref_colors",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "query": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the id and name of the stadium where the largest number of injury accidents occurred.",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "city_record",
        "question": "What is the temperature of \"Shanghai\" city in January?",
        "gold_parse": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\"",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T1.City = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.",
        "gold_parse": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 ORDER BY T2.precipitation_inches Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.",
        "gold_parse": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'McDonalds');",
        "question": "What are the names of businesses that have the same name as 'McDonalds'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid IN (SELECT bid FROM business WHERE name = 'McDonalds');"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "Return all distinct detention type codes.",
        "gold_parse": "SELECT DISTINCT detention_type_code FROM Detention",
        "query": "SELECT DISTINCT address_type_code FROM Ref_Address_Types",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT Team) FROM match_season",
        "question": "How many distinct teams are involved in match seasons?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Team) FROM match_season"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7",
        "question": "What are the different names for each station that has ever had 7 bikes available?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid",
        "question": "Find the number of reservations by sailors with id greater than 1 for each boat.",
        "correctness": 1,
        "gold_parse": "SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid"
    },
    {
        "db_id": "geography",
        "question": "Which states have a population greater than 5,000,000?",
        "gold_parse": "",
        "query": "SELECT state_name FROM state WHERE population > 1000000;",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "query": "SELECT count(DISTINCT Party) FROM representative",
        "question": "How many distinct parties are there for representatives?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Party) FROM representative"
    },
    {
        "db_id": "apartment_rentals",
        "question": "What are the top three apartment types in terms of the average room count? Give me the",
        "gold_parse": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3",
        "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY Avg ( bathroom_count ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM movie WHERE release_year > 2000;",
        "question": "Which movies were released after the year 2000?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movie WHERE release_year > 2000;"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
        "question": "List the name of clubs that do not have players.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the minimum feature name for each property name?",
        "gold_parse": "",
        "query": "SELECT property_name, MIN(feature_name) FROM Properties JOIN Other_Available_Features ON Properties.property_type_code = Other_Available_Features.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT T2.product_name , T2.typical_buying_price FROM Ref_Product_Categories AS T1 JOIN Products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T1.product_category_description = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is name of the country that speaks the largest number of languages?",
        "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Continent FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Where is the club \"Pen and Paper Gaming\" located?",
        "gold_parse": "SELECT clublocation FROM club WHERE clubname  =  \"Pen and Paper Gaming\"",
        "query": "SELECT ClubName FROM Club WHERE ClubName = value",
        "correctness": 0
    },
    {
        "db_id": "book_review",
        "query": "SELECT TYPE ,  COUNT(*) FROM book GROUP BY TYPE",
        "question": "For each book type return the type and the number of books of that type.",
        "correctness": 1,
        "gold_parse": "SELECT TYPE ,  COUNT(*) FROM book GROUP BY TYPE"
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?",
        "gold_parse": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7",
        "query": "SELECT T1.id FROM station AS T1 WHERE T1.long > value INTERSECT SELECT T2.station_id FROM status AS T2 WHERE T2.bikes_available < value",
        "correctness": 0
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')",
        "question": "What are the ids of Cookies whose price is lower than any Croissant?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')"
    },
    {
        "db_id": "gas_company",
        "question": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.",
        "gold_parse": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion",
        "query": "SELECT Rank , Market_Value , Profits_billion FROM company WHERE Sales_billion = value ORDER BY Sales_billion Asc",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
        "question": "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?",
        "correctness": 1,
        "gold_parse": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)",
        "question": "List the names of counties that do not have any cities.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)"
    },
    {
        "db_id": "imdb",
        "question": "What are the names of French directors?",
        "gold_parse": "",
        "query": "SELECT name FROM director WHERE nationality = 'American';",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "query": "SELECT MIN(FlightNo), AVG(FlightNo), MAX(FlightNo) FROM flights;",
        "question": "What is the minimum, average, and maximum flight number?",
        "correctness": 1,
        "gold_parse": "SELECT MIN(FlightNo), AVG(FlightNo), MAX(FlightNo) FROM flights;"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR",
        "question": "What are the distinct venues for papers, ordered by year?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR"
    },
    {
        "db_id": "inn_1",
        "question": "What are the name of rooms booked by customers whose first name has \"ROY\" in part?",
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'",
        "query": "SELECT T1.roomName FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\"",
        "question": "Which authors have written a paper with title containing the word \"Monadic\"? Return their last names.",
        "correctness": 1,
        "gold_parse": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\""
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Charlie');",
        "question": "What are the names of poker players who are the same height as Charlie?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height IN (SELECT Height FROM people WHERE Name = 'Charlie');"
    },
    {
        "db_id": "wta_1",
        "question": "Find the total number of matches.",
        "gold_parse": "SELECT count(*) FROM matches",
        "query": "SELECT Count ( * ) FROM players",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "gold_parse": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "query": "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value EXCEPT SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT DISTINCT payment_method_code FROM Customers",
        "question": "What are the distinct payment methods used by customers?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT payment_method_code FROM Customers"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id",
        "question": "How many films are there in each category? List the genre name, genre id and the count.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id"
    },
    {
        "db_id": "aan_1",
        "query": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
        "question": "What are the venues and years where Mckeown , Kathleen had papers ?",
        "correctness": 1,
        "gold_parse": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\""
    },
    {
        "db_id": "movie_1",
        "question": "What is the name of the movie produced after 2000 and directed by James Cameron?",
        "gold_parse": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000",
        "query": "SELECT T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T2.name = value AND T1.year > value INTERSECT SELECT T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID WHERE T2.name = value AND T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "gold_parse": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "query": "SELECT DISTINCT id , name FROM ship WHERE ship_type = value",
        "correctness": 0
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the age of the driver who participated in the most number of races.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "question": "What are the first name and gender of the students who have allergy to milk but can put up with cats?",
        "correctness": 1,
        "gold_parse": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT sum(balance) FROM checking",
        "question": "Find the total balance across checking accounts.",
        "correctness": 1,
        "gold_parse": "SELECT sum(balance) FROM checking"
    },
    {
        "db_id": "flight_2",
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "query": "SELECT Count ( * ) FROM airports WHERE Country = value AND City = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, SurfaceArea FROM country WHERE SurfaceArea > 500000;",
        "question": "What are the names and surface areas of countries that have a surface area greater than 500,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT Name, SurfaceArea FROM country WHERE SurfaceArea > 500000;"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1",
        "question": "Find the name of the department which has the highest average salary of professors.",
        "correctness": 1,
        "gold_parse": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Language, Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50",
        "question": "What are the official languages spoken by more than 50% of the population in their countries?",
        "correctness": 1,
        "gold_parse": "SELECT Language, Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND Percentage > 50"
    },
    {
        "db_id": "network_2",
        "question": "How many type of jobs do they have?",
        "gold_parse": "SELECT count(DISTINCT job) FROM Person",
        "query": "SELECT Count ( * ) FROM Person",
        "correctness": 0
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;",
        "question": "Return the date stamp and property name for each property history event, sorted by date stamp.",
        "correctness": 1,
        "gold_parse": "SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;"
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T2.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T1.Name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "pilot_1",
        "query": "select * from pilotskills where age  <  30",
        "question": "What is all the information about pilots who are younger than 30 ?",
        "correctness": 1,
        "gold_parse": "select * from pilotskills where age  <  30"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the least common detention type? Show the type code and the description.",
        "correctness": 1,
        "gold_parse": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of budget codes.",
        "gold_parse": "SELECT count(*) FROM Ref_budget_codes",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Return the the \"active to date\" of the latest contact channel used by the customer named \"Tillman Ernser\".",
        "gold_parse": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "query": "SELECT T2.active_from_date FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = value ORDER BY T1.date_became_customer Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "gold_parse": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "query": "SELECT T1.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name = value EXCEPT SELECT T1.first_name FROM Owners AS T1",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "question": "What is the founded year of the non public school that was founded most recently?",
        "correctness": 1,
        "gold_parse": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1"
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all genres in alphabetical order, combined with its ratings?",
        "gold_parse": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "query": "SELECT g_name FROM genre ORDER BY rating Asc",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average rating of songs for each language?",
        "gold_parse": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
        "query": "SELECT T1.rating , Avg ( T2.rating ) FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is GROUP BY T2.languages",
        "correctness": 0
    },
    {
        "db_id": "boat_1",
        "query": "SELECT count(*) FROM Boats WHERE color  =  'red'",
        "question": "How many red boats exist?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Boats WHERE color  =  'red'"
    },
    {
        "db_id": "architecture",
        "question": "What is the average length in feet of the bridges?",
        "gold_parse": "SELECT avg(length_feet) FROM bridge",
        "query": "SELECT Avg ( length_feet ) FROM bridge WHERE location = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of all the physicians who prescribe Thesisin as medication.",
        "gold_parse": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"",
        "query": "SELECT Name FROM Physician WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the full names of customers who have accounts?",
        "gold_parse": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "query": "SELECT customer_first_name , customer_last_name FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.",
        "gold_parse": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars",
        "query": "SELECT T2.name , T1.title , T1.title FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID AND T1.mID = T3.mID ORDER BY T3.stars Asc",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"",
        "question": "Show other account details for account with name 338.",
        "correctness": 1,
        "gold_parse": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\""
    },
    {
        "db_id": "world_1",
        "question": "What is the maximum population of countries with a republic government form?",
        "gold_parse": "",
        "query": "SELECT LifeExpectancy, MAX(Population) FROM country WHERE GovernmentForm = 'Republic';",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.",
        "gold_parse": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name",
        "query": "SELECT amenity_name FROM Dorm_amenity ORDER BY amenity_name Asc",
        "correctness": 0
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Absent\"",
        "question": "Show the student answer texts that received both \"Normal\" and \"Absent\" as comments.",
        "correctness": 1,
        "gold_parse": "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Absent\""
    },
    {
        "db_id": "tracking_orders",
        "question": "what are the order id and customer id of the oldest order?",
        "gold_parse": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "query": "SELECT order_id , customer_id FROM Orders ORDER BY customer_id Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which lakes have an area greater than 1,000 square kilometers?",
        "gold_parse": "",
        "query": "SELECT lake_name FROM lake WHERE area > 500;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "gold_parse": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "query": "select semester_id from Student_Enrolment where degree_program_id = value intersect select T1.semester_id from Student_Enrolment as T1 join Degree_Programs as T2 on T1.degree_program_id = T2.degree_program_id where T2.degree_summary_name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id",
        "question": "How many accounts does each customer have? List the number and customer id.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id"
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee on a CSU campus in 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T3.Faculty = value",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);",
        "question": "What are the names of journals with the lowest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MIN(jid) FROM journal);"
    },
    {
        "db_id": "loan_1",
        "question": "Find the average credit score of the customers who have some loan.",
        "gold_parse": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "query": "SELECT Avg ( credit_score ) FROM customer",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the average number of customers in all banks of Utah state.",
        "gold_parse": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'",
        "query": "SELECT Avg ( T2.credit_score ) FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID WHERE T1.state = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id IN (SELECT Id FROM car_makers WHERE FullName = 'Mercedes-Benz');",
        "question": "What are the full names of car makers that have the same name as 'Mercedes-Benz'?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id IN (SELECT Id FROM car_makers WHERE FullName = 'Mercedes-Benz');"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1",
        "question": "Who is the author of paper 1?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1"
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
        "question": "What are the attribute data types with more than 3 attribute definitions?",
        "correctness": 1,
        "gold_parse": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3"
    },
    {
        "db_id": "sports_competition",
        "question": "List the position of players with average number of points scored by players of that position bigger than 20.",
        "gold_parse": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
        "query": "SELECT Position FROM player WHERE Points > value",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "What is the party of the youngest people?",
        "gold_parse": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1",
        "query": "SELECT Party FROM people ORDER BY Age Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred",
        "question": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;",
        "question": "How many rooms cost more than 120, for each different decor?",
        "correctness": 1,
        "gold_parse": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT property_id ,  vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1;",
        "question": "Which property had the lowest price requested by the vendor? List the id and the price.",
        "correctness": 1,
        "gold_parse": "SELECT property_id ,  vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1;"
    },
    {
        "db_id": "yelp",
        "question": "What are the cities of businesses with 20 check-ins?",
        "gold_parse": "",
        "query": "SELECT city FROM business WHERE city IN (SELECT city FROM checkin WHERE count = 20);",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE JOB_TITLE = value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.title ,  T2.PurchasePrice FROM Books_Order AS T1 JOIN BOOk AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY sum(amount) DESC LIMIT 1",
        "question": "What is the title and purchase price of the book that has the highest total order amount?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  T2.PurchasePrice FROM Books_Order AS T1 JOIN BOOk AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY sum(amount) DESC LIMIT 1"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1",
        "question": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?",
        "correctness": 1,
        "gold_parse": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the codes of template types that are not used for any document?",
        "gold_parse": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "query": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 EXCEPT SELECT T2.Template_Type_Code FROM Templates AS T2",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the most common types of interactions between enzymes and medicine, and how many types are there?",
        "correctness": 1,
        "gold_parse": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "restaurant_1",
        "question": "Advisor 1121 has how many students?",
        "gold_parse": "SELECT count(*) FROM Student WHERE Advisor =  1121",
        "query": "SELECT Count ( DISTINCT Advisor ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "query": "SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'",
        "question": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" AND T4.Collection_Name = \"Best\";",
        "question": "List id of documents that in document subset Best for 2000 and collection named Best.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" AND T4.Collection_Name = \"Best\";"
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.",
        "gold_parse": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
        "query": "SELECT Sum ( Revenue ) FROM Manufacturers WHERE Headquarter = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "gold_parse": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "query": "select Name , Population , LifeExpectancy from country where Region = value order by LifeExpectancy desc limit value",
        "correctness": 0
    },
    {
        "db_id": "boat_1",
        "query": "SELECT count(*) FROM Boats WHERE color  =  'red'",
        "question": "How many boats are red?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Boats WHERE color  =  'red'"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled = (SELECT MIN(num_enrolled) FROM course);",
        "question": "What are the names of courses with the lowest enrollment?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled = (SELECT MIN(num_enrolled) FROM course);"
    },
    {
        "db_id": "riding_club",
        "question": "Show the names of players and names of their coaches in descending order of the votes of players.",
        "gold_parse": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC",
        "query": "SELECT Player_name , Sponsor_name FROM player ORDER BY Votes Desc",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which physician was trained in the procedure that costs the most.",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT count(*) FROM candidate",
        "question": "Count the number of candidates.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM candidate"
    },
    {
        "db_id": "college_3",
        "question": "Find the rooms of faculties with rank professor who live in building NEB.",
        "gold_parse": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"",
        "query": "SELECT T2.Room FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Rank = value AND T1.Building = value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room",
        "question": "For each room, find its name and the number of times reservations were made for it.",
        "correctness": 1,
        "gold_parse": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room"
    },
    {
        "db_id": "hospital_1",
        "question": "What are each physician's employee id and department id primarily affiliated.",
        "gold_parse": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",
        "query": "SELECT EmployeeID , SSN FROM Physician",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the name of airline which runs the most number of routes.",
        "gold_parse": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T2.name FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.airline ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of transcript IDs for each student's mobile number?",
        "gold_parse": "",
        "query": "SELECT cell_mobile_number, SUM(transcript_id) FROM Students JOIN Transcripts ON Students.student_id = Transcripts.transcript_id;",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?",
        "gold_parse": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",
        "query": "SELECT Document_Description , Document_Name FROM Documents WHERE Other_Details = value",
        "correctness": 0
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  \"Bad\";",
        "question": "Show all client ids and details with sic code \"Bad\".",
        "correctness": 1,
        "gold_parse": "SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  \"Bad\";"
    },
    {
        "db_id": "race_track",
        "question": "Give the names of tracks that do not have a race in the class 'GT'.",
        "gold_parse": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'",
        "query": "SELECT T1.Name FROM track AS T1 WHERE T1.Track_ID NOT IN ( SELECT T2.Track_ID FROM race AS T2 WHERE T2.Class = value )",
        "correctness": 0
    },
    {
        "db_id": "book_1",
        "query": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name LIKE \"%Plato%\"",
        "question": "List titles of all books published by an author whose name contains the string 'Plato'?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name LIKE \"%Plato%\""
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);",
        "question": "What are the names of the youngest singers?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);"
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Max ( price_in_dollars ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "query": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)",
        "question": "What is the total number of deaths and damage for all storms with a max speed greater than the average?",
        "correctness": 1,
        "gold_parse": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies",
        "question": "Select the title of all movies.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies"
    },
    {
        "db_id": "music_1",
        "question": "What is the count of the songs that last approximately 4 minutes?",
        "gold_parse": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "query": "SELECT Count ( * ) FROM files WHERE duration < value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"",
        "question": "What are the invoice dates for customers with the first name Astrid and the last name Gruber?",
        "correctness": 1,
        "gold_parse": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\""
    },
    {
        "db_id": "pets_1",
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "gold_parse": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "query": "SELECT LName FROM Student WHERE Age = value",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "query": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
        "question": "In which year were most departments established?",
        "correctness": 1,
        "gold_parse": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many assets does each maintenance contract contain? List the number and the contract id.",
        "gold_parse": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id",
        "query": "SELECT maintenance_contract_company_id , Count ( * ) FROM Maintenance_Contracts GROUP BY maintenance_contract_id",
        "correctness": 0
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient ORDER BY sum(T3.amount) DESC LIMIT 1",
        "question": "What is the name of the client who has ordered the greatest total amount of books?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient ORDER BY sum(T3.amount) DESC LIMIT 1"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the unit of measuerment of the product category code \"Herbs\"?",
        "gold_parse": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"",
        "query": "SELECT T1.characteristic_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_category_code = value",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015",
        "question": "What journals published papers after the year 2015?",
        "correctness": 1,
        "gold_parse": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
        "question": "What are the names of instructors who didn't teach?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)"
    },
    {
        "db_id": "party_host",
        "query": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50",
        "question": "Show the locations of parties with hosts older than 50.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50"
    },
    {
        "db_id": "tracking_orders",
        "question": "What is the id of the most recent order?",
        "gold_parse": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "query": "SELECT T2.customer_id FROM Invoices AS T1 JOIN Orders AS T2 JOIN Shipments AS T3 ON T1.invoice_number = T3.invoice_number AND T3.order_id = T2.order_id ORDER BY T1.invoice_date Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT MIN(Age), AVG(Age), MAX(Age) FROM singer;",
        "question": "What is the minimum, average, and maximum age of singers?",
        "correctness": 1,
        "gold_parse": "SELECT MIN(Age), AVG(Age), MAX(Age) FROM singer;"
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?",
        "gold_parse": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "query": "SELECT T2.pName , T1.cName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the first and second line for all addresses?",
        "gold_parse": "SELECT line_1 ,  line_2 FROM addresses",
        "query": "select line_1 , line_1 from Addresses",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Name all rivers longer than 500 kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4",
        "question": "What are the ids and names of accounts with 4 or more transactions?",
        "correctness": 1,
        "gold_parse": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4"
    },
    {
        "db_id": "products_for_hire",
        "question": "What is the product description of the product booked with an amount of 102.76?",
        "gold_parse": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76",
        "query": "SELECT product_description FROM Products_for_Hire WHERE product_name = value",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the IDs and names of all journals?",
        "gold_parse": "",
        "query": "SELECT journalid, journalname FROM journal WHERE journalid = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee first names and ids of employees who serve at least 10 customers.",
        "gold_parse": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
        "query": "SELECT FirstName , EmployeeId FROM Employee GROUP BY EmployeeId HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "query": "SELECT lake_name, area FROM lake WHERE area >= 100",
        "question": "List all lakes with an area of at least 100 square kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT lake_name, area FROM lake WHERE area >= 100"
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many customers do not have an account?",
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "query": "SELECT Count ( * ) FROM Customers_Cards AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Accounts AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.",
        "gold_parse": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
        "query": "SELECT id , name , Porphyria FROM enzyme ORDER BY Porphyria Desc",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_dew_point_f > value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the ids of all distinct customers who made order after some orders that were Cancelled.",
        "gold_parse": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")",
        "query": "SELECT DISTINCT T1.customer_id FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_date < value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > value",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "query": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id and name of the browser that is compatible with the most web accelerators?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "flight_2",
        "question": "Which city and country is the Alton airport at?",
        "gold_parse": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "query": "SELECT City , Country FROM airports WHERE AirportName = value AND Country = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.",
        "correctness": 1,
        "gold_parse": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "customer_deliveries",
        "question": "Find the states which do not have any employee in their record.",
        "gold_parse": "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)",
        "query": "SELECT state_province_county FROM Addresses EXCEPT SELECT state_province_county FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Count the total number of bookings made.",
        "gold_parse": "SELECT count(*) FROM BOOKINGS",
        "query": "SELECT Count ( * ) FROM Ref_Payment_Methods",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, population FROM city WHERE population > 1000000",
        "question": "What cities have a population over 1 million?",
        "correctness": 1,
        "gold_parse": "SELECT city_name, population FROM city WHERE population > 1000000"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;",
        "question": "Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance.",
        "correctness": 1,
        "gold_parse": "SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020",
        "question": "Who are the authors of papers published in 2020 and what are the titles of those papers?",
        "correctness": 1,
        "gold_parse": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020"
    },
    {
        "db_id": "region_building",
        "query": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\"",
        "question": "Return the number of stories for each building in the region named \"Abruzzo\".",
        "correctness": 1,
        "gold_parse": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\""
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)",
        "question": "What are the different contents of boxes for which the value is higher than the average value across all boxes?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)"
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the names of the dogs for which the owner spent more than 1000 for treatment?",
        "gold_parse": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )",
        "query": "SELECT name FROM Dogs WHERE weight > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id",
        "question": "What is the installation date for each ending station on all the trips?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id"
    },
    {
        "db_id": "geography",
        "question": "Which cities are located in the state of Texas?",
        "gold_parse": "",
        "query": "SELECT city_name FROM city WHERE state_name = 'New York';",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Return all the information for each election record.",
        "gold_parse": "SELECT * FROM election",
        "query": "SELECT * FROM county",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "query": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "question": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.",
        "correctness": 1,
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_outcome_description FROM Process_outcomes WHERE process_outcome_code  =  \"working\"",
        "question": "What is the description for the process outcome code working?",
        "correctness": 1,
        "gold_parse": "SELECT process_outcome_description FROM Process_outcomes WHERE process_outcome_code  =  \"working\""
    },
    {
        "db_id": "movie_2",
        "query": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'",
        "question": "What movie is playing at both the Odeon and Imperial theater?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'"
    },
    {
        "db_id": "wrestler",
        "question": "What are the times of elimination for wrestlers with over 50 days held?",
        "gold_parse": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50",
        "query": "SELECT Reign FROM wrestler WHERE Days_held > value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name, COUNT(*) FROM Properties GROUP BY property_type_code;",
        "question": "How many properties are there in each type?",
        "correctness": 1,
        "gold_parse": "SELECT property_name, COUNT(*) FROM Properties GROUP BY property_type_code;"
    },
    {
        "db_id": "loan_1",
        "question": "Which state has the greatest total number of bank customers?",
        "gold_parse": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "query": "SELECT T1.state FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T2.state ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements",
        "question": "Return the sum and average of all settlement amounts.",
        "correctness": 1,
        "gold_parse": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
        "question": "Give the name of the department with the lowest budget.",
        "correctness": 1,
        "gold_parse": "SELECT dept_name FROM department ORDER BY budget LIMIT 1"
    },
    {
        "db_id": "music_1",
        "question": "For each file format, return the number of artists who released songs in that format.",
        "gold_parse": "SELECT count(*) ,  formats FROM files GROUP BY formats",
        "query": "SELECT artist_name , Count ( * ) FROM files GROUP BY artist_name",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "query": "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.problem_id > value GROUP BY T1.product_id",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT gender ,  count(*) FROM Customers GROUP BY gender",
        "question": "Show the number of customers for each gender.",
        "correctness": 1,
        "gold_parse": "SELECT gender ,  count(*) FROM Customers GROUP BY gender"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1",
        "question": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?",
        "correctness": 1,
        "gold_parse": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1"
    },
    {
        "db_id": "world_1",
        "question": "Return the names of the 3 most populated countries.",
        "gold_parse": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "query": "SELECT Name FROM city ORDER BY Population Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
        "question": "What is the id of the candidate who most recently accessed the course?",
        "correctness": 1,
        "gold_parse": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'",
        "question": "Find the number of different locations where Rocks are stored.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'"
    },
    {
        "db_id": "country_language",
        "query": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id GROUP BY T3.id ORDER BY avg(T1.overall_score) DESC",
        "question": "What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id GROUP BY T3.id ORDER BY avg(T1.overall_score) DESC"
    },
    {
        "db_id": "election",
        "query": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District",
        "question": "Show the delegates and the names of county they belong to.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "gold_parse": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "query": "SELECT course_name FROM Courses",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "query": "SELECT DISTINCT semester FROM course_offering;",
        "question": "What are the different semesters in which courses are offered?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT semester FROM course_offering;"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;",
        "question": "What kind of decor has the least number of reservations?",
        "correctness": 1,
        "gold_parse": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code",
        "question": "What are the different card types, and how many cards are there of each?",
        "correctness": 1,
        "gold_parse": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(DISTINCT Citizenship) FROM singer;",
        "question": "How many different citizenships are there among the singers?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Citizenship) FROM singer;"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\"",
        "question": "List all the distinct student answer texts to which comments \"Normal\" were given?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\""
    },
    {
        "db_id": "bike_1",
        "question": "Find all the zip codes in which the max dew point have never reached 70.",
        "gold_parse": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70",
        "query": "SELECT zip_code FROM weather WHERE zip_code NOT IN ( SELECT zip_code FROM weather )",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is Nancy Edwards's address?",
        "gold_parse": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "query": "SELECT address FROM customers WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "What is the duration of the oldest actor?",
        "gold_parse": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
        "query": "SELECT Duration FROM actor ORDER BY age Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the first names and department numbers for employees with last name McEwen?",
        "gold_parse": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'",
        "query": "SELECT T2.FIRST_NAME , T1.DEPARTMENT_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.LAST_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.address , T2.city , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the names and opening hours of the tourist attractions that we get to by bus or walk.",
        "gold_parse": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"",
        "query": "SELECT T2.Name , T2.Opening_Hours FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Location_Name = value OR T1.Location_Name = value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.",
        "gold_parse": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2",
        "query": "SELECT roomName , decor FROM Rooms WHERE basePrice > value AND basePrice > value",
        "correctness": 0
    },
    {
        "db_id": "car_racing",
        "query": "SELECT count(*) FROM driver",
        "question": "Find the total number of drivers.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM driver"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.title FROM Books_Order AS T1 JOIN Book AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the book title corresponding to the book with the most number of orders.",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Books_Order AS T1 JOIN Book AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "book_1",
        "query": "SELECT saleprice FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\"",
        "question": "Return the sale prices of books authored by Plato.",
        "correctness": 1,
        "gold_parse": "SELECT saleprice FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\""
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , min_temperature_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.",
        "gold_parse": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "query": "SELECT invoice_number FROM Invoices WHERE invoice_date > = value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "List the clubs having \"Davis Steven\" as a member.",
        "gold_parse": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"",
        "query": "SELECT T2.ClubName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T1.Fname = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "gold_parse": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent",
        "query": "SELECT Continent , Count ( * ) FROM continents GROUP BY Continent",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "query": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "question": "Find the average rating star for each movie that received at least 2 ratings.",
        "correctness": 1,
        "gold_parse": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2"
    },
    {
        "db_id": "flight_4",
        "question": "List the cities which have more than 2 airports sorted by the number of airports.",
        "gold_parse": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
        "query": "SELECT city FROM airports GROUP BY city ORDER BY Count ( * ) Asc",
        "correctness": 0
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name",
        "question": "Find the max age for each group of pilots with the same name.",
        "correctness": 1,
        "gold_parse": "SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name"
    },
    {
        "db_id": "match_season",
        "query": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "question": "What are the official native languages that contain the string \"English\".",
        "correctness": 1,
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\""
    },
    {
        "db_id": "planet_1",
        "query": "SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;",
        "question": "Which packages have weight between 10 and 30? List the package number and weight.",
        "correctness": 1,
        "gold_parse": "SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;"
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1",
        "question": "Find the name of the user who has the largest number of followers.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150",
        "question": "Find all the countries where some drivers have points above 150.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
        "question": "What is the average number of rooms of apartments with type code \"Studio\"?",
        "correctness": 1,
        "gold_parse": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\""
    },
    {
        "db_id": "geography",
        "question": "Which mountains are higher than 2000 meters?",
        "gold_parse": "",
        "query": "SELECT mountain_name FROM mountain WHERE mountain_altitude < 500;",
        "correctness": 0
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC",
        "question": "Show the vehicle name with a descending order of total hours of renting.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC"
    },
    {
        "db_id": "cinema",
        "query": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION",
        "question": "Show each location and the number of cinemas there.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION"
    },
    {
        "db_id": "club_1",
        "question": "How many members of \"Bootup Baltimore\" are older than 18?",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND Age > value",
        "correctness": 0
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT lname FROM authors ORDER BY lname",
        "question": "Give me a list of all the last names of authors sorted in alphabetical order",
        "correctness": 1,
        "gold_parse": "SELECT lname FROM authors ORDER BY lname"
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the addresses and phones of all the buildings managed by \"Brenden\".",
        "gold_parse": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"",
        "query": "SELECT building_address , building_phone FROM Apartment_Buildings WHERE building_short_name = value",
        "correctness": 0
    },
    {
        "db_id": "party_people",
        "query": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the name of the party with the most members.",
        "correctness": 1,
        "gold_parse": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "singer",
        "question": "What are the titles of songs sung by singers who have a net worth less than 20 million dollars?",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Singer_ID IN (SELECT Singer_ID FROM singer WHERE Net_Worth_Millions < 20);",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the ids for all the students who participate in an activity and are under 20.",
        "gold_parse": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20",
        "query": "SELECT StuID FROM Student WHERE Age = value INTERSECT SELECT StuID FROM Student WHERE Age = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "gold_parse": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "query": "SELECT first_name , last_name , email_address FROM Owners WHERE first_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
        "query": "SELECT T1.Campus FROM Campuses AS T1 JOIN faculty AS T2 ON T1.Id = T2.Campus WHERE T1.County = value AND T2.Year < value AND T2.Year > value",
        "correctness": 0
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT agency_id ,  count(*) FROM Clients GROUP BY agency_id",
        "question": "How many clients does each agency have?",
        "correctness": 1,
        "gold_parse": "SELECT agency_id ,  count(*) FROM Clients GROUP BY agency_id"
    },
    {
        "db_id": "tvshow",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "gold_parse": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "query": "SELECT Hight_definition_TV , Country FROM TV_Channel WHERE Language ! = value",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT T2.Music_Festival , T1.Song FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the city name, id, and number of addresses corresponding to the city with the most addressed?",
        "correctness": 1,
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT payment_method_code ) FROM Ref_Payment_Methods WHERE payment_method_description = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What is the number of departments in Division \"AS\"?",
        "gold_parse": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"",
        "query": "SELECT Count ( DISTINCT DName ) FROM Department WHERE Division = value",
        "correctness": 0
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT avg(T2.rhythm_tempo) ,  T1.language FROM songs AS T1 JOIN performance_score AS T2 ON T2.songs_id  =  T1.id GROUP BY T1.language",
        "question": "What are the average rhythm scores for the songs in each different language?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.rhythm_tempo) ,  T1.language FROM songs AS T1 JOIN performance_score AS T2 ON T2.songs_id  =  T1.id GROUP BY T1.language"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')",
        "question": "What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')"
    },
    {
        "db_id": "department_management",
        "question": "List the name, born state and age of the heads of departments ordered by age.",
        "gold_parse": "SELECT name ,  born_state ,  age FROM head ORDER BY age",
        "query": "SELECT T1.Name , T2.born_state , T2.age FROM department AS T1 JOIN head AS T2 JOIN management AS T3 ON T1.Department_ID = T3.department_ID AND T3.head_ID = T2.head_ID ORDER BY T2.age Asc",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which states, located outside the USA, have Sacramento as their capital?",
        "gold_parse": "",
        "query": "SELECT state_name FROM state WHERE capital = 'Sacramento' AND country_name = 'USA';",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "How many camera lenses have a focal length longer than 15 mm?",
        "gold_parse": "SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  15",
        "query": "SELECT Count ( * ) FROM camera_lens WHERE max_aperture > value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Calculate the average room count for properties with the first shop feature marked as 'Yes'.",
        "gold_parse": "",
        "query": "SELECT property_address, AVG(room_count) FROM Properties WHERE shp_feature_1 = 'Yes';",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?",
        "gold_parse": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "query": "SELECT T2.Name FROM Physician AS T1 JOIN Procedures AS T2 JOIN Trained_In AS T3 ON T1.EmployeeID = T3.Physician AND T3.Treatment = T2.Code WHERE T1.Name = value EXCEPT SELECT T2.Name FROM Procedures AS T2 WHERE T2.Cost > value",
        "correctness": 0
    },
    {
        "db_id": "address_1",
        "query": "SELECT city_name FROM City WHERE country  =  \"USA\" ORDER BY latitude",
        "question": "Show names for all USA city ordered by latitude.",
        "correctness": 1,
        "gold_parse": "SELECT city_name FROM City WHERE country  =  \"USA\" ORDER BY latitude"
    },
    {
        "db_id": "journal_committee",
        "query": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2",
        "question": "Show the names of editors that are on at least two journal committees.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "hospital_1",
        "question": "What are the unique block codes that have available rooms?",
        "gold_parse": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0",
        "query": "SELECT DISTINCT BlockCode FROM Room",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
        "question": "Which artist does the album \"Balls to the Wall\" belong to?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\""
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT Name FROM customer WHERE Nationality  =  \"England\" OR Nationality  =  \"Australia\"",
        "question": "Which customers have nationality \"England\" or \"Australia\"? Give me their names.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM customer WHERE Nationality  =  \"England\" OR Nationality  =  \"Australia\""
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)",
        "question": "How many events did not have any participants?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT name ,  age FROM Sailors ORDER BY rating DESC",
        "question": "What are the names and ages of all sailors sorted by decreasing rating?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age FROM Sailors ORDER BY rating DESC"
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who have the minimum grade?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade = (SELECT MIN(grade) FROM Highschooler);",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What is the average gradepoint for students with the last name Smith?",
        "gold_parse": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"",
        "query": "SELECT Avg ( Age ) FROM Student WHERE LName = value",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)",
        "question": "What are the names of the technicians that have not been assigned to repair machines?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)"
    },
    {
        "db_id": "race_track",
        "query": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id",
        "question": "What are the names of different tracks, and how many races has each had?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id"
    },
    {
        "db_id": "machine_repair",
        "question": "How many technicians are there?",
        "gold_parse": "SELECT count(*) FROM technician",
        "query": "SELECT Count ( * ) FROM repair",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.",
        "gold_parse": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20",
        "query": "SELECT LName FROM Student WHERE city_code = value OR Age < value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show names for all aircraft with at least two flights.",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "query": "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "How many singers are there in total?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM singer GROUP BY Age;",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the name of each county along with the corresponding number of delegates from that county.",
        "gold_parse": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
        "query": "SELECT County_name , Count ( * ) FROM county GROUP BY County_name",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "What are the names of all the stores located in Khanewal District?",
        "gold_parse": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"",
        "query": "SELECT District_name FROM district WHERE Headquartered_City = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of products with the 'hot' charactersitic.",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS t1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "question": "What are the names of products that have not been ordered?",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS t1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id"
    },
    {
        "db_id": "soccer_2",
        "question": "How many schools have some students playing in goalie and mid positions.",
        "gold_parse": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')",
        "query": "SELECT Count ( DISTINCT T2.cName ) FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T1.pName = value AND T2.pPos = value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "query": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10",
        "question": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.",
        "correctness": 1,
        "gold_parse": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)",
        "question": "What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Model FROM model_list WHERE Model LIKE 'C%';",
        "question": "List the models of cars that start with 'C'.",
        "correctness": 1,
        "gold_parse": "SELECT Model FROM model_list WHERE Model LIKE 'C%';"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\".",
        "gold_parse": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"",
        "query": "SELECT T2.Employee_ID FROM Roles AS T1 JOIN Employees AS T2 ON T1.Role_Code = T2.Role_Code WHERE T1.Role_Name = value",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "query": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the manager with the most gas stations that opened after 2000?",
        "correctness": 1,
        "gold_parse": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT count(*) FROM paintings WHERE LOCATION  =  \"Gallery 240\"",
        "question": "What is the total number of paintings exhibited in gallery 240?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM paintings WHERE LOCATION  =  \"Gallery 240\""
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'",
        "question": "Find the name of the storm that affected both Afghanistan and Albania regions.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'"
    },
    {
        "db_id": "flight_1",
        "question": "What are the numbers of the shortest flights?",
        "gold_parse": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
        "query": "SELECT distance FROM flight ORDER BY distance Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
        "question": "What are the names of the staff members who have been both a speaker and a sponsor at some conference?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)",
        "question": "What are the distinct ids and prices for goods that cost less than the average good?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)"
    },
    {
        "db_id": "department_management",
        "query": "SELECT name ,  born_state ,  age FROM head ORDER BY age",
        "question": "List the name, born state and age of the heads of departments ordered by age.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  born_state ,  age FROM head ORDER BY age"
    },
    {
        "db_id": "poker_player",
        "question": "Return the names of all the poker players.",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "query": "select Name from people",
        "correctness": 0
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3",
        "question": "For all products sold more than 3 times, what are their ids and descriptions?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Earnings FROM player WHERE Country  =  \"Australia\" OR Country  =  \"Zimbabwe\"",
        "question": "Show the earnings of players from country \"Australia\" or \"Zimbabwe\".",
        "correctness": 1,
        "gold_parse": "SELECT Earnings FROM player WHERE Country  =  \"Australia\" OR Country  =  \"Zimbabwe\""
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "question": "Find all the catalog publishers whose name contains \"Murray\"",
        "correctness": 1,
        "gold_parse": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\""
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name, last_name, date_first_registered FROM Students WHERE date_first_registered < '2020-01-01';",
        "question": "What are the first and last names, and registration dates of students who registered before 2020?",
        "correctness": 1,
        "gold_parse": "SELECT first_name, last_name, date_first_registered FROM Students WHERE date_first_registered < '2020-01-01';"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT max(rating) FROM Sailors",
        "question": "What is highest rating between sailors?",
        "correctness": 1,
        "gold_parse": "SELECT max(rating) FROM Sailors"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000",
        "question": "Show all home conferences with average enrollment of universities above 2000.",
        "correctness": 1,
        "gold_parse": "SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000"
    },
    {
        "db_id": "world_1",
        "question": "What is the total number of languages used in Aruba?",
        "gold_parse": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "query": "SELECT Count ( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = value",
        "correctness": 0
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2",
        "question": "Please show the names and ages of the drivers who participated in at least two races.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location name for document \"Robin CV\".",
        "gold_parse": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"",
        "query": "SELECT Location_Name FROM Ref_Locations WHERE Location_Name = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Max ( price_in_pounds ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)",
        "question": "List the ids of all paintings that are taller than the longest painting created after 1900.",
        "correctness": 1,
        "gold_parse": "SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)"
    },
    {
        "db_id": "music_4",
        "question": "Return names of songs in volumes that are by artists that are at least 32 years old.",
        "gold_parse": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32",
        "query": "SELECT Famous_Title FROM artist WHERE Age > = value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many fault status codes are recorded in the fault log parts table?",
        "gold_parse": "SELECT DISTINCT fault_status FROM Fault_Log_Parts",
        "query": "SELECT Count ( * ) FROM Engineer_Visits WHERE fault_status = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.",
        "gold_parse": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8",
        "query": "SELECT billing_country , total FROM invoices WHERE total = ( SELECT Max ( total ) FROM invoices )",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1",
        "question": "What is the latitude, longitude, city of the station from which the shortest trip started?",
        "correctness": 1,
        "gold_parse": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of address IDs for each semester description?",
        "gold_parse": "",
        "query": "SELECT semester_description, SUM(address_id) FROM Semesters JOIN Addresses ON Semesters.semester_id = Addresses.address_id;",
        "correctness": 0
    },
    {
        "db_id": "art_1",
        "query": "SELECT count(*) ,  medium FROM paintings GROUP BY medium",
        "question": "How many works are there in each medium?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  medium FROM paintings GROUP BY medium"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_buying_price , typical_selling_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id HAVING count(*)  >=  2;",
        "question": "What are the last names and ids of users who have searched two or fewer times, and own two or more properties?",
        "correctness": 1,
        "gold_parse": "SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id HAVING count(*)  >=  2;"
    },
    {
        "db_id": "customer_complaints",
        "question": "List the name of all products along with the number of complaints that they have received.",
        "gold_parse": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name",
        "query": "SELECT T1.product_name , Count ( * ) FROM Products AS T1 JOIN Complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "query": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id",
        "question": "What are the names and dates of races, and the names of the tracks where they are held?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id"
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year = 2021",
        "question": "What papers were published in the year 2021?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year = 2021"
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT painterID FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 240\"",
        "question": "Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT painterID FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 240\""
    },
    {
        "db_id": "scholar",
        "query": "SELECT paperid FROM paperfield;",
        "question": "What are the paper IDs associated with fields?",
        "correctness": 1,
        "gold_parse": "SELECT paperid FROM paperfield;"
    },
    {
        "db_id": "musical",
        "question": "Please show the nominee who has been nominated the greatest number of times.",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Award FROM musical GROUP BY Award ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the name corresponding to the accoung with the lowest sum of checking and savings balances?",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
        "query": "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid < 10;",
        "question": "What are the names of journals with journal IDs less than 10?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid < 10;"
    },
    {
        "db_id": "scholar",
        "question": "What are the titles of papers and their field IDs ordered by the field ID in ascending order?",
        "gold_parse": "",
        "query": "SELECT title, fieldid FROM paper JOIN paperfield ON paper.paperid = paperfield.paperid ORDER BY fieldid ASC;",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the first and last names of the artist who perfomed the song \"Badlands\"?",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype",
        "question": "What are the allergy types and how many allergies correspond to each one?",
        "correctness": 1,
        "gold_parse": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What is the project id and detail for the project with at least two documents?",
        "gold_parse": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2",
        "query": "SELECT Project_ID , Project_Details FROM Projects GROUP BY Project_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire data, salary and department id for employees without the letter M in their first name, ordered by ascending department id?",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T2.SALARY FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME ! = value ORDER BY T2.EMPLOYEE_ID Asc",
        "correctness": 0
    },
    {
        "db_id": "boat_1",
        "query": "SELECT DISTINCT bid FROM Reserves",
        "question": "What are the ids of all boats that are reserved by someone?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT bid FROM Reserves"
    },
    {
        "db_id": "sakila_1",
        "question": "Which language does the film AIRPORT POLLOCK use? List the language name.",
        "gold_parse": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'",
        "query": "SELECT name FROM language WHERE name = value",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "query": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"Republican\"",
        "question": "What is the average number of votes of representatives from party \"Republican\"?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"Republican\""
    },
    {
        "db_id": "party_host",
        "query": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)",
        "question": "List the names of hosts who did not serve as a host of any party in our record.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id IN (SELECT Id FROM car_makers WHERE FullName = 'Nissan');",
        "question": "What are the full names of car makers that have the same name as 'Nissan'?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id IN (SELECT Id FROM car_makers WHERE FullName = 'Nissan');"
    },
    {
        "db_id": "world_1",
        "question": "How many continents speak Chinese?",
        "gold_parse": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "query": "SELECT Count ( * ) FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000.",
        "gold_parse": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000",
        "query": "SELECT Sum ( Population ) , Avg ( Continent ) FROM country WHERE SurfaceArea > value",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"",
        "question": "What are the type codes of the policies used by the customer \"Dayana Robel\"?",
        "correctness": 1,
        "gold_parse": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\""
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT * FROM discount",
        "question": "Show all information for all discounts.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM discount"
    },
    {
        "db_id": "book_press",
        "query": "SELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Who wrote the largest number of books? Give me the author name and gender.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards",
        "question": "Show ids, customer ids, card type codes, card numbers for all cards.",
        "correctness": 1,
        "gold_parse": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards"
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'",
        "question": "How many rooms does the Lamberton building have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'"
    },
    {
        "db_id": "school_finance",
        "question": "How many budget record has a budget amount smaller than the invested amount?",
        "gold_parse": "SELECT count(*) FROM budget WHERE budgeted  <  invested",
        "query": "SELECT Count ( * ) FROM budget WHERE total_budget_percent_budgeted < value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts",
        "question": "What are the customer ids for customers who do not have an account?",
        "correctness": 1,
        "gold_parse": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "Find the texts of assessment notes for teachers with last name \"Schuster\".",
        "gold_parse": "SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schuster\"",
        "query": "SELECT T2.detention_summary FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.last_name = value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Entrepreneur_ID FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the average room count of the apartments that have booking status code \"Provisional\".",
        "gold_parse": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"",
        "query": "SELECT Avg ( T1.bathroom_count ) FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = value",
        "correctness": 0
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'",
        "question": "Count the number of drivers who have raced in NASCAR.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "question": "Show names for all aircraft with at least two flights.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2"
    },
    {
        "db_id": "tracking_orders",
        "question": "What are the distinct ids of products ordered between 1975-01-01 and 1976-01-01??",
        "gold_parse": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"",
        "query": "SELECT DISTINCT product_id FROM Order_Items WHERE order_id BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4",
        "question": "Find the policy type used by more than 4 customers.",
        "correctness": 1,
        "gold_parse": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1",
        "question": "Find the name of instructors who are advising more than one student.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1"
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "Find the average ram mib size of the chip models that are never used by any phone.",
        "gold_parse": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)",
        "query": "SELECT Avg ( T1.Hardware_colours ) FROM screen_mode AS T1 WHERE T1.Hardware_colours NOT IN ( SELECT T2.chip_model FROM phone AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT guest_first_name ,  guest_last_name FROM Guests",
        "question": "What are the first names and last names of all the guests?",
        "correctness": 1,
        "gold_parse": "SELECT guest_first_name ,  guest_last_name FROM Guests"
    },
    {
        "db_id": "party_people",
        "query": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1",
        "question": "Return the minister who left office at the latest time.",
        "correctness": 1,
        "gold_parse": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1"
    },
    {
        "db_id": "sakila_1",
        "question": "Return the title and inventory id of the film that is rented most often.",
        "gold_parse": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT title , film_id FROM film GROUP BY film_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "riding_club",
        "query": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common occupation of players.",
        "correctness": 1,
        "gold_parse": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT client_id ,  count(*) FROM Invoices GROUP BY client_id",
        "question": "Show all client ids and the number of invoices for each client.",
        "correctness": 1,
        "gold_parse": "SELECT client_id ,  count(*) FROM Invoices GROUP BY client_id"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)",
        "question": "Find the number of authors who did not publish any paper that is cited more than 50 times.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(*) ,  teacher_id FROM Classes GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1",
        "question": "How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  teacher_id FROM Classes GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "student_assessment",
        "question": "What are the first and last names of all the candidates?",
        "gold_parse": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
        "query": "SELECT first_name , last_name FROM People",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "question": "How many customers do not have an account?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)"
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the names of products with price at most 200?",
        "gold_parse": "SELECT name FROM products WHERE price  <=  200",
        "query": "SELECT Name FROM Products WHERE Price > value",
        "correctness": 0
    },
    {
        "db_id": "book_1",
        "query": "SELECT T3.name FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T1.title  =  \"Pride and Prejudice\"",
        "question": "Who is the author of the book \"Pride and Prejudice\"?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T1.title  =  \"Pride and Prejudice\""
    },
    {
        "db_id": "book_1",
        "query": "SELECT T3.name FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN Book AS T4 ON T4.isbn  =  T2.isbn WHERE T4.title  =  \"Pride and Prejudice\"",
        "question": "What are the names of clients who have ordered Pride and Prejudice?",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN Book AS T4 ON T4.isbn  =  T2.isbn WHERE T4.title  =  \"Pride and Prejudice\""
    },
    {
        "db_id": "entertainment_awards",
        "question": "Show the number of audience in year 2008 or 2010.",
        "gold_parse": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010",
        "query": "SELECT Count ( * ) FROM festival_detail WHERE Year = value OR Year = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "gold_parse": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "query": "SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = value",
        "correctness": 0
    },
    {
        "db_id": "art_1",
        "query": "SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR ORDER BY YEAR",
        "question": "What are the maximum height and width of paintings for each year?",
        "correctness": 1,
        "gold_parse": "SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR ORDER BY YEAR"
    },
    {
        "db_id": "conference",
        "query": "SELECT T1.Institution_Name ,  T1.location FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.staff_id NOT IN (SELECT T4.staff_id FROM Conference AS T3 JOIN Conference_participation AS T4 ON T3.conference_id  =  T4.conference_id WHERE T3.year  =  2004)",
        "question": "What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Institution_Name ,  T1.location FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.staff_id NOT IN (SELECT T4.staff_id FROM Conference AS T3 JOIN Conference_participation AS T4 ON T3.conference_id  =  T4.conference_id WHERE T3.year  =  2004)"
    },
    {
        "db_id": "imdb",
        "query": "SELECT P.name, M.title FROM producer AS P JOIN made_by AS MB ON P.pid = MB.pid JOIN movie AS M ON MB.msid = M.mid;",
        "question": "What are the names of producers and the titles of the movies they produced?",
        "correctness": 1,
        "gold_parse": "SELECT P.name, M.title FROM producer AS P JOIN made_by AS MB ON P.pid = MB.pid JOIN movie AS M ON MB.msid = M.mid;"
    },
    {
        "db_id": "wrestler",
        "question": "List the time of elimination of the wrestlers with largest days held.",
        "gold_parse": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1",
        "query": "SELECT Days_held FROM wrestler GROUP BY Days_held ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "How many records are there for each country in car makers?",
        "gold_parse": "",
        "query": "SELECT Country, COUNT(*) FROM car_makers GROUP BY Country;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Which continent is Anguilla in?",
        "gold_parse": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "query": "SELECT Continent FROM country WHERE LocalName = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < value OR T1.MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "country_language",
        "query": "SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.name",
        "question": "What are the names of the different official languages, as well as the number of countries that speak each?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.name"
    },
    {
        "db_id": "soccer_1",
        "question": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?",
        "gold_parse": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot",
        "query": "SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.overall_rating > value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "gold_parse": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'",
        "query": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Weight > value EXCEPT SELECT T1.Model FROM car_makers AS T4 JOIN model_list AS T1 ON T4.Id = T1.Maker WHERE T4.Maker = value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "List the branch name and city without any registered members.",
        "gold_parse": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)",
        "query": "SELECT Name , City FROM branch EXCEPT SELECT Name , City FROM branch",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Find the name and gender of the candidate who got the highest support rate.",
        "gold_parse": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "query": "SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Unsure_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE \"%Mother\";",
        "question": "What are the age categories for users whose description contains the string Mother?",
        "correctness": 1,
        "gold_parse": "SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE \"%Mother\";"
    },
    {
        "db_id": "city_record",
        "question": "What is the match id of the competition called \"1994 FIFA World Cup qualification\"?",
        "gold_parse": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"",
        "query": "SELECT Match_ID FROM match WHERE Score = value AND Competition = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is draft detail of the document with id 7?",
        "gold_parse": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7",
        "query": "SELECT T1.address_details FROM Addresses AS T1 JOIN Documents_Mailed AS T2 ON T1.address_id = T2.mailed_to_address_id WHERE T2.document_id = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT AVG(grade) FROM Highschooler;",
        "question": "What is the average grade of highschoolers?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(grade) FROM Highschooler;"
    },
    {
        "db_id": "college_2",
        "question": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?",
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000",
        "query": "SELECT name FROM instructor WHERE salary > value",
        "correctness": 0
    },
    {
        "db_id": "aan_1",
        "query": "SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)",
        "question": "What are the ids and titles for papers that have never been cited?",
        "correctness": 1,
        "gold_parse": "SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)"
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT count(*) FROM bike WHERE weight  >  780",
        "question": "How many bikes are heavier than 780 grams?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM bike WHERE weight  >  780"
    },
    {
        "db_id": "geography",
        "question": "List states that do not have cities with more than 100,000 inhabitants.",
        "gold_parse": "",
        "query": "SELECT DISTINCT state_name FROM city WHERE population > 100000;",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "query": "SELECT T1.Airline FROM airlines AS T1 WHERE T1.Country = value EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value",
        "correctness": 0
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cookie\" ORDER BY price LIMIT 1",
        "question": "What is the cheapest cookie and its flavor?",
        "correctness": 1,
        "gold_parse": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cookie\" ORDER BY price LIMIT 1"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Ransom'",
        "question": "What is the collection name of a document owned by 'Ransom'?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Ransom'"
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "query": "SELECT T1.City FROM city AS T1 WHERE T1.GDP > value EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_euros ) , Max ( price_in_euros ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "How many staff in total?",
        "gold_parse": "SELECT count(*) FROM Staff",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "What are the team and the location of school each player belongs to?",
        "gold_parse": "SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID",
        "query": "SELECT Team , Position FROM player",
        "correctness": 0
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id",
        "question": "WHat are the first and last names, and middle initials of all customers who did not make any orders?",
        "correctness": 1,
        "gold_parse": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id > 5;",
        "question": "What are the full names of car makers with IDs greater than 5?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id > 5;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled > 150;",
        "question": "What are the names of courses with more than 150 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled > 150;"
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"panel\" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"canvas\"",
        "question": "What are the locations that have paintings in the mediums of on panels and on canvas?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"panel\" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"canvas\""
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(DISTINCT plane_name) FROM pilotskills",
        "question": "Count the number of different plane names across all pilots.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT plane_name) FROM pilotskills"
    },
    {
        "db_id": "store_1",
        "question": "What is the title of the album that was released by the artist whose name has the phrase 'Led'?",
        "gold_parse": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'",
        "query": "SELECT T2.title FROM sqlite_sequence AS T1 JOIN albums AS T2 WHERE T1.seq LIKE value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "query": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"",
        "question": "Find the forename and surname of drivers whose nationality is German?",
        "correctness": 1,
        "gold_parse": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\""
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Name;",
        "question": "List the names of countries and the number of languages spoken in them.",
        "correctness": 1,
        "gold_parse": "SELECT Name, COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Name;"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of documents that use the PPT template type.",
        "gold_parse": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "query": "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Which reign is the most common among wrestlers?",
        "gold_parse": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Event FROM wrestler GROUP BY Event ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.",
        "gold_parse": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32",
        "query": "SELECT T2.Accreditation_type , T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year > value AND T1.RAM_MiB > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the different ids and names of the stations that have had more than 12 bikes available?",
        "gold_parse": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12",
        "query": "SELECT T1.id , T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "query": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2",
        "question": "What are the names of storms that did not affect two or more regions?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT T4.FirstName ,  T4.LastName FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber JOIN customers AS T4 ON T3.CustomerId  =  T4.id WHERE T1.flavor  =  \"Apple\" AND T1.food  =  \"Tart\"",
        "question": "What are the full names of customers who bought apple flavored Tarts?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T4.FirstName ,  T4.LastName FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber JOIN customers AS T4 ON T3.CustomerId  =  T4.id WHERE T1.flavor  =  \"Apple\" AND T1.food  =  \"Tart\""
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model ,  CLASS ,  construction FROM headphone ORDER BY price LIMIT 1",
        "question": "Find the model, class, and construction of the headphone with the lowest price.",
        "correctness": 1,
        "gold_parse": "SELECT model ,  CLASS ,  construction FROM headphone ORDER BY price LIMIT 1"
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1",
        "question": "What is the location of the perpetrator with the largest kills.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T2.title FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id GROUP BY T2.paper_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the title of the paper with the most authors.",
        "correctness": 1,
        "gold_parse": "SELECT T2.title FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id GROUP BY T2.paper_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT COUNT(DISTINCT Country) FROM airports;",
        "question": "How many distinct countries have airports?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Country) FROM airports;"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT title FROM papers WHERE title LIKE \"%ML%\"",
        "question": "Find the titles of the papers that contain the word \"ML\".",
        "correctness": 1,
        "gold_parse": "SELECT title FROM papers WHERE title LIKE \"%ML%\""
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of colors that are not used in any products.",
        "gold_parse": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
        "query": "SELECT Count ( * ) FROM Products AS T1 WHERE T1.product_id NOT IN ( SELECT T2.product_id FROM Product_Characteristics AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "address_1",
        "query": "SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" ORDER BY distance DESC LIMIT 1",
        "question": "What is the first name and last name of the student living furthest to Linda Smith?",
        "correctness": 1,
        "gold_parse": "SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" ORDER BY distance DESC LIMIT 1"
    },
    {
        "db_id": "singer",
        "question": "What are the titles and highest positions of songs that have a chart position above the average?",
        "gold_parse": "",
        "query": "SELECT Title, Highest_Position FROM song WHERE Highest_Position < (SELECT Avg(Sales) FROM song);",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the different names of all songs without back vocals?",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
        "query": "SELECT DISTINCT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT DISTINCT T2.SongId FROM Tracklists AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "query": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;",
        "question": "What is the average base price of different bed type? List bed type and average base price.",
        "correctness": 1,
        "gold_parse": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T3.name LIKE \"%Mckeown%\"",
        "question": "What are the titles and paper ids for papers written by Mckeown?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T3.name LIKE \"%Mckeown%\""
    },
    {
        "db_id": "car_1",
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "gold_parse": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat'",
        "query": "SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value UNION SELECT CountryId , CountryName FROM countries GROUP BY CountryId HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What the smallest version number and its template type code?",
        "gold_parse": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "query": "select Version_Number , Template_Type_Code from Templates order by Template_Type_Code asc limit value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Compute the average active time span of contact channels.",
        "gold_parse": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels",
        "query": "SELECT Avg ( active_from_date ) FROM Customer_Contact_Channels",
        "correctness": 0
    },
    {
        "db_id": "boat_1",
        "query": "SELECT AVG(age) FROM Sailors WHERE rating  =  7",
        "question": "What is the average age of sailors whose rating is 7?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(age) FROM Sailors WHERE rating  =  7"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939",
        "question": "Which campus was opened between 1935 and 1939?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939"
    },
    {
        "db_id": "e_government",
        "question": "What is the last name of the contact individual from the Labour party organization who was contacted most recently?",
        "gold_parse": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
        "query": "SELECT T1.individual_last_name FROM Individuals AS T1 JOIN Organization_Contact_Individuals AS T2 ON T1.individual_id = T2.individual_id ORDER BY T2.date_contact_to Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM languages ORDER BY name ASC",
        "question": "What are the names of languages, in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM languages ORDER BY name ASC"
    },
    {
        "db_id": "network_1",
        "query": "SELECT COUNT(DISTINCT name) FROM Highschooler;",
        "question": "How many distinct highschooler names are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT name) FROM Highschooler;"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT count(DISTINCT eid) FROM Certificate",
        "question": "What is the count of distinct employees with certificates?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT eid) FROM Certificate"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade > (SELECT AVG(grade) FROM Highschooler);",
        "question": "What are the names of highschoolers who are in grades above the average?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE grade > (SELECT AVG(grade) FROM Highschooler);"
    },
    {
        "db_id": "match_season",
        "question": "Count the number of different official languages corresponding to countries that players who play Defender are from.",
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "query": "SELECT Count ( DISTINCT Official_native_language ) FROM country",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "How many medicines have the FDA approval status 'No' ?",
        "gold_parse": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
        "query": "SELECT Count ( * ) FROM enzyme WHERE Porphyria = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",
        "question": "Show the order ids and the number of items in each order.",
        "correctness": 1,
        "gold_parse": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id"
    },
    {
        "db_id": "pets_1",
        "question": "Find the number of pets whose weight is heavier than 10.",
        "gold_parse": "SELECT count(*) FROM pets WHERE weight  >  10",
        "query": "SELECT Count ( * ) FROM Pets WHERE pet_age > value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name FROM state WHERE population < 1000000;",
        "question": "Which states have a population less than 1,000,000?",
        "correctness": 1,
        "gold_parse": "SELECT state_name FROM state WHERE population < 1000000;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Which department offers the most number of degrees? List department name and id.",
        "gold_parse": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT department_name , department_id FROM Departments GROUP BY department_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names and vendor requested prices of properties that have a requested price below the average selling price?",
        "gold_parse": "",
        "query": "SELECT property_name, vendor_requested_price FROM Properties WHERE vendor_requested_price < (SELECT Avg(agreed_selling_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "Which states have an area greater than 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "phone_1",
        "question": "What are the chip model and screen mode of the phone with hardware model name \"LG-P760\"?",
        "gold_parse": "SELECT chip_model ,  screen_mode FROM phone WHERE Hardware_Model_name = \"LG-P760\"",
        "query": "SELECT T1.Hardware_colours , T1.Char_cells FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Company_name = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are all the friends of Alice who are female?",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'",
        "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.job = value AND T1.gender = value",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_selling_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT Name FROM customer ORDER BY Level_of_Membership ASC",
        "question": "Sort all the customers by the level of membership in ascending order, and return the customer names.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM customer ORDER BY Level_of_Membership ASC"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" OR T4.Collection_Name = \"Best\";",
        "question": "What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" OR T4.Collection_Name = \"Best\";"
    },
    {
        "db_id": "hr_1",
        "query": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'",
        "question": "display all the details from Employees table for those employees who was hired before 2002-06-21.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'"
    },
    {
        "db_id": "network_2",
        "question": "What is the name and age of every male? Order the results by age.",
        "gold_parse": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age",
        "query": "SELECT name , age FROM Person ORDER BY age Asc",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are all the makers and models?",
        "gold_parse": "SELECT Maker ,  Model FROM MODEL_LIST",
        "query": "SELECT Maker FROM car_makers",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that are offices?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE property_type_code = 'OFF';",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?",
        "gold_parse": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'",
        "query": "SELECT T1.Product , T1.Chromosome , T2.interaction_type FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T1.Location = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of all races held after 2000 in Spain?",
        "gold_parse": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
        "query": "SELECT country FROM circuits WHERE lat > value AND circuitRef > value",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "query": "SELECT Title FROM song WHERE Highest_Position < 10;",
        "question": "What are the titles of songs that have reached a position less than 10?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM song WHERE Highest_Position < 10;"
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the average prices of products for each manufacturer?",
        "gold_parse": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
        "query": "SELECT Avg ( Price ) , Manufacturer FROM Products GROUP BY Manufacturer",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"",
        "question": "Show names of actors that have appeared in musical with name \"The Phantom of the Opera\".",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\""
    },
    {
        "db_id": "real_estate_properties",
        "question": "Show the feature types and property types for all properties.",
        "gold_parse": "",
        "query": "SELECT T1.feature_type_code, T2.property_type_code FROM Ref_Feature_Types AS T1 JOIN Properties AS T2 ON T1.feature_type_code = T2.property_type_code;",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Which product's detail contains the word \"Latte\" or \"Americano\"? Return the full detail.",
        "gold_parse": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"",
        "query": "SELECT product_details FROM Products WHERE product_details = value OR product_details = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT DISTINCT name FROM  instructor ORDER BY name",
        "question": "List in alphabetic order the names of all distinct instructors.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT name FROM  instructor ORDER BY name"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1",
        "question": "List the dates of the orders which were placed at the earliest time or have more than 1 items.",
        "correctness": 1,
        "gold_parse": "SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1"
    },
    {
        "db_id": "scholar",
        "query": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10",
        "question": "What datasets are associated with paper 10?",
        "correctness": 1,
        "gold_parse": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of section IDs for each student's registration date?",
        "gold_parse": "",
        "query": "SELECT date_first_registered, SUM(section_id) FROM Students JOIN Sections ON Students.student_id = Sections.section_id;",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which staff have contacted which engineers? List the staff name and the engineer first name and last name.",
        "gold_parse": "SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id",
        "query": "SELECT first_name , last_name FROM Maintenance_Engineers",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "query": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;",
        "question": "What is the average minimum and price of the rooms for each different decor.",
        "correctness": 1,
        "gold_parse": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
        "question": "What are the different reviewer names, movie titles, and stars for every rating where the reviewer had the same name as the director?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of courses that have a section starting with 'A'?",
        "gold_parse": "",
        "query": "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Sections WHERE section_name LIKE 'A%');",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'",
        "question": "What are the names and results of battles between 1900 and 1950?",
        "correctness": 1,
        "gold_parse": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T3.name FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN Book AS T4 ON T4.isbn  =  T2.isbn WHERE T4.title  =  \"Pride and Prejudice\"",
        "question": "Show all client names who have orders for \"Pride and Prejudice\".",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN Book AS T4 ON T4.isbn  =  T2.isbn WHERE T4.title  =  \"Pride and Prejudice\""
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > = value AND T1.MAX_SALARY < = value",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Team ,  Starting_Year FROM technician",
        "question": "What are the team and starting year of technicians?",
        "correctness": 1,
        "gold_parse": "SELECT Team ,  Starting_Year FROM technician"
    },
    {
        "db_id": "railway",
        "question": "Show the countries that have managers of age above 50 or below 46.",
        "gold_parse": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46",
        "query": "SELECT Country FROM manager WHERE Age > value OR Manager_ID = value",
        "correctness": 0
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
        "question": "Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.",
        "correctness": 1,
        "gold_parse": "SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id"
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT staff_role_description FROM Ref_staff_roles WHERE staff_role_code  =  \"HR\"",
        "question": "What is the description for staff role code HR?",
        "correctness": 1,
        "gold_parse": "SELECT staff_role_description FROM Ref_staff_roles WHERE staff_role_code  =  \"HR\""
    },
    {
        "db_id": "imdb",
        "question": "Which movies do not have an alternate title?",
        "gold_parse": "",
        "query": "SELECT title FROM movie WHERE title_aka IS NULL AND budget IS NULL;",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What are the maximum and minimum number of silver medals for clubs.",
        "gold_parse": "SELECT max(Silver) ,  min(Silver) FROM club_rank",
        "query": "SELECT Max ( Silver ) , Min ( Gold ) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "What are all the distinct asset models?",
        "gold_parse": "SELECT DISTINCT asset_model FROM Assets",
        "query": "SELECT DISTINCT company_type FROM Third_Party_Companies",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "query": "SELECT Name FROM Tourist_Attractions",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT Fname ,  Lname FROM Student",
        "question": "What are the full names of all students",
        "correctness": 1,
        "gold_parse": "SELECT Fname ,  Lname FROM Student"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')",
        "question": "What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT count(*) ,  warehouse FROM boxes GROUP BY warehouse",
        "question": "Find the number of boxes saved in each warehouse.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  warehouse FROM boxes GROUP BY warehouse"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(*) ,  student_id FROM Classes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "How many courses do students take at most? Also find the id of the student who takes the most courses.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  student_id FROM Classes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the number of distinct stages in claim processing.",
        "gold_parse": "SELECT count(*) FROM claims_processing_stages",
        "query": "SELECT Count ( * ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the faculty id and the number of students each faculty has?",
        "gold_parse": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID",
        "query": "SELECT Rank , Count ( * ) FROM Faculty GROUP BY FacID",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names of products with 'white' as their color description?",
        "gold_parse": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"",
        "query": "SELECT product_name FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions",
        "question": "How many different types of transactions are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions"
    },
    {
        "db_id": "gymnast",
        "query": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown",
        "question": "What are the hometowns of gymnasts and the corresponding number of gymnasts?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown"
    },
    {
        "db_id": "program_share",
        "question": "Which programs are never broadcasted in the morning? Give me the names of the programs.",
        "gold_parse": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"",
        "query": "SELECT T1.Name FROM program AS T1 WHERE T1.Program_ID NOT IN ( SELECT T2.Program_ID FROM broadcast_share AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is detail of the student who registered the most number of courses?",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Which product has been ordered most number of times?",
        "gold_parse": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT product_id FROM Products GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "For each shop, return the number of employees working there and the name of the shop.",
        "gold_parse": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "query": "select Name , count ( * ) from shop group by Shop_ID",
        "correctness": 0
    },
    {
        "db_id": "car_racing",
        "query": "SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Dodge\" INTERSECT SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Chevrolet\"",
        "question": "Which country has both drivers with make \"Dodge\" and drivers with make \"Chevrolet\"?",
        "correctness": 1,
        "gold_parse": "SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Dodge\" INTERSECT SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Chevrolet\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION",
        "question": "How many players played each position?",
        "correctness": 1,
        "gold_parse": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
        "question": "What is the name of each aircraft and how many flights does each one complete?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid"
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "query": "SELECT Consider_rate , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "query": "SELECT DISTINCT POSITION FROM match_season",
        "question": "Show all distinct positions of matches.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT POSITION FROM match_season"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT DISTINCT country FROM artist",
        "question": "What are all distinct country for artists?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT country FROM artist"
    },
    {
        "db_id": "flight_1",
        "question": "Show the id and salary of Mark Young.",
        "gold_parse": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
        "query": "SELECT eid , salary FROM employee",
        "correctness": 0
    },
    {
        "db_id": "boat_1",
        "query": "select distinct t1.name ,  t1.sid from sailors as t1 join reserves as t2 on t1.sid  =  t2.sid group by t2.sid having count(*)  >=  2",
        "question": "What are the different names of sailors who reserved two or more boats ?",
        "correctness": 1,
        "gold_parse": "select distinct t1.name ,  t1.sid from sailors as t1 join reserves as t2 on t1.sid  =  t2.sid group by t2.sid having count(*)  >=  2"
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "Which service id and type has the least number of participants?",
        "gold_parse": "SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1",
        "query": "SELECT Service_ID , Service_Type_Code FROM Services GROUP BY Service_ID ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014",
        "question": "What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014"
    },
    {
        "db_id": "party_people",
        "query": "SELECT count(*) FROM party_events",
        "question": "How many party events do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM party_events"
    },
    {
        "db_id": "music_2",
        "question": "Find the name of songs that does not have a back vocal.",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
        "query": "SELECT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT T2.SongId FROM Tracklists AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
        "question": "Give me a list of names and years of races that had any driver whose forename is Lewis?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\""
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "query": "SELECT asset_details FROM Assets ORDER BY other_asset_details Asc",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4",
        "question": "Show the facility codes of apartments with more than 4 bedrooms.",
        "correctness": 1,
        "gold_parse": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4"
    },
    {
        "db_id": "singer",
        "query": "SELECT Title FROM song WHERE Sales > 500000",
        "question": "What songs have sales over 500,000 copies?",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM song WHERE Sales > 500000"
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"",
        "question": "How many credit cards does customer Blanche Huels have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\""
    },
    {
        "db_id": "election",
        "query": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the name of the party that has the most delegates.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "network_2",
        "question": "Find the name and age of the person who is a friend of both Dan and Alice.",
        "gold_parse": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'",
        "query": "SELECT T1.name , T1.age FROM Person AS T1 WHERE T1.job = value INTERSECT SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List states with populations not exceeding five million.",
        "gold_parse": "",
        "query": "SELECT state_name FROM state WHERE population > 5000000;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE property_type_code = 'COM';",
        "question": "What are the names of properties that are commercial?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE property_type_code = 'COM';"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010",
        "question": "Give the title of the course offered in Chandler during the Fall of 2010.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010"
    },
    {
        "db_id": "world_1",
        "question": "Sum the population of countries where the language is official.",
        "gold_parse": "",
        "query": "SELECT Language, SUM(Population) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T';",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Which year has the most degrees conferred?",
        "gold_parse": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
        "query": "SELECT T3.Year FROM Campuses AS T1 JOIN degrees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus GROUP BY T2.Year ORDER BY Avg ( T2.Degrees ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
        "question": "What are the names and years of all races that had a driver with the last name Lewis?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\""
    },
    {
        "db_id": "loan_1",
        "question": "Find the name of customers who have loans of both Mortgages and Auto.",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'",
        "query": "SELECT cust_name FROM customer INTERSECT SELECT cust_name FROM customer",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;",
        "question": "Return the name, rate, check in and check out date for the room with the highest rate.",
        "correctness": 1,
        "gold_parse": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;"
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "query": "SELECT Candidate_ID , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?",
        "gold_parse": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
        "query": "SELECT Title FROM film WHERE Director = value INTERSECT SELECT Title FROM film WHERE Director = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average degree program ID for each student's leaving date?",
        "gold_parse": "",
        "query": "SELECT date_left, AVG(degree_program_id) FROM Students JOIN Degree_Programs ON Students.student_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety",
        "question": "What are the minimum and maximum crime rate of counties?",
        "correctness": 1,
        "gold_parse": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2",
        "question": "Return the investors who have invested in two or more entrepreneurs.",
        "correctness": 1,
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'",
        "question": "What are the names of Art instructors who have taught a course, and the corresponding course id?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'"
    },
    {
        "db_id": "singer",
        "question": "Sum the highest positions of songs by singers with a net worth greater than 50 million for each singer.",
        "gold_parse": "",
        "query": "SELECT Name, SUM(Highest_Position) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Net_Worth_Millions > 50;",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the weight of the shortest person.",
        "gold_parse": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
        "query": "SELECT Weight FROM people GROUP BY Weight ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "Which themes have had corresponding exhibitions that have had attendance both below 100 and above 500?",
        "gold_parse": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500",
        "query": "SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T2.Attendance > value INTERSECT SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T2.Attendance < value",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.id , T1.name , T2.Date FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC",
        "question": "What are the names of clubs, ordered descending by the average earnings of players within each?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC"
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "query": "SELECT * FROM jobs WHERE JOB_TITLE = value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
        "question": "Count the number of chip model that do not have wifi.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "question": "What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?",
        "correctness": 1,
        "gold_parse": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5"
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;",
        "question": "How many highschoolers are there in each grade?",
        "correctness": 1,
        "gold_parse": "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;"
    },
    {
        "db_id": "driving_school",
        "question": "List first name and last name of customers that have more than 2 payments.",
        "gold_parse": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2",
        "query": "SELECT first_name , last_name FROM Customers GROUP BY customer_id HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Alice');",
        "question": "What are the names of singers who are the same age as Alice?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age IN (SELECT Age FROM singer WHERE Name = 'Alice');"
    },
    {
        "db_id": "scholar",
        "question": "What are the titles of all papers?",
        "gold_parse": "",
        "query": "SELECT title FROM paper WHERE title = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "car_racing",
        "query": "SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
        "question": "Show the maximum points of the drivers from countries with capital \"Dublin\"",
        "correctness": 1,
        "gold_parse": "SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  \"Dublin\""
    },
    {
        "db_id": "department_store",
        "question": "Return the product type, name, and price for products supplied by supplier 3.",
        "gold_parse": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3",
        "query": "SELECT T2.product_type_code , T2.product_name , T2.product_price FROM Suppliers AS T1 JOIN Products AS T2 JOIN Product_Suppliers AS T3 ON T1.supplier_id = T3.supplier_id AND T3.product_id = T2.product_id WHERE T1.supplier_name = value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What is the first name and country code of the oldest player?",
        "gold_parse": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "query": "SELECT first_name , country_code FROM players ORDER BY birth_date Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name  =  \"Zapp Brannigan\" OR T4.Name  =  \"Omicron Persei 8\";",
        "question": "List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan.",
        "correctness": 1,
        "gold_parse": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name  =  \"Zapp Brannigan\" OR T4.Name  =  \"Omicron Persei 8\";"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT max(search_datetime) FROM User_Searches;",
        "question": "What was the time of the most recent search?",
        "correctness": 1,
        "gold_parse": "SELECT max(search_datetime) FROM User_Searches;"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT name ,  distance FROM Aircraft",
        "question": "What are the names and distances for all airplanes?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  distance FROM Aircraft"
    },
    {
        "db_id": "world_1",
        "question": "Show different regions and the number of countries in each.",
        "gold_parse": "",
        "query": "SELECT Region, COUNT(*) FROM country GROUP BY Region;",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many students live in each city and what are their average ages?",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",
        "query": "SELECT city_code , Avg ( Age ) FROM Student GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Count the number of courses.",
        "gold_parse": "SELECT count(*) FROM COURSE",
        "query": "SELECT Count ( * ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "How many songs does the singer with ID 1 have?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "dorm_1",
        "question": "How many dorms are there?",
        "gold_parse": "SELECT count(*) FROM dorm",
        "query": "SELECT Count ( * ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "gold_parse": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "query": "SELECT Count ( * ) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.Country = value AND T1.Airline = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of all distinct nurses ordered by alphabetical order?",
        "gold_parse": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "query": "SELECT DISTINCT Name FROM Physician ORDER BY Name Asc",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the names of songs for which format is mp3 and resolution is below 1000.",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
        "query": "SELECT T1.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of actors whose age is not 20.",
        "gold_parse": "SELECT Name FROM actor WHERE Age != 20",
        "query": "SELECT Name FROM actor WHERE age < = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee on a CSU campus in 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus WHERE T2.Year = value AND T3.Campus = value",
        "correctness": 0
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1",
        "question": "Find the name of the source user with the highest average trust score.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1"
    },
    {
        "db_id": "culture_company",
        "question": "Show all book categories and the number of books in each category.",
        "gold_parse": "SELECT category ,  count(*) FROM book_club GROUP BY category",
        "query": "SELECT Type , Count ( * ) FROM culture_company GROUP BY Type",
        "correctness": 0
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\"",
        "question": "Find the first names of all the authors who have written a paper with title containing the word \"Functional\".",
        "correctness": 1,
        "gold_parse": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\""
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the id of the document with the fewest paragraphs.",
        "gold_parse": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "query": "select T1.Document_ID from Documents as T1 join Paragraphs as T2 on T1.Document_ID = T2.Document_ID group by T1.Document_ID order by count ( * ) asc limit value",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT count(DISTINCT school_id) FROM basketball_match",
        "question": "How many schools are in the basketball match?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT school_id) FROM basketball_match"
    },
    {
        "db_id": "wta_1",
        "question": "How many players are there for each hand type?",
        "gold_parse": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "query": "SELECT Count ( * ) , T1.hand FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.loser_id",
        "correctness": 0
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1",
        "question": "Which teams won more than 1 race?",
        "correctness": 1,
        "gold_parse": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show all cities along with the number of drama workshop groups in each city.",
        "gold_parse": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town",
        "query": "SELECT City_Town , Count ( * ) FROM Addresses GROUP BY City_Town",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "question": "What is the average number of votes of representatives from party \"Republican\"?",
        "gold_parse": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"Republican\"",
        "query": "SELECT Avg ( T1.Vote_Percent ) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Party = value",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "Show the names of authors and the count of their occurrences.",
        "gold_parse": "",
        "query": "SELECT name, COUNT(*) FROM author;",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "query": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)",
        "question": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?",
        "correctness": 1,
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)"
    },
    {
        "db_id": "hr_1",
        "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY = value AND T1.MIN_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "query": "SELECT T1.problem_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_log_id = value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What is the average age of the female students with secretary votes in the spring election cycle?",
        "gold_parse": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\"",
        "query": "SELECT Avg ( Age ) FROM Student WHERE Sex = value AND Sex = value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the level name of the catalog with the lowest price (in USD).",
        "gold_parse": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "query": "SELECT height FROM Catalog_Contents ORDER BY price_in_dollars Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of departments that offer courses with 'Science' in their description?",
        "gold_parse": "",
        "query": "SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Courses WHERE course_description LIKE '%Science%');",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "question": "Return the number of accounts that the customer with the first name Art and last name Turcotte has.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the most frequently ordered product? Tell me the detail of the product",
        "gold_parse": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT product_details FROM Products GROUP BY product_details ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"",
        "question": "What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\""
    },
    {
        "db_id": "party_people",
        "query": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2",
        "question": "Return the names of parties that have two or more events.",
        "correctness": 1,
        "gold_parse": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Name NOT IN ( SELECT Musical_ID FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many characteristics are there?",
        "gold_parse": "SELECT count(*) FROM CHARACTERISTICS",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"",
        "question": "What campuses are located in the county of Los Angeles?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\""
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'",
        "question": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "correctness": 1,
        "gold_parse": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled = (SELECT MIN(num_enrolled) FROM course);",
        "question": "What are the names of courses with the lowest enrollment?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled = (SELECT MIN(num_enrolled) FROM course);"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\";",
        "question": "What are the wifi and screen mode type of the hardware model named \"LG-P760\"?",
        "correctness": 1,
        "gold_parse": "SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\";"
    },
    {
        "db_id": "battle_death",
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "gold_parse": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
        "query": "select T1.name , T1.date from battle as T1 join ship as T2 on T1.id = T2.lost_in_battle where T2.disposition_of_ship = value intersect select T3.name , T3.date from battle as T3 join ship as T4 on T3.id = T4.lost_in_battle where T4.name = value",
        "correctness": 0
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)",
        "question": "What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?",
        "correctness": 1,
        "gold_parse": "SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)"
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Count the number of invoices.",
        "gold_parse": "SELECT count(*) FROM Invoices",
        "query": "SELECT Count ( * ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1",
        "question": "What is the name of the student who has the highest total credits in the History department.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT max(height_mm) ,  paintingID FROM paintings WHERE YEAR  <  1900",
        "question": "What are the maximum height and id of paintings painted before 1900?",
        "correctness": 1,
        "gold_parse": "SELECT max(height_mm) ,  paintingID FROM paintings WHERE YEAR  <  1900"
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT Player FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
        "question": "What are the different names, prices, and descriptions for all products bought by female customers?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)",
        "question": "Find the titles of items whose rating is higher than the average review rating of all items.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "List all information about the assessment notes sorted by date in ascending order.",
        "gold_parse": "SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC",
        "query": "SELECT * FROM Ref_Incident_Type ORDER BY incident_type_description Asc",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "For each fourth-grade classroom, show the classroom number and the total number of students using it.",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT count(*) FROM tweets",
        "question": "Find the number of tweets in record.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM tweets"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Address FROM building ORDER BY Completed_Year DESC",
        "question": "List the addresses of buildings in descending order of building completion year.",
        "correctness": 1,
        "gold_parse": "SELECT Address FROM building ORDER BY Completed_Year DESC"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the most common full name among all actors.",
        "correctness": 1,
        "gold_parse": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100",
        "question": "Which singers have a net worth greater than 100 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT gender ,  count(*) FROM Customers GROUP BY gender",
        "question": "How many customers are there of each gender?",
        "correctness": 1,
        "gold_parse": "SELECT gender ,  count(*) FROM Customers GROUP BY gender"
    },
    {
        "db_id": "allergy_1",
        "question": "How many students are affected by food related allergies?",
        "gold_parse": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query": "SELECT DISTINCT Fname , LName FROM Student WHERE Advisor = value AND Advisor = value",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the country of origin of the artist who is female and produced a song in Bangla?",
        "gold_parse": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"",
        "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = value AND T2.song_name = value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the third house features for properties with the lowest vendor requested price.",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(hse_feature_3) FROM Properties WHERE vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the distinct position of players from college UCLA or Duke.",
        "gold_parse": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
        "query": "SELECT DISTINCT T2.Position FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team WHERE T1.Name = value OR T1.Name = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of students minoring in department 140?",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Department AS T2 JOIN Minor_in AS T3 ON T1.StuID = T3.StuID AND T3.DNO = T2.DNO WHERE T2.DName = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Collection_Name FROM Collections EXCEPT SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID;",
        "question": "What are the names of the collections that are not the parent of the other collections?",
        "correctness": 1,
        "gold_parse": "SELECT Collection_Name FROM Collections EXCEPT SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID;"
    },
    {
        "db_id": "driving_school",
        "question": "How many lessons did the customer Ryan Goodwin complete?",
        "gold_parse": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\"",
        "query": "SELECT Count ( * ) FROM Customers WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What is the average number of gold medals for clubs?",
        "gold_parse": "SELECT avg(Gold) FROM club_rank",
        "query": "SELECT Avg ( Gold ) , Max ( Gold ) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "planet_1",
        "query": "select count(*) from employee where employeeid not in ( select t2.employeeid from has_clearance as t1 join employee as t2 on t1.employee = t2.employeeid join planet as t3 on t1.planet = t3.planetid where t3.name = \"mars\" );",
        "question": "Find the number of employees who do not have clearance in Mars .",
        "correctness": 1,
        "gold_parse": "select count(*) from employee where employeeid not in ( select t2.employeeid from has_clearance as t1 join employee as t2 on t1.employee = t2.employeeid join planet as t3 on t1.planet = t3.planetid where t3.name = \"mars\" );"
    },
    {
        "db_id": "apartment_rentals",
        "question": "What is the average number of rooms of apartments with type code \"Studio\"?",
        "gold_parse": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
        "query": "SELECT Avg ( bathroom_count ) FROM Apartments WHERE apt_type_code = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT name ,  dept_name FROM student ORDER BY tot_cred",
        "question": "What are the names of students and their respective departments, ordered by number of credits from least to greatest?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  dept_name FROM student ORDER BY tot_cred"
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000",
        "question": "Which mountains are taller than 3000 meters?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000"
    },
    {
        "db_id": "e_government",
        "question": "What are the last names of individuals who have been contact individuals for an organization?",
        "gold_parse": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id",
        "query": "SELECT individual_last_name FROM Individuals",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the name and date of the race that occurred most recently?",
        "gold_parse": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1",
        "query": "SELECT T1.country , T1.lat FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Calculate the average number of citations for each venue.",
        "gold_parse": "",
        "query": "SELECT venuename, AVG(numcitedby) FROM venue JOIN paper ON venue.venueid = paper.venueid WHERE numcitedby IS NOT NULL GROUP BY venuename;",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many flights land in Aberdeen or Abilene?",
        "gold_parse": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "query": "SELECT Count ( * ) FROM airports WHERE AirportName = value OR City = value",
        "correctness": 0
    },
    {
        "db_id": "book_press",
        "query": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'",
        "question": "Find the name of authors who publish their books in both \"MM\" and \"LT\" series.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'"
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "question": "What is the name of the entrepreneur with the greatest weight?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of schools that have some students playing in goalie and mid positions.",
        "gold_parse": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T2.cName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T3.HS = value",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major = 600;",
        "question": "Which student's age is older than 18 and is majoring in 600? List each student's first and last name.",
        "correctness": 1,
        "gold_parse": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major = 600;"
    },
    {
        "db_id": "book_press",
        "query": "SELECT name FROM author EXCEPT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor'",
        "question": "Find the names of the authors who did not have any book with the \"Accor\" press.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM author EXCEPT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor'"
    },
    {
        "db_id": "musical",
        "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
        "question": "List the nominees that have been nominated more than two musicals.",
        "correctness": 1,
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2"
    },
    {
        "db_id": "loan_1",
        "question": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?",
        "gold_parse": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "query": "SELECT cust_name , acc_bal FROM customer WHERE no_of_loans > value",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What are the nationalities of conductors who are 50 years old?",
        "gold_parse": "",
        "query": "SELECT Nationality FROM conductor WHERE Nationality IN (SELECT Nationality FROM conductor WHERE Age = 50);",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the names of storms that both affected two or more regions and affected a total of 10 or more cities?",
        "gold_parse": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "gold_parse": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Count ( * ) , course_id FROM Student_Enrolment_Courses GROUP BY course_id",
        "correctness": 0
    },
    {
        "db_id": "movie_2",
        "query": "SELECT * FROM movies WHERE rating  =  'null'",
        "question": "Show all information of all unrated movies.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM movies WHERE rating  =  'null'"
    },
    {
        "db_id": "world_1",
        "question": "Count the number of distinct regions in each continent grouped by government form.",
        "gold_parse": "",
        "query": "SELECT Continent, COUNT(DISTINCT Region) FROM country GROUP BY GovernmentForm;",
        "correctness": 0
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT model ,  CLASS ,  construction FROM headphone ORDER BY price LIMIT 1",
        "question": "What are the model, class, and construction of the cheapest headphone?",
        "correctness": 1,
        "gold_parse": "SELECT model ,  CLASS ,  construction FROM headphone ORDER BY price LIMIT 1"
    },
    {
        "db_id": "student_1",
        "question": "Find all students taught by OTHA MOYER. Output the first and last names of the students.",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "query": "SELECT FirstName , LastName FROM list WHERE FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Driver FROM driver ORDER BY Age ASC",
        "question": "List all the driver names in ascending order of age.",
        "correctness": 1,
        "gold_parse": "SELECT Driver FROM driver ORDER BY Age ASC"
    },
    {
        "db_id": "music_4",
        "question": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".",
        "gold_parse": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"",
        "query": "SELECT Music_Festival FROM music_festival WHERE Category = value AND Result = value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')",
        "question": "Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\".",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')"
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates that have the 5 highest cloud cover rates and what are the rates?",
        "gold_parse": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
        "query": "SELECT date FROM weather ORDER BY max_sea_level_pressure_inches Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
        "question": "What place has the most flights coming from there?",
        "correctness": 1,
        "gold_parse": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM jobs WHERE MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building",
        "question": "Find the number of rooms with more than 50 capacity for each building.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of courses that have 'Biology' in their description?",
        "gold_parse": "",
        "query": "SELECT course_name FROM Courses WHERE course_description LIKE '%Biology%';",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT Company ,  Investor FROM entrepreneur",
        "question": "What are the companies and investors that correspond to each entrepreneur?",
        "correctness": 1,
        "gold_parse": "SELECT Company ,  Investor FROM entrepreneur"
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE JOB_TITLE = value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "gold_parse": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "query": "SELECT first_name , middle_name , last_name FROM Students",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY = value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines made from red grapes and with prices above 50?",
        "gold_parse": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50",
        "query": "SELECT Name FROM wine WHERE Grape = value INTERSECT SELECT Name FROM wine WHERE Price > value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Count ( * ) FROM Apartment_Buildings WHERE building_full_name = value AND building_short_name = value",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age > 30;",
        "question": "What are the names of singers who are older than 30?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age > 30;"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
        "question": "How many documents were shipped by USPS?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";"
    },
    {
        "db_id": "college_3",
        "question": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "query": "SELECT Fname , Lname FROM Faculty WHERE Rank = value AND Sex = value",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "question": "Which movies were released after 2015?",
        "gold_parse": "",
        "query": "SELECT title FROM movie WHERE release_year < 2015;",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT Player FROM player WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT guest_first_name ,  guest_last_name FROM Guests",
        "question": "Return the first names and last names of all guests",
        "correctness": 1,
        "gold_parse": "SELECT guest_first_name ,  guest_last_name FROM Guests"
    },
    {
        "db_id": "scholar",
        "query": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10",
        "question": "What datasets are associated with paper 10?",
        "correctness": 1,
        "gold_parse": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002",
        "question": "How many faculty is there in total in the year of 2002?",
        "correctness": 1,
        "gold_parse": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE name LIKE 'A%';",
        "question": "List the names of highschoolers that start with 'A'.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE name LIKE 'A%';"
    },
    {
        "db_id": "hr_1",
        "question": "Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.",
        "gold_parse": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "query": "SELECT SALARY , HIRE_DATE FROM employees WHERE HIRE_DATE BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many records are there for each airline?",
        "gold_parse": "",
        "query": "SELECT uid, COUNT(*) FROM airlines GROUP BY uid;",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course ORDER BY title ,  credits",
        "question": "Given the titles of all courses, in order of titles and credits.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course ORDER BY title ,  credits"
    },
    {
        "db_id": "phone_1",
        "query": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'",
        "question": "Find the names of the chip models that are not used by any phone with full accreditation type.",
        "correctness": 1,
        "gold_parse": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT(DISTINCT Name) FROM country;",
        "question": "How many distinct country names are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Name) FROM country;"
    },
    {
        "db_id": "station_weather",
        "question": "How many trains have 'Express' in their names?",
        "gold_parse": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\"",
        "query": "SELECT Count ( * ) FROM train WHERE name = value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"",
        "question": "What is the first name, last name, and phone of the customer with account name 162?",
        "correctness": 1,
        "gold_parse": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\""
    },
    {
        "db_id": "dorm_1",
        "question": "What is the average and total capacity for all dorms who are of gender X?",
        "gold_parse": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'",
        "query": "SELECT Avg ( student_capacity ) , Min ( student_capacity ) FROM Dorm WHERE gender = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T2.SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MIN_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "query": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "question": "What are the names of musicals who have no actors?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)"
    },
    {
        "db_id": "geography",
        "question": "Which states have the smallest population in their largest city?",
        "gold_parse": "",
        "query": "SELECT state_name, MAX(population) FROM city GROUP BY state_name;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Sum the buyer offered prices for each property type description.",
        "gold_parse": "",
        "query": "SELECT property_type_description, SUM(buyer_offered_price) FROM Ref_Property_Types JOIN Properties ON Ref_Property_Types.property_type_code = Properties.property_type_code GROUP BY property_type_description;",
        "correctness": 0
    },
    {
        "db_id": "video_game",
        "query": "SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'",
        "question": "What is the average units sold in millions of the games that are not developed by Nintendo?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?",
        "gold_parse": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"",
        "query": "SELECT Name , Description FROM Tourist_Attractions WHERE Name = value",
        "correctness": 0
    },
    {
        "db_id": "driving_school",
        "question": "How many lessons have been cancelled?",
        "gold_parse": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\"",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "query": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "question": "What is the title, phone and hire date of Nancy Edwards?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
    },
    {
        "db_id": "entertainment_awards",
        "question": "In which year are there festivals both inside the 'United States' and outside the 'United States'?",
        "gold_parse": "SELECT YEAR FROM festival_detail WHERE LOCATION  =  'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'",
        "query": "SELECT Year FROM festival_detail WHERE Location = value INTERSECT SELECT Year FROM festival_detail WHERE Location = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "For each country, what is the average elevation of that country's airports?",
        "gold_parse": "SELECT avg(elevation) ,  country FROM airports GROUP BY country",
        "query": "SELECT country , Avg ( y ) FROM airports GROUP BY country",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Give the number of students living in either HKG or CHI.",
        "gold_parse": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value OR city_code = value",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname, title FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid;",
        "question": "List the names of authors and the titles of papers they have written.",
        "correctness": 1,
        "gold_parse": "SELECT authorname, title FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid;"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(*) FROM Citation WHERE cited_paper_id  =  \"A00-1002\"",
        "question": "How many papers cite paper with id A00-1002?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Citation WHERE cited_paper_id  =  \"A00-1002\""
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;",
        "question": "How many tracks does each genre have and what are the names of the top 5?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;",
        "question": "What are the feature name and description of the most commonly seen feature across properties?",
        "correctness": 1,
        "gold_parse": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "e_learning",
        "question": "List all the login names and family names of course author and tutors.",
        "gold_parse": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",
        "query": "SELECT T1.login_name , T1.personal_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Show the names of airlines and the count of their occurrences.",
        "gold_parse": "",
        "query": "SELECT Airline, COUNT(*) FROM airlines;",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
        "gold_parse": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "query": "SELECT address_line_2 , email_address FROM Customers WHERE email_address = value INTERSECT SELECT address_line_2 , email_address FROM Customers WHERE email_address = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "What is the invoice number and invoice date for the invoice with most number of transactions?",
        "gold_parse": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T3.invoice_number , T1.date_order_placed FROM Orders AS T1 JOIN Invoices AS T2 ON T1.order_id = T2.order_id JOIN Financial_Transactions AS T3 ON T2.invoice_number = T3.invoice_number GROUP BY T3.invoice_number ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of documents with expenses.",
        "gold_parse": "SELECT count(*) FROM Documents_with_expenses",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Which tests have \"Pass\" results? Return the dates when the tests were taken.",
        "gold_parse": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\"",
        "query": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "List the property types and the number of properties in each, ordered by the number of properties in ascending order.",
        "gold_parse": "",
        "query": "SELECT property_type_code, COUNT(*) FROM Properties GROUP BY property_name ORDER BY COUNT(*) ASC;",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions",
        "question": "Return the average transaction amount, as well as the total amount of all transactions.",
        "correctness": 1,
        "gold_parse": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions"
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.district , T2.city , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "query": "SELECT T1.customer_id , T3.date_moved_in , T2.date_moved_out FROM Customers AS T1 JOIN Residents AS T2 JOIN Customer_Events AS T3 ON T1.customer_id = T3.customer_id AND T3.date_moved_in = T2.date_moved_in AND T1.customer_id = T3.customer_id",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the names of products that were bought by at least two distinct customers.",
        "gold_parse": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2",
        "query": "SELECT supplier_name FROM Suppliers GROUP BY supplier_name HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT date FROM weather WHERE mean_temperature_f > value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT * , T2.city , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
        "question": "What are the first and last names of all the candidates?",
        "correctness": 1,
        "gold_parse": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
        "question": "Return the ids and details of clients who have attended a meeting or had an invoice.",
        "correctness": 1,
        "gold_parse": "SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id"
    },
    {
        "db_id": "inn_1",
        "question": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.",
        "gold_parse": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\"",
        "query": "SELECT Count ( * ) FROM Reservations WHERE FirstName = value AND LastName = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the first and last names of all the employees and how many people report to them?",
        "gold_parse": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1",
        "query": "SELECT first_name , last_name FROM employees",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join",
        "question": "Show all artist name, age, and country ordered by the yeared they joined.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join"
    },
    {
        "db_id": "school_finance",
        "question": "What is the total budget amount for school \"Glenn\" in all years?",
        "gold_parse": "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'",
        "query": "SELECT Sum ( Budgeted ) FROM budget WHERE Year = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3",
        "question": "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.",
        "correctness": 1,
        "gold_parse": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3"
    },
    {
        "db_id": "school_player",
        "question": "Which team has the oldest player?",
        "gold_parse": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1",
        "query": "SELECT Team FROM player ORDER BY Age Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "party_people",
        "query": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959",
        "question": "Show the minister who took office after 1961 or before 1959.",
        "correctness": 1,
        "gold_parse": "SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959"
    },
    {
        "db_id": "singer",
        "query": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1",
        "question": "How many songs does the singer with ID 1 have?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM song WHERE Singer_ID = 1"
    },
    {
        "db_id": "student_1",
        "question": "Find the first and last name of all the teachers that teach EVELINA BROMLEY.",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id = (SELECT MIN(Id) FROM car_makers);",
        "question": "What are the full names of car makers with the lowest car maker ID?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id = (SELECT MIN(Id) FROM car_makers);"
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the total requested price for properties at each address?",
        "gold_parse": "",
        "query": "SELECT SUM(vendor_requested_price), property_address FROM Properties GROUP BY property_id;",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List the name, location, mascot for all schools.",
        "gold_parse": "SELECT school_name ,  LOCATION ,  mascot FROM school",
        "query": "SELECT T1.School_name , T1.Location , T2.donator_name FROM School AS T1 JOIN endowment AS T2 ON T1.School_id = T2.School_id",
        "correctness": 0
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the id of the vehicle driven for the least times for the vehicles ever used?",
        "correctness": 1,
        "gold_parse": "SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3",
        "question": "What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name"
    },
    {
        "db_id": "flight_2",
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "gold_parse": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "query": "select T2.Airline from flights as T1 join airlines as T2 where T1.FlightNo = value",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "query": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020",
        "question": "Who are the authors of papers published in 2020 and what are the titles of those papers?",
        "correctness": 1,
        "gold_parse": "SELECT paper.title, author.authorname FROM paper JOIN writes ON paper.paperid = writes.paperid JOIN author ON writes.authorid = author.authorid WHERE paper.year = 2020"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id FROM goods WHERE price  >  (SELECT avg(price) FROM goods)",
        "question": "What are the ids of goods whose price is above twice the average price of all goods?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM goods WHERE price  >  (SELECT avg(price) FROM goods)"
    },
    {
        "db_id": "culture_company",
        "question": "What are the years, titles, and publishers for all books, ordered by year descending?",
        "gold_parse": "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC",
        "query": "SELECT T2.Year , T2.Title , T1.Publisher FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id ORDER BY T2.Year Desc",
        "correctness": 0
    },
    {
        "db_id": "video_game",
        "query": "SELECT Player_name FROM player ORDER BY Player_name ASC",
        "question": "List all player names in ascending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT Player_name FROM player ORDER BY Player_name ASC"
    },
    {
        "db_id": "address_1",
        "query": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)",
        "question": "Show me the city code of two cities with a distance greater than the average.",
        "correctness": 1,
        "gold_parse": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"",
        "question": "Find the full names of employees living in the city of Calgary.",
        "correctness": 1,
        "gold_parse": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\""
    },
    {
        "db_id": "driving_school",
        "question": "How many employees are there?",
        "gold_parse": "SELECT count(*) FROM Staff",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the names and ids of customers who have TN in their address.",
        "gold_parse": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
        "query": "SELECT customer_name , customer_id FROM Customers WHERE customer_address = value",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "query": "SELECT G.genre, COUNT(*) FROM genre AS G JOIN classification AS C ON G.gid = C.gid GROUP BY G.genre;",
        "question": "List all genres and the number of movies in each genre.",
        "correctness": 1,
        "gold_parse": "SELECT G.genre, COUNT(*) FROM genre AS G JOIN classification AS C ON G.gid = C.gid GROUP BY G.genre;"
    },
    {
        "db_id": "loan_1",
        "question": "What are the different names and credit scores of customers who have taken a loan?",
        "gold_parse": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id",
        "query": "SELECT DISTINCT T2.cust_name , T2.credit_score FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.loan_type = value",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?",
        "gold_parse": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "query": "SELECT CName FROM Course WHERE Credits = value UNION SELECT CName FROM Course WHERE Days = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "List the names of all courses ordered by their titles and credits.",
        "gold_parse": "SELECT title FROM course ORDER BY title ,  credits",
        "query": "SELECT title FROM course ORDER BY credits Asc",
        "correctness": 0
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'",
        "question": "What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the states or counties of the address of the stores with marketing region code \"CA\"?",
        "gold_parse": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\"",
        "query": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Marketing_Region_Code = value OR T2.Marketing_Region_Code = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many statements do we have?",
        "gold_parse": "SELECT count(*) FROM Statements",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the address of store 1.",
        "gold_parse": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
        "query": "SELECT address FROM address",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee for a CSU campus in the year of 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T2.Year = value AND T3.Campus = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who registered for course 301?",
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
        "query": "SELECT student_id FROM Student_Course_Registrations",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"?",
        "gold_parse": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"",
        "query": "SELECT T2.Date_in_Locaton_To FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code WHERE T1.Location_Name = value AND T1.Location_Name = value",
        "correctness": 0
    },
    {
        "db_id": "course_teach",
        "question": "What are the names of the teachers and how many courses do they teach?",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "query": "SELECT T1.Name , Count ( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Find the last name of the latest contact individual of the organization \"Labour Party\".",
        "gold_parse": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
        "query": "SELECT T1.individual_last_name FROM Individuals AS T1 JOIN Organizations AS T2 JOIN Organization_Contact_Individuals AS T3 ON T1.individual_id = T3.individual_id AND T3.organization_id = T2.organization_id WHERE T2.organization_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "gold_parse": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "query": "select T3.semester_name from Students as T1 join Student_Enrolment as T2 on T1.student_id = T2.student_id join Semesters as T3 on T2.semester_id = T3.semester_id where T1.first_name = value intersect select T4.semester_name from Semesters as T4 join Student_Enrolment as T5 on T4.semester_id = T5.semester_id join Degree_Programs as T6 on T5.degree_program_id = T6.degree_program_id where T6.degree_summary_name = value",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "question": "List the organization IDs of authors that start with 'J'.",
        "gold_parse": "",
        "query": "SELECT oid FROM author WHERE name LIKE 'J%';",
        "correctness": 0
    },
    {
        "db_id": "vehicle_driver",
        "query": "select distinct t1.name from driver as t1 join vehicle_driver as t2 on t1.driver_id  =  t2.driver_id join vehicle as t3 on t2.vehicle_id  =  t3.vehicle_id where t3.power  >  5000",
        "question": "What are the distinct driver names who have driven vehicles with power more than 5000 ?",
        "correctness": 1,
        "gold_parse": "select distinct t1.name from driver as t1 join vehicle_driver as t2 on t1.driver_id  =  t2.driver_id join vehicle as t3 on t2.vehicle_id  =  t3.vehicle_id where t3.power  >  5000"
    },
    {
        "db_id": "store_1",
        "query": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";",
        "question": "List the number of invoices and the invoice total from California.",
        "correctness": 1,
        "gold_parse": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?",
        "gold_parse": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id",
        "query": "SELECT T2.Employee_Name , T1.Document_Name FROM All_Documents AS T1 JOIN Employees AS T2 JOIN Documents_to_be_Destroyed AS T3 ON T1.Document_ID = T3.Document_ID AND T3.Destroyed_by_Employee_ID = T2.Employee_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the id and star rating of each hotel, ordered by its price from low to high.",
        "gold_parse": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC",
        "query": "SELECT T2.hotel_id , T1.star_rating_description , T2.price_range FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the names of the clients who do not have any booking?",
        "gold_parse": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID",
        "query": "SELECT Customer_Name FROM Clients EXCEPT SELECT Customer_Name FROM Clients",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Which students live in the city with code \"NYC\" and have class senator votes in the spring election cycle? Count the numbers.",
        "gold_parse": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "query": "SELECT Count ( * ) FROM Student WHERE city_code = value AND Major = value",
        "correctness": 0
    },
    {
        "db_id": "video_game",
        "query": "SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
        "question": "What is the average number of units sold in millions of games played by players with position \"Guard\"?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\""
    },
    {
        "db_id": "flight_4",
        "question": "For each country and airline name, how many routes are there?",
        "gold_parse": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name",
        "query": "SELECT country , Count ( * ) FROM airports GROUP BY country",
        "correctness": 0
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';",
        "question": "In which cities are there any properties equipped with a swimming pool?",
        "correctness": 1,
        "gold_parse": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid",
        "question": "How many reservations for each boat did the sailors with an id greater than 1 make?",
        "correctness": 1,
        "gold_parse": "SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid"
    },
    {
        "db_id": "government_shift",
        "query": "select distinct t1.service_details from services as t1 join customer_interactions as t2 on t1.service_id  =  t2.service_id join channels as t3 on t2.channel_id  =  t3.channel_id where t3.channel_details  =  \"15 ij\"",
        "question": "Find details of all the services that have interacted with `` 15 ij '' for the the channel details.",
        "correctness": 1,
        "gold_parse": "select distinct t1.service_details from services as t1 join customer_interactions as t2 on t1.service_id  =  t2.service_id join channels as t3 on t2.channel_id  =  t3.channel_id where t3.channel_details  =  \"15 ij\""
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
        "query": "SELECT T3.catalog_entry_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T1.catalog_name = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1",
        "question": "Give the name of the student in the History department with the most credits.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1"
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "gold_parse": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "query": "SELECT date_departed , date_of_birth FROM Dogs WHERE gender = value",
        "correctness": 0
    },
    {
        "db_id": "university_rank",
        "query": "SELECT home_conference FROM University GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1",
        "question": "What are the home conferences with the fewest number of people enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT home_conference FROM University GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1"
    },
    {
        "db_id": "match_season",
        "query": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"",
        "question": "Show the positions of the players from the team with name \"Ryley Goldner\".",
        "correctness": 1,
        "gold_parse": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\""
    },
    {
        "db_id": "city_record",
        "question": "Which cities have regional population above 8000000 or below 5000000?",
        "gold_parse": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000",
        "query": "SELECT City FROM city WHERE Regional_Population > value OR Regional_Population < value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60",
        "question": "Find the names of rooms that have been reserved for more than 60 times.",
        "correctness": 1,
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60"
    },
    {
        "db_id": "singer",
        "question": "How many songs has each singer sung?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM song GROUP BY Singer_ID;",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested",
        "question": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested"
    },
    {
        "db_id": "music_2",
        "question": "What information is there on albums from 2010?",
        "gold_parse": "SELECT * FROM Albums WHERE YEAR  =  2010",
        "query": "SELECT * FROM Albums WHERE Year = value AND Year = value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the feature type name of feature AirCon?",
        "gold_parse": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
        "query": "SELECT feature_type_name FROM Ref_Feature_Types",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Find the average number of bedrooms of all the apartments.",
        "gold_parse": "SELECT avg(bedroom_count) FROM Apartments",
        "query": "SELECT Avg ( bathroom_count ) FROM Apartments",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "query": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500",
        "question": "What are the official names of cities that have population over 1500 or less than 500?",
        "correctness": 1,
        "gold_parse": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "question": "How many students have cat allergies?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\""
    },
    {
        "db_id": "election_representative",
        "query": "SELECT Party FROM representative WHERE State  =  \"New York\" INTERSECT SELECT Party FROM representative WHERE State  =  \"Pennsylvania\"",
        "question": "Show the parties that have both representatives in New York state and representatives in Pennsylvania state.",
        "correctness": 1,
        "gold_parse": "SELECT Party FROM representative WHERE State  =  \"New York\" INTERSECT SELECT Party FROM representative WHERE State  =  \"Pennsylvania\""
    },
    {
        "db_id": "csu_1",
        "question": "How many undergraduates are there in \"San Jose State University\" in year 2004?",
        "gold_parse": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"",
        "query": "SELECT Count ( * ) FROM faculty WHERE Campus = value AND Year = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;",
        "question": "Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
        "question": "what is the name and id of sailors who do not have a reservation of a boat?",
        "correctness": 1,
        "gold_parse": "SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid"
    },
    {
        "db_id": "soccer_1",
        "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )",
        "question": "List all player names who have an overall rating higher than the average.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000",
        "question": "What are the distinct countries of players with earnings higher than 1200000?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000"
    },
    {
        "db_id": "car_1",
        "question": "What are the country names with continent ID 4?",
        "gold_parse": "",
        "query": "SELECT CountryName FROM countries WHERE CountryName IN (SELECT CountryName FROM countries WHERE Continent = 4);",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Show the id, the date of account opened, the account name, and other account detail for all accounts.",
        "gold_parse": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts",
        "query": "SELECT account_id , date_account_opened , other_account_details FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT max(followers) ,  sum(followers) FROM user_profiles",
        "question": "Find the maximum and total number of followers of all users.",
        "correctness": 1,
        "gold_parse": "SELECT max(followers) ,  sum(followers) FROM user_profiles"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the channel code and contact number of the customer contact channel that was active for the longest time?",
        "gold_parse": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)",
        "query": "SELECT customer_id , other_customer_details FROM Customers ORDER BY date_became_customer Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;",
        "question": "Which room has the highest base price?",
        "correctness": 1,
        "gold_parse": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;"
    },
    {
        "db_id": "driving_school",
        "question": "What is the total time for all lessons taught by Janessa Sawayn?",
        "gold_parse": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\"",
        "query": "SELECT Sum ( T2.lesson_time ) FROM Customers AS T1 JOIN Lessons AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = value AND T1.last_name = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of advanced courses?",
        "gold_parse": "",
        "query": "SELECT course_name FROM Courses WHERE course_description LIKE '%advanced%';",
        "correctness": 0
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(*) FROM Products WHERE product_type_code  =  \"Hardware\"",
        "question": "How many hardware type products do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Products WHERE product_type_code  =  \"Hardware\""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes that are not used by any document.",
        "gold_parse": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "query": "select Template_Type_Code from Templates except select Template_Type_Code from Templates",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT min_sea_level_pressure_inches FROM weather WHERE max_sea_level_pressure_inches < value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "query": "SELECT Avg(Percentage) FROM countrylanguage;",
        "question": "What is the average percentage of language speakers in all countries?",
        "correctness": 1,
        "gold_parse": "SELECT Avg(Percentage) FROM countrylanguage;"
    },
    {
        "db_id": "hospital_1",
        "question": "How many appointments are there?",
        "gold_parse": "SELECT count(*) FROM appointment",
        "query": "SELECT Count ( * ) FROM Physician",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "How many male (sex is M) students have class senator votes in the fall election cycle?",
        "gold_parse": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value AND Major = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "What apartment type codes and apartment numbers do the buildings managed by \"Kyle\" have?",
        "gold_parse": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"",
        "query": "SELECT T1.apt_type_code , T1.apt_number FROM Apartments AS T1 JOIN Guests AS T2 JOIN Apartment_Bookings AS T3 ON T1.apt_id = T3.apt_id AND T3.guest_id = T2.guest_id WHERE T2.guest_first_name = value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010.",
        "gold_parse": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\"",
        "query": "SELECT T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.CheckIn = value AND T2.LastName = value INTERSECT SELECT T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.FirstName = value AND T2.LastName = value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of customers with an order status of Pending, sorted by customer id?",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "query": "SELECT DISTINCT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_id Asc",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "How many rooms are located for each block code?",
        "gold_parse": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",
        "query": "SELECT BlockCode , Count ( * ) FROM Room GROUP BY BlockCode",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.",
        "gold_parse": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10",
        "query": "SELECT School_name FROM School",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the addresses of customers living in Germany who have had an invoice?",
        "gold_parse": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"",
        "query": "SELECT Address FROM Customer WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the population, name and leader of the country with the largest area?",
        "gold_parse": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "query": "SELECT LifeExpectancy , Name , LocalName FROM country ORDER BY SurfaceArea Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the durations of the longest and the shortest tracks in milliseconds?",
        "gold_parse": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",
        "query": "SELECT Milliseconds , TrackId FROM Track ORDER BY Milliseconds Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "What are the names of the countries with no car makers?",
        "gold_parse": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country",
        "query": "SELECT CountryName FROM countries EXCEPT SELECT CountryName FROM countries",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "query": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'",
        "question": "How many ships are there of type Destroyer?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM ship WHERE ship_type = 'Destroyer'"
    },
    {
        "db_id": "scholar",
        "question": "What are the titles of papers that have a journal ID?",
        "gold_parse": "",
        "query": "SELECT title, journalid FROM paper WHERE journalid IS NOT NULL;",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582.",
        "gold_parse": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'",
        "query": "SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value UNION SELECT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T1.country = value OR T2.cell_mobile_number = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )",
        "question": "List the start time and the end time of the students' addresses for the students who have 2 transcripts.",
        "correctness": 1,
        "gold_parse": "SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
        "question": "Find the average fee on a CSU campus in 1996",
        "correctness": 1,
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );",
        "question": "Find the name of rooms whose price is higher than the average price.",
        "correctness": 1,
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT count(*) FROM performance_score WHERE stage_presence  <  7 OR stage_presence  >  9",
        "question": "How many performances have a stage presence score less than 7 or higher than 9?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM performance_score WHERE stage_presence  <  7 OR stage_presence  >  9"
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'",
        "question": "What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?",
        "correctness": 1,
        "gold_parse": "SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC",
        "question": "What are the crime rates of counties sorted by number of offices ascending?",
        "correctness": 1,
        "gold_parse": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC"
    },
    {
        "db_id": "department_store",
        "question": "What are id and name of the products whose price is lower than 600 or higher than 900?",
        "gold_parse": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900",
        "query": "SELECT product_id , product_name FROM Products WHERE product_price BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "what are the employee ids and job titles for employees in department 80?",
        "gold_parse": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80",
        "query": "SELECT T3.EMPLOYEE_ID , T2.JOB_TITLE FROM departments AS T1 JOIN jobs AS T2 JOIN employees AS T3 ON T1.DEPARTMENT_ID = T3.DEPARTMENT_ID AND T3.JOB_ID = T2.JOB_ID AND T1.DEPARTMENT_ID = T3.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Find the minimum highest position of songs with sales greater than the maximum sales.",
        "gold_parse": "",
        "query": "SELECT Title, MIN(Highest_Position) FROM song WHERE Sales > (SELECT MAX(Sales) FROM song);",
        "correctness": 0
    },
    {
        "db_id": "company_1",
        "query": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  'Houston'",
        "question": "Find the names of departments that are located in Houston.",
        "correctness": 1,
        "gold_parse": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  'Houston'"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000",
        "question": "What is the number of employees that have a salary between 100000 and 200000?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000"
    },
    {
        "db_id": "network_1",
        "question": "Show the names of high school students and their corresponding number of friends.",
        "gold_parse": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "query": "SELECT T1.name , T1.grade , Count ( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Name, T2.Name FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode;",
        "question": "Show the names of countries and the names of their cities.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name, T2.Name FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode;"
    },
    {
        "db_id": "country_language",
        "query": "SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.name",
        "question": "Show the official languages and the number of countries speaking each language.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.name"
    },
    {
        "db_id": "shop_membership",
        "question": "What is the name and open year for the branch with most number of memberships registered in 2016?",
        "gold_parse": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name , Open_year FROM branch GROUP BY Open_year ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MIN(AirportCode) FROM airports);",
        "question": "What are the names of airports with the lowest airport code?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode = (SELECT MIN(AirportCode) FROM airports);"
    },
    {
        "db_id": "college_2",
        "question": "What are the names of instructors who advise more than one student?",
        "gold_parse": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1",
        "query": "SELECT name FROM instructor GROUP BY name HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "query": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "question": "What is the 3 most common cloud cover rates in the region of zip code 94107?",
        "correctness": 1,
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3"
    },
    {
        "db_id": "dog_kennels",
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "gold_parse": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "query": "SELECT T1.date_adopted , T2.first_name FROM Dogs AS T1 JOIN Professionals AS T2 JOIN Treatments AS T3 ON T1.dog_id = T3.dog_id AND T3.professional_id = T2.professional_id",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Find the emails of customers who has filed a complaints of the product with the most complaints.",
        "gold_parse": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
        "query": "SELECT T1.email_address FROM Customers AS T1 JOIN Complaints AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many documents are using the template with type code 'PPT'?",
        "gold_parse": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "query": "SELECT Count ( * ) FROM Templates WHERE Template_Type_Code = value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the most common first name among all actors.",
        "correctness": 1,
        "gold_parse": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )",
        "question": "What are the loan amounts and loan dates of the students who have at least 2 achievements?",
        "correctness": 1,
        "gold_parse": "SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )"
    },
    {
        "db_id": "shop_membership",
        "question": "For each branch id, what are the names of the branches that were registered after 2015?",
        "gold_parse": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id",
        "query": "SELECT T2.Name , T1.Name FROM member AS T1 JOIN branch AS T2 JOIN membership_register_branch AS T3 ON T1.Member_ID = T3.Member_ID AND T3.Branch_ID = T2.Branch_ID AND T1.Member_ID = T3.Member_ID WHERE T3.Register_Year > value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "query": "SELECT Name FROM Team",
        "question": "Show all team names.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM Team"
    },
    {
        "db_id": "party_people",
        "query": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)",
        "question": "Show names of parties that does not have any members.",
        "correctness": 1,
        "gold_parse": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)"
    },
    {
        "db_id": "wine_1",
        "question": "Give the neames of wines with prices below 50 and with appelations in Monterey county.",
        "gold_parse": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50",
        "query": "SELECT T2.Name FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Price < value AND T1.State = value AND T1.County = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "Find all the stores in the district with the most population.",
        "gold_parse": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)",
        "query": "SELECT District_name FROM district ORDER BY City_Population Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT count(*) FROM services",
        "question": "How many services are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM services"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid = (SELECT MAX(bid) FROM business);",
        "question": "What are the names of businesses with the highest business ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid = (SELECT MAX(bid) FROM business);"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";",
        "question": "Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010.",
        "correctness": 1,
        "gold_parse": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "How many roles are there?",
        "gold_parse": "SELECT count(*) FROM ROLES",
        "query": "SELECT Count ( DISTINCT Role_Code ) FROM Roles",
        "correctness": 0
    },
    {
        "db_id": "phone_market",
        "query": "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"",
        "question": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\".",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\""
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common affiliation for city channels.",
        "correctness": 1,
        "gold_parse": "SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics WHERE characteristic_name = value EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "List the name of browsers in descending order by market share.",
        "gold_parse": "SELECT name FROM browser ORDER BY market_share DESC",
        "query": "SELECT T1.name FROM Web_client_accelerator AS T1 JOIN browser AS T2 JOIN accelerator_compatible_browser AS T3 ON T1.id = T3.accelerator_id AND T3.browser_id = T2.id ORDER BY T2.market_share Desc",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled < 10;",
        "question": "What are the names of courses with less than 10 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled < 10;"
    },
    {
        "db_id": "world_1",
        "question": "Find the maximum old Gross National Product of continents with a republic government form.",
        "gold_parse": "",
        "query": "SELECT Continent, MAX(GNPOld) FROM country WHERE GovernmentForm = 'Republic';",
        "correctness": 0
    },
    {
        "db_id": "bbc_channels",
        "query": "SELECT t1.name ,  count(*) FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id",
        "question": "Find the number of programs for each channel. Return the name of each channel as well.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  count(*) FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "question": "What are all details of the students who registered but did not attend any course?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT count(DISTINCT student_id) FROM Detention",
        "question": "Count the number of students who have a detention record.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT student_id) FROM Detention"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
        "question": "What are the distinct invoice ids and statuses for all payments?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);",
        "question": "What are the names of conductors with the highest conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "store_1",
        "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
        "question": "List the number of invoices from Chicago, IL.",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.",
        "gold_parse": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
        "query": "SELECT T1.Trade_Name , T1.name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T2.Porphyria = value INTERSECT SELECT T1.Trade_Name , T1.name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T2.Porphyria = value",
        "correctness": 0
    },
    {
        "db_id": "wedding",
        "query": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2",
        "question": "Show all church names that have hosted least two weddings.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid < 7;",
        "question": "What are the names of journals with journal IDs less than 7?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid < 7;"
    },
    {
        "db_id": "election_representative",
        "query": "SELECT Date ,  Vote_Percent FROM election",
        "question": "List the dates and vote percents of elections.",
        "correctness": 1,
        "gold_parse": "SELECT Date ,  Vote_Percent FROM election"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name = \"Ogden Wernstrom\" INTERSECT SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
        "question": "Count the number of packages sent by Ogden Wernstrom and received by Leo Wong.",
        "correctness": 1,
        "gold_parse": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name = \"Ogden Wernstrom\" INTERSECT SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\""
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1",
        "question": "Find the name of the item with the lowest average rating.",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5",
        "question": "What are the ids of customers who spend more than 5 on average for each good?",
        "correctness": 1,
        "gold_parse": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5"
    },
    {
        "db_id": "real_estate_properties",
        "question": "Show the IDs of properties that have a vendor requested price greater than 1,000,000.",
        "gold_parse": "",
        "query": "SELECT property_id FROM Properties WHERE vendor_requested_price > 1000000;",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?",
        "gold_parse": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id",
        "query": "SELECT T2.start_station_id , T1.name , T2.subscription_type FROM station AS T1 JOIN trip AS T2",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the total account balance of each customer from Utah or Texas.",
        "gold_parse": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
        "query": "SELECT Sum ( credit_score ) FROM customer WHERE state = value OR state = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Count the number of countries in Asia.",
        "gold_parse": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "query": "SELECT Count ( * ) FROM city",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the email and phone number of Astrid Gruber the customer?",
        "gold_parse": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\"",
        "query": "SELECT email , phone FROM customers WHERE last_name = value",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who have the maximum name?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE grade = (SELECT MAX(name) FROM Highschooler);",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
        "question": "What are the ids of all students for courses and what are the names of those courses?",
        "correctness": 1,
        "gold_parse": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT count(*) FROM Invoices",
        "question": "Count the number of invoices.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Invoices"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the statement ids, statement details, and account details, for all accounts?",
        "gold_parse": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id",
        "query": "SELECT T3.Statement_ID , T1.Document_Description , T3.Account_Details FROM Documents AS T1 JOIN Statements AS T2 ON T1.Document_ID = T2.Statement_ID JOIN Accounts AS T3 ON T2.Statement_ID = T3.Statement_ID",
        "correctness": 0
    },
    {
        "db_id": "body_builder",
        "query": "SELECT min(snatch) FROM body_builder",
        "question": "What is the minimum snatch score?",
        "correctness": 1,
        "gold_parse": "SELECT min(snatch) FROM body_builder"
    },
    {
        "db_id": "school_bus",
        "question": "Show the party with drivers from Hartford and drivers older than 40.",
        "gold_parse": "SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40",
        "query": "SELECT Party FROM driver WHERE Home_city = value AND Age > value INTERSECT SELECT Party FROM driver WHERE Age > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "correctness": 1,
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60"
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the maximum buyer offered price for each feature.",
        "gold_parse": "",
        "query": "SELECT feature_name, MAX(buyer_offered_price) FROM Other_Available_Features JOIN Properties ON Other_Available_Features.feature_id = Properties.property_id GROUP BY feature_name;",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(DISTINCT allergy) FROM Allergy_type",
        "question": "How many allergy entries are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT allergy) FROM Allergy_type"
    },
    {
        "db_id": "farm",
        "query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
        "question": "Return the themes of farm competitions, sorted by year ascending.",
        "correctness": 1,
        "gold_parse": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM director WHERE birth_city = 'Los Angeles';",
        "question": "Which directors were born in Los Angeles?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM director WHERE birth_city = 'Los Angeles';"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the poll resource associated with the most candidates.",
        "correctness": 1,
        "gold_parse": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";",
        "question": "find the full name of employees who report to Nancy Edwards?",
        "correctness": 1,
        "gold_parse": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')",
        "question": "Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT City FROM airports WHERE Country = 'Canada';",
        "question": "What are the names of cities with airports in Canada?",
        "correctness": 1,
        "gold_parse": "SELECT City FROM airports WHERE Country = 'Canada';"
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < value OR T1.MIN_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT count(*) FROM customers",
        "question": "Find the number of customers in total.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers"
    },
    {
        "db_id": "book_1",
        "query": "SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"The Little Prince\"",
        "question": "Show ids for orders including both \"Pride and Prejudice\" and \"The Little Prince\".",
        "correctness": 1,
        "gold_parse": "SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"The Little Prince\""
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "query": "SELECT Avg ( Famous_Release_date ) FROM artist WHERE Age > = value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000",
        "question": "Which mountains are taller than 3000 meters?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name, mountain_altitude FROM mountain WHERE mountain_altitude > 3000"
    },
    {
        "db_id": "book_press",
        "query": "SELECT count(*) FROM author WHERE age  <  30",
        "question": "Count the number of authors of age below 30.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM author WHERE age  <  30"
    },
    {
        "db_id": "company_office",
        "question": "Whah are the name of each industry and the number of companies in that industry?",
        "gold_parse": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry",
        "query": "SELECT name , Count ( * ) FROM Companies GROUP BY Industry",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";",
        "question": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the \"date became customers\" of the customers whose ID is between 10 and 20.",
        "gold_parse": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20",
        "query": "SELECT date_became_customer FROM Customers WHERE customer_id = value OR customer_id = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id",
        "question": "What are the invoice dates, order ids, and order details for all invoices?",
        "correctness": 1,
        "gold_parse": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id"
    },
    {
        "db_id": "bike_1",
        "question": "Which trip started from the station with the largest dock count? Give me the trip id.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
        "query": "SELECT start_date FROM trip ORDER BY duration Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What is the smallest lake area in each state?",
        "gold_parse": "",
        "query": "SELECT state_name, MAX(area) FROM lake GROUP BY state_name;",
        "correctness": 0
    },
    {
        "db_id": "video_game",
        "query": "SELECT count(*) FROM game",
        "question": "How many games are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM game"
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT College FROM match_season WHERE Player LIKE value",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "What are the id and name of the mountains that have at least 2 photos?",
        "gold_parse": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2",
        "query": "SELECT id , name FROM mountain GROUP BY id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the different cities that have more than 100 memberships?",
        "gold_parse": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100",
        "query": "SELECT DISTINCT City FROM branch GROUP BY City HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee on a CSU campus in 2005?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN discipline_enrollments AS T3 ON T1.Id = T3.Campus WHERE T2.Year = value AND T3.Discipline = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT DISTINCT process_id FROM Documents_processes",
        "question": "List all process ids with a document.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT process_id FROM Documents_processes"
    },
    {
        "db_id": "college_3",
        "question": "What are the phones of departments in Room 268?",
        "gold_parse": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
        "query": "SELECT DName FROM Department WHERE Building = value",
        "correctness": 0
    },
    {
        "db_id": "store_product",
        "question": "What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?",
        "gold_parse": "SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000",
        "query": "SELECT District_name FROM district WHERE City_Area > value OR Headquartered_City = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "query": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
        "question": "Which campus has the most degrees conferred in all times?",
        "correctness": 1,
        "gold_parse": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1"
    },
    {
        "db_id": "college_3",
        "question": "How many courses are there in total?",
        "gold_parse": "SELECT count(*) FROM COURSE",
        "query": "SELECT Count ( * ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "query": "SELECT DISTINCT main_industry FROM company",
        "question": "What are the different main industries for all companies?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT main_industry FROM company"
    },
    {
        "db_id": "farm",
        "question": "Return the hosts of competitions for which the theme is not Aliens?",
        "gold_parse": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'",
        "query": "SELECT Theme FROM farm_competition WHERE Competition_ID NOT IN ( SELECT Theme FROM farm_competition )",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "query": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'",
        "question": "What are the names for tracks without a race in class 'GT'.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id FROM goods WHERE food  =  \"Cake\" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  \"Tart\")",
        "question": "What are the ids of cakes that are at least as expensive as the average Tart?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM goods WHERE food  =  \"Cake\" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  \"Tart\")"
    },
    {
        "db_id": "musical",
        "query": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"",
        "question": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\""
    },
    {
        "db_id": "geography",
        "question": "Which mountains are lower than 1500 meters?",
        "gold_parse": "",
        "query": "SELECT mountain_name FROM mountain WHERE mountain_altitude > 1500;",
        "correctness": 0
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "question": "What is the price of all products being ordered on average?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
        "question": "Show id, first name and last name for all customers and the number of accounts.",
        "correctness": 1,
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2",
        "question": "What are the birth places that are shared by at least two people?",
        "correctness": 1,
        "gold_parse": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "advising",
        "question": "What are the different course IDs in the student records?",
        "gold_parse": "",
        "query": "SELECT DISTINCT course_id FROM student_record;",
        "correctness": 0
    },
    {
        "db_id": "club_leader",
        "query": "select name from member where nationality != \"england\"",
        "question": "List the names of members whose nationality is not `` England '' .",
        "correctness": 1,
        "gold_parse": "select name from member where nationality != \"england\""
    },
    {
        "db_id": "scholar",
        "question": "What are the titles of papers and their respective venues?",
        "gold_parse": "",
        "query": "SELECT title, venuename FROM paper JOIN venue ON paper.venueid = venue.venueid WHERE venuename = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT max_sea_level_pressure_inches FROM weather WHERE max_sea_level_pressure_inches < value",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What is the id and market share of the browser Safari?",
        "gold_parse": "SELECT id ,  market_share FROM browser WHERE name  =  'Safari'",
        "query": "SELECT id , market_share FROM browser ORDER BY market_share Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT t1.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID WHERE t2.start_year  <  2004",
        "question": "Find the names of spokesmen who have served some district before 2004.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID WHERE t2.start_year  <  2004"
    },
    {
        "db_id": "college_2",
        "question": "What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?",
        "gold_parse": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query": "SELECT T1.ID FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T2.year ! = value",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "query": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10",
        "question": "Which singers have songs that reached top 10 positions?",
        "correctness": 1,
        "gold_parse": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10"
    },
    {
        "db_id": "world_1",
        "question": "What region is Kabul in?",
        "gold_parse": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "query": "SELECT LocalName FROM country",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT city_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";",
        "question": "Which city does student Linda Smith live in?",
        "correctness": 1,
        "gold_parse": "SELECT city_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
        "question": "which poll source does the highest oppose rate come from?",
        "correctness": 1,
        "gold_parse": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1"
    },
    {
        "db_id": "singer",
        "question": "Count the number of songs with the highest position 5 for each citizenship.",
        "gold_parse": "",
        "query": "SELECT Citizenship, COUNT(Title) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position = 5;",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT allergy ,  allergytype FROM Allergy_type",
        "question": "Show all allergies and their types.",
        "correctness": 1,
        "gold_parse": "SELECT allergy ,  allergytype FROM Allergy_type"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the total amount of products ordered before 2018-03-17 07:13:53.",
        "gold_parse": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\"",
        "query": "SELECT Sum ( T3.order_quantity ) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Order_Items AS T3 ON T2.order_id = T3.order_id WHERE T1.date_became_customer < value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name, state_name FROM city WHERE city_name = 'Toronto';",
        "question": "What is the state name for the city of Toronto?",
        "correctness": 1,
        "gold_parse": "SELECT city_name, state_name FROM city WHERE city_name = 'Toronto';"
    },
    {
        "db_id": "allergy_1",
        "question": "Show student ids for all male students.",
        "gold_parse": "SELECT StuID FROM Student WHERE Sex  =  'M'",
        "query": "SELECT Major FROM Student WHERE Sex = value",
        "correctness": 0
    },
    {
        "db_id": "online_exams",
        "query": "SELECT * FROM Students",
        "question": "Show all information on students.",
        "correctness": 1,
        "gold_parse": "SELECT * FROM Students"
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many distinct feature types does each property have?",
        "gold_parse": "",
        "query": "SELECT property_type_code, COUNT(DISTINCT feature_type_name) FROM Properties JOIN Ref_Feature_Types ON Properties.property_id = Ref_Feature_Types.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )",
        "question": "How many staff did not attend any meeting?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15",
        "question": "Show theme and year for all exhibitions with ticket prices lower than 15.",
        "correctness": 1,
        "gold_parse": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\"",
        "question": "Which stadium name contains the substring \"Bank\"?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\""
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT order_status_code FROM Customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the order status code that is most frequent across customer orders.",
        "correctness": 1,
        "gold_parse": "SELECT order_status_code FROM Customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "culture_company",
        "question": "How many movie directors are there?",
        "gold_parse": "SELECT COUNT (DISTINCT director) FROM movie",
        "query": "SELECT Count ( * ) FROM book_club",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the IDs and titles of all papers?",
        "gold_parse": "",
        "query": "SELECT paperid, title FROM paper WHERE paperid = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "gold_parse": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "query": "SELECT T1.Content FROM TV_Channel AS T1 EXCEPT SELECT T1.Content FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the names of the storms that affected Denmark?",
        "gold_parse": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'",
        "query": "SELECT Name FROM storm WHERE Dates_active = value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.owner_user_id ,  count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.owner_user_id;",
        "question": "How many photos does each owner has of his or her properties? List user id and number of photos.",
        "correctness": 1,
        "gold_parse": "SELECT T1.owner_user_id ,  count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.owner_user_id;"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'",
        "question": "What are the names and results of battles between 1900 and 1950?",
        "correctness": 1,
        "gold_parse": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'"
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE bid > 10;",
        "question": "What are the names of businesses with IDs greater than 10?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE bid > 10;"
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all songs that are ordered by their resolution numbers?",
        "gold_parse": "SELECT song_name FROM song ORDER BY resolution",
        "query": "SELECT artist_name FROM files ORDER BY artist_name Asc",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.apt_number = value AND T1.building_full_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "What is the average ROM size of phones produced by the company named \"Nokia Corporation\"?",
        "gold_parse": "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\"",
        "query": "SELECT Avg ( screen_mode ) FROM phone WHERE Company_name = value",
        "correctness": 0
    },
    {
        "db_id": "gymnast",
        "query": "SELECT count(DISTINCT Hometown) FROM people",
        "question": "Count the number of different hometowns of these people.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Hometown) FROM people"
    },
    {
        "db_id": "hospital_1",
        "question": "Find the patient who most recently stayed in room 111.",
        "gold_parse": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1",
        "query": "SELECT Physician FROM Trained_In ORDER BY CertificationDate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "Report the name of all campuses in Los Angeles county.",
        "gold_parse": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"",
        "query": "SELECT Id FROM Campuses WHERE County = value",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "query": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the party that has the largest number of representatives?",
        "correctness": 1,
        "gold_parse": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "music_1",
        "question": "Return the names of songs for which format is mp3 and resolution is below 1000.",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
        "query": "SELECT T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the aircraft name for the flight with number 99",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99",
        "query": "SELECT name FROM aircraft WHERE name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "gold_parse": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "query": "SELECT T1.series_name , T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Written_by = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the payment method of the customer that has purchased the least quantity of items?",
        "gold_parse": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
        "query": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2",
        "question": "What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?",
        "correctness": 1,
        "gold_parse": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id",
        "question": "Show the product ids and the number of unique orders containing each product.",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product with some problems, list the count of problems and the product id.",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
        "query": "SELECT product_name , Count ( * ) FROM Product GROUP BY product_id",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "query": "SELECT count(*) FROM company",
        "question": "How many gas companies are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM company"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.",
        "gold_parse": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\"",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value OR T1.Address = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Object_ID FROM Document_Objects;",
        "question": "What is the object id of the document objects?",
        "correctness": 1,
        "gold_parse": "SELECT Document_Object_ID FROM Document_Objects;"
    },
    {
        "db_id": "store_product",
        "question": "Find the name of the products that are not using the most frequently-used max page size.",
        "gold_parse": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)",
        "query": "SELECT product FROM product EXCEPT SELECT product FROM product WHERE dpi < = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
        "question": "What are the names of instructors who didn't teach courses in the Spring?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters",
        "question": "For each headquarter, what are the headquarter and how many companies are centered there?",
        "correctness": 1,
        "gold_parse": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters"
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name and hours of the students whose tryout decision is yes.",
        "gold_parse": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "query": "SELECT pName , HS FROM Player",
        "correctness": 0
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT property_id ,  vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1;",
        "question": "What is the id of the property that had the lowest requested price from the vendor, and what was that price?",
        "correctness": 1,
        "gold_parse": "SELECT property_id ,  vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1;"
    },
    {
        "db_id": "address_1",
        "query": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"PA\"  AND T2.sex  =  'F'",
        "question": "Show ids for all female (sex is F) students living in state PA.",
        "correctness": 1,
        "gold_parse": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"PA\"  AND T2.sex  =  'F'"
    },
    {
        "db_id": "driving_school",
        "question": "What are the names of the states that have 2 to 4 employees living there?",
        "gold_parse": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4",
        "query": "SELECT state_province_county FROM Addresses GROUP BY state_province_county HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "What are the average ages of losers and winners across matches?",
        "gold_parse": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "query": "SELECT Avg ( loser_age ) , Avg ( loser_age ) FROM matches",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the property with the maximum house feature 2 for a given property type code.",
        "gold_parse": "",
        "query": "SELECT property_id, MAX(hse_feature_2) FROM Properties WHERE property_type_code = (SELECT property_type_code FROM Properties LIMIT 1);",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the average agreed selling price for each property type where the property name is like the feature description?",
        "gold_parse": "",
        "query": "SELECT property_type_code, AVG(agreed_selling_price) FROM Properties WHERE property_name LIKE (SELECT feature_description FROM Other_Available_Features);",
        "correctness": 0
    },
    {
        "db_id": "pilot_record",
        "query": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34",
        "question": "Show the fleet series of the aircrafts flied by pilots younger than 34",
        "correctness": 1,
        "gold_parse": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34"
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "gold_parse": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = value UNION SELECT professional_id , last_name , cell_number FROM Professionals GROUP BY professional_id HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)",
        "question": "Which customer made the largest amount of claim in a single claim? Return the customer details.",
        "correctness": 1,
        "gold_parse": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "question": "What is the average fee for a CSU campus in the year of 2005?",
        "correctness": 1,
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005"
    },
    {
        "db_id": "flight_1",
        "question": "What is the name of each aircraft and how many flights does each one complete?",
        "gold_parse": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
        "query": "SELECT name , Count ( * ) FROM aircraft GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?",
        "gold_parse": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'",
        "query": "SELECT DISTINCT name FROM airport WHERE Country = value OR Country = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT Min(date_first_registered), Avg(date_first_registered), Max(date_first_registered) FROM Students;",
        "question": "What is the earliest, average, and latest registration date across all students?",
        "correctness": 1,
        "gold_parse": "SELECT Min(date_first_registered), Avg(date_first_registered), Max(date_first_registered) FROM Students;"
    },
    {
        "db_id": "flight_2",
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "gold_parse": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "query": "SELECT Abbreviation , Country FROM airlines GROUP BY Abbreviation ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of all races held between 2009 and 2011?",
        "gold_parse": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
        "query": "SELECT country FROM circuits WHERE lat BETWEEN value AND value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the total number of languages used in Aruba?",
        "gold_parse": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "query": "select count ( T2.Language ) from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T1.Capital = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "question": "What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?",
        "correctness": 1,
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that have house features?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE property_type_code IN (SELECT property_type_code FROM Ref_Feature_Types WHERE feature_type_name = 'House');",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "How many students have had at least one \"B\" grade?",
        "gold_parse": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "movie_2",
        "query": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'",
        "question": "What are the titles of all the movies that played at the Odeon or Imperial theater?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'"
    },
    {
        "db_id": "world_1",
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "gold_parse": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "query": "SELECT Avg ( Population ) FROM country WHERE Continent NOT IN ( SELECT Continent FROM country WHERE LocalName = value )",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name of all students who were in the tryout sorted in alphabetic order.",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName",
        "query": "SELECT cName FROM College ORDER BY cName Asc",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade = (SELECT MAX(grade) FROM Highschooler);",
        "question": "What are the names of highschoolers in the highest grade?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE grade = (SELECT MAX(grade) FROM Highschooler);"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5",
        "question": "Find the ids of customers whose average spending for each good is above 5.",
        "correctness": 1,
        "gold_parse": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5"
    },
    {
        "db_id": "conference",
        "query": "SELECT max(age) ,  min(age) FROM staff",
        "question": "What are the maximum and minimum ages for all staff?",
        "correctness": 1,
        "gold_parse": "SELECT max(age) ,  min(age) FROM staff"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT count(*) FROM institution",
        "question": "How many institutions are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM institution"
    },
    {
        "db_id": "world_1",
        "question": "Find the minimum population of countries where the language is official, grouped by language.",
        "gold_parse": "",
        "query": "SELECT Language, MIN(Population) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T' GROUP BY Language;",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "For each grade 0 classroom, report the total number of students.",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom",
        "query": "SELECT Count ( * ) , Grade FROM list GROUP BY Grade",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'",
        "question": "Count the number of classrooms in Lamberton.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'"
    },
    {
        "db_id": "government_shift",
        "query": "SELECT count(*) FROM services",
        "question": "How many services are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM services"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
        "question": "Show names for all regions except for Denmark.",
        "correctness": 1,
        "gold_parse": "SELECT region_name FROM region WHERE region_name != 'Denmark'"
    },
    {
        "db_id": "apartment_rentals",
        "question": "Which apartment type code is the most common among apartments with more than one bathroom?",
        "gold_parse": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "query": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
        "question": "What are the names of climbers and the corresponding heights of the mountains that they climb?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id < 3;",
        "question": "What are the full names of car makers with IDs less than 3?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id < 3;"
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of all students who successfully tried out for the position of striker?",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "query": "SELECT cName FROM Tryout WHERE pPos = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "query": "SELECT count(*) FROM Movie WHERE YEAR  <  2000",
        "question": "How many movies were made before 2000?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Movie WHERE YEAR  <  2000"
    },
    {
        "db_id": "scholar",
        "question": "Sum the number of citations for each dataset.",
        "gold_parse": "",
        "query": "SELECT datasetname, SUM(numcitedby) FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid JOIN paper ON paperdataset.paperid = paper.paperid WHERE numcitedby IS NOT NULL GROUP BY datasetname;",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of companies that do not make DVD drive.",
        "gold_parse": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'",
        "query": "SELECT Name FROM Products EXCEPT SELECT Name FROM Products",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the names of the products with length smaller than 3 or height greater than 5.",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.length > value OR T3.height < value",
        "correctness": 0
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Last_Name FROM Students WHERE Gender_MFU  =  \"F\" OR Gender_MFU  =  \"M\"",
        "question": "Which students identify their gender as \"F\" or \"M\"? Give me their last names.",
        "correctness": 1,
        "gold_parse": "SELECT Last_Name FROM Students WHERE Gender_MFU  =  \"F\" OR Gender_MFU  =  \"M\""
    },
    {
        "db_id": "phone_1",
        "query": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type",
        "question": "How many phones belongs to each accreditation type?",
        "correctness": 1,
        "gold_parse": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type"
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "query": "SELECT id FROM trip WHERE duration > value",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "query": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10",
        "question": "What datasets are associated with paper 10?",
        "correctness": 1,
        "gold_parse": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE paperdataset.paperid = 10"
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of companies that do not make DVD drive.",
        "gold_parse": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'",
        "query": "SELECT T1.Name FROM Manufacturers AS T1 EXCEPT SELECT T2.Name FROM Products AS T2",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties and the number of properties with the same room count?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(*) FROM Properties GROUP BY room_count;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Sum the population of cities with a population greater than the average city population.",
        "gold_parse": "",
        "query": "SELECT CountryCode, SUM(Population) FROM city WHERE Population > (SELECT AVG(Population) FROM city);",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the names of all reviewers that have given 3 or 4 stars for reviews?",
        "gold_parse": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4",
        "query": "SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars LIKE value OR T2.stars LIKE value",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "query": "SELECT T1.Title, T1.Sales, T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID;",
        "question": "Show the title, sales, and name of the singer for each song.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title, T1.Sales, T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID;"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "How many orders have detail \"Second time\"?",
        "gold_parse": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\"",
        "query": "SELECT Count ( * ) FROM Customers WHERE other_customer_details = value",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "What are the names of people who have the maximum height?",
        "gold_parse": "",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MAX(Height) FROM people);",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions",
        "question": "Return the average, minimum, maximum, and total transaction amounts.",
        "correctness": 1,
        "gold_parse": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')",
        "question": "What are the names of instructors who earn more than at least one instructor from the Biology department?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)",
        "question": "What are the names of all employees who have a salary higher than average?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)"
    },
    {
        "db_id": "geography",
        "question": "Which states have their highest elevation at less than 2000 meters?",
        "gold_parse": "",
        "query": "SELECT state_name FROM highlow WHERE highest_elevation > 2000;",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the total account balances for each customer from Utah or Texas?",
        "gold_parse": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
        "query": "SELECT Sum ( credit_score ) FROM customer WHERE state = value OR state = value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Musical_ID NOT IN ( SELECT Musical_ID FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many transcripts are released?",
        "gold_parse": "SELECT count(*) FROM Transcripts",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of the physician who prescribed the highest dose?",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T2.Registered Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "query": "SELECT other_asset_details FROM Assets ORDER BY other_asset_details Asc",
        "correctness": 0
    },
    {
        "db_id": "government_shift",
        "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Kutch%\"",
        "question": "Find all the customers whose name contains \"Kutch\".",
        "correctness": 1,
        "gold_parse": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Kutch%\""
    },
    {
        "db_id": "musical",
        "question": "Show names of actors and names of musicals they are in.",
        "gold_parse": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID",
        "query": "SELECT Character , Name FROM actor",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM regions",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What is the name of the wrestler with the fewest days held?",
        "gold_parse": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1",
        "query": "SELECT T1.Name FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID GROUP BY T2.Wrestler_ID ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of schools that have some players in the mid position but not in the goalie position.",
        "gold_parse": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'",
        "query": "SELECT T1.cName FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = value )",
        "correctness": 0
    },
    {
        "db_id": "wta_1",
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "gold_parse": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "query": "select first_name , country_code from players group by country_code order by count ( * ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Tell me the ages of the oldest and youngest students studying major 600.",
        "gold_parse": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600",
        "query": "SELECT Age , Age FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "gold_parse": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "query": "select T2.address_id , count ( * ) from Students as T1 join Addresses as T2 on T1.permanent_address_id = T2.address_id group by T1.current_address_id order by count ( * ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What are the cities of businesses in the 'Downtown' neighbourhood?",
        "gold_parse": "",
        "query": "SELECT city FROM business WHERE city IN (SELECT city FROM neighbourhood WHERE neighbourhood_name = 'Downtown');",
        "correctness": 0
    },
    {
        "db_id": "aan_1",
        "query": "SELECT paper_id FROM Paper WHERE title LIKE \"%translation%\"",
        "question": "Find the id of the papers whose title has the key word 'translation'.",
        "correctness": 1,
        "gold_parse": "SELECT paper_id FROM Paper WHERE title LIKE \"%translation%\""
    },
    {
        "db_id": "college_3",
        "question": "Find the distinct student first names of all students that have grade point at least 3.8 in one course.",
        "gold_parse": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8",
        "query": "SELECT DISTINCT Fname FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "query": "SELECT Character ,  Duration FROM actor",
        "question": "Return the characters and durations for each actor.",
        "correctness": 1,
        "gold_parse": "SELECT Character ,  Duration FROM actor"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT DISTINCT plane_name FROM pilotskills WHERE plane_name LIKE '%Bomber%'",
        "question": "Find all different planes whose names contain substring 'Bomber'.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT plane_name FROM pilotskills WHERE plane_name LIKE '%Bomber%'"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;",
        "question": "For each bed type, find the average base price of different bed type.",
        "correctness": 1,
        "gold_parse": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM city ORDER BY White DESC LIMIT 5",
        "question": "What are the names of the five cities with the greatest proportion of white people?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM city ORDER BY White DESC LIMIT 5"
    },
    {
        "db_id": "election",
        "question": "Who are the lieutenant governor and comptroller from the democratic party?",
        "gold_parse": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "query": "SELECT Lieutenant_Governor FROM party WHERE Comptroller = value AND Comptroller = value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3",
        "question": "What is the id and trade name of the medicines can interact with at least 3 enzymes?",
        "correctness": 1,
        "gold_parse": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT Name FROM institution ORDER BY Name ASC",
        "question": "List the names of institutions in ascending alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM institution ORDER BY Name ASC"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT COUNT(DISTINCT Nationality) FROM conductor;",
        "question": "How many different nationalities are there among conductors?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT Nationality) FROM conductor;"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled = (SELECT MAX(num_enrolled) FROM course);",
        "question": "What are the names of courses with the highest enrollment?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled = (SELECT MAX(num_enrolled) FROM course);"
    },
    {
        "db_id": "department_store",
        "question": "What is the name of the hardware product with the greatest price?",
        "gold_parse": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1",
        "query": "SELECT product_name FROM Products ORDER BY product_price Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
        "question": "What is the name of the plane that is flown the least often?",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "e_commerce",
        "query": "select product_color ,  product_description ,  product_size from products where product_price  !=  ( select max(product_price) from products )",
        "question": "What are the colors , descriptions , and sizes for all products that are not at the maximum price ?",
        "correctness": 1,
        "gold_parse": "select product_color ,  product_description ,  product_size from products where product_price  !=  ( select max(product_price) from products )"
    },
    {
        "db_id": "products_for_hire",
        "query": "SELECT count(DISTINCT product_type_code) FROM products_for_hire",
        "question": "How many different product types are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT product_type_code) FROM products_for_hire"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
        "question": "Which trip started from the station with the largest dock count? Give me the trip id.",
        "correctness": 1,
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1"
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name, population FROM state WHERE area > 50000",
        "question": "Which states have an area greater than 50,000 square kilometers?",
        "correctness": 1,
        "gold_parse": "SELECT state_name, population FROM state WHERE area > 50000"
    },
    {
        "db_id": "flight_4",
        "question": "What is the name of the country with the most number of home airlines?",
        "gold_parse": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT country FROM airports GROUP BY country ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "book_press",
        "query": "SELECT name FROM press ORDER BY Year_Profits_billion DESC",
        "question": "list all the names of press in descending order of the profit of the year.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM press ORDER BY Year_Profits_billion DESC"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "question": "What are the last names of employees who serve at most 20 customers?",
        "correctness": 1,
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20"
    },
    {
        "db_id": "world_1",
        "question": "Count the number of languages spoken in countries where the language is spoken by more than 50% of the population.",
        "gold_parse": "",
        "query": "SELECT CountryCode, COUNT(Language) FROM countrylanguage WHERE Percentage > 50;",
        "correctness": 0
    },
    {
        "db_id": "riding_club",
        "query": "SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\"",
        "question": "Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".",
        "correctness": 1,
        "gold_parse": "SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\""
    },
    {
        "db_id": "world_1",
        "question": "Sum the surface area of regions with cities having a population over 300,000.",
        "gold_parse": "",
        "query": "SELECT Region, SUM(SurfaceArea) FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Population > 300000;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List all lakes in states with populations less than one million.",
        "gold_parse": "",
        "query": "SELECT lake_name FROM lake JOIN state ON lake.state_name = state.state_name WHERE state.population > 1000000;",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1",
        "question": "What is the product with the highest height? Give me the catalog entry name.",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1"
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)",
        "question": "Find the phone numbers of customers using the most common policy type among the available policies.",
        "correctness": 1,
        "gold_parse": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name of the organization that has published the largest number of papers.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY = value",
        "correctness": 0
    },
    {
        "db_id": "art_1",
        "query": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.title LIKE \"%female%\"",
        "question": "What are the first and last name of the artist who had a sculpture work whose title has the word \u201cfemale\u201d in it?",
        "correctness": 1,
        "gold_parse": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.title LIKE \"%female%\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
        "question": "What are the names of all races held after 2000 in Spain?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000"
    },
    {
        "db_id": "address_1",
        "query": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000",
        "question": "What are the city codes corresponding to cities with distances less than 1000?",
        "correctness": 1,
        "gold_parse": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000"
    },
    {
        "db_id": "soccer_1",
        "question": "How many leagues are there in England?",
        "gold_parse": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"",
        "query": "SELECT Count ( * ) FROM Player_Attributes",
        "correctness": 0
    },
    {
        "db_id": "university_rank",
        "query": "SELECT university_name FROM University EXCEPT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1",
        "question": "What are the names of all universities without any majors ranked number 1?",
        "correctness": 1,
        "gold_parse": "SELECT university_name FROM University EXCEPT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1"
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM movie WHERE budget > 1000000;",
        "question": "Which movies had a budget greater than 1 million dollars?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movie WHERE budget > 1000000;"
    },
    {
        "db_id": "flight_2",
        "question": "What are the names of airlines with abbreviations less than the maximum abbreviation?",
        "gold_parse": "",
        "query": "SELECT Airline FROM airlines WHERE Abbreviation < (SELECT MAX(Abbreviation) FROM airlines);",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1",
        "question": "Find the semester and year which has the least number of student taking any class.",
        "correctness": 1,
        "gold_parse": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT count(*) FROM Affiliation",
        "question": "How many affiliations do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Affiliation"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2",
        "question": "Return the order ids and details for orderes with two or more invoices.",
        "correctness": 1,
        "gold_parse": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
        "question": "Find pilots who own planes Piper Cub and B-52 Bomber.",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT count(*) FROM accounts",
        "question": "How many accounts are there in total?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM accounts"
    },
    {
        "db_id": "train_station",
        "question": "Show all locations which don't have a train station with at least 15 platforms.",
        "gold_parse": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15",
        "query": "SELECT Location FROM station EXCEPT SELECT Location FROM station GROUP BY Location HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "book_1",
        "query": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book",
        "question": "What is the average purchase price and the average sale price?",
        "correctness": 1,
        "gold_parse": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details NOT IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 )",
        "question": "Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.",
        "correctness": 1,
        "gold_parse": "SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details NOT IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 )"
    },
    {
        "db_id": "store_1",
        "question": "What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the weights of entrepreneurs, ordered descending by amount of money requested.",
        "gold_parse": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC",
        "query": "SELECT Company FROM entrepreneur ORDER BY Money_Requested Desc",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MAX(jid) FROM journal);",
        "question": "What are the names of journals with the highest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MAX(jid) FROM journal);"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT product_id ,  product_name ,  product_price ,  product_color FROM Products EXCEPT SELECT T1.product_id ,  T1.product_name ,  T1.product_price ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.product_id HAVING count(*)  >=  2",
        "question": "What are the id, name, price and color of the products which have not been ordered for at least twice?",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  product_name ,  product_price ,  product_color FROM Products EXCEPT SELECT T1.product_id ,  T1.product_name ,  T1.product_price ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.product_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "List the names of the employees who authorized the destruction of documents and the employees who destroyed the corresponding documents.",
        "gold_parse": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id",
        "query": "SELECT T2.Employee_Name , T1.Document_Name FROM All_Documents AS T1 JOIN Employees AS T2 JOIN Documents_to_be_Destroyed AS T3 ON T1.Document_ID = T3.Document_ID AND T3.Destroyed_by_Employee_ID = T2.Employee_ID",
        "correctness": 0
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Hardware\")",
        "question": "What are the names of Hardware product with prices above the average price of Hardware products.",
        "correctness": 1,
        "gold_parse": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Hardware\")"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE date_sold IS NULL;",
        "question": "What are the names of properties that have not yet been sold?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE date_sold IS NULL;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalid, journalname FROM journal;",
        "question": "What are the IDs and names of all journals?",
        "correctness": 1,
        "gold_parse": "SELECT journalid, journalname FROM journal;"
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the name of the heaviest entrepreneur.",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "query": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups WHERE Currency_Code = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of the tourist attractions Vincent and Marcelle visit?",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Visits AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Visit_Details = value",
        "correctness": 0
    },
    {
        "db_id": "company_1",
        "query": "SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate",
        "question": "list the first and last names, and the addresses of all employees in the ascending order of their birth date.",
        "correctness": 1,
        "gold_parse": "SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate"
    },
    {
        "db_id": "concert_singer",
        "question": "Show the names of singers and the count of their occurrences.",
        "gold_parse": "",
        "query": "SELECT Name, COUNT(*) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT author_name ,  other_details FROM Authors",
        "question": "Show the names and other details for all authors.",
        "correctness": 1,
        "gold_parse": "SELECT author_name ,  other_details FROM Authors"
    },
    {
        "db_id": "student_assessment",
        "question": "List the id of students who registered some courses and the number of their registered courses?",
        "gold_parse": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
        "query": "SELECT student_id , Count ( * ) FROM Student_Course_Attendance GROUP BY student_id",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";",
        "question": "In which country does Roberto Almeida?",
        "correctness": 1,
        "gold_parse": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";"
    },
    {
        "db_id": "gas_company",
        "query": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'",
        "question": "What are the names of the managers for gas stations that are operated by the ExxonMobil company?",
        "correctness": 1,
        "gold_parse": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'"
    },
    {
        "db_id": "car_1",
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980?",
        "gold_parse": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1",
        "query": "select max ( MPG ) from cars_data where Cylinders > value or Year < value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
        "question": "How many distinct colleges are associated with players from the team with name \"Columbus Crew\".",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\""
    },
    {
        "db_id": "art_1",
        "query": "SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Pablo\"",
        "question": "What are the location and medium type of paintings that are created by the artist whose first name is Pablo?",
        "correctness": 1,
        "gold_parse": "SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Pablo\""
    },
    {
        "db_id": "csu_1",
        "query": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200",
        "question": "What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200"
    },
    {
        "db_id": "dog_kennels",
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "gold_parse": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "query": "select T3.owner_id , T2.zip_code from Charges as T1 join Owners as T2 join Dogs as T3 group by T3.owner_id order by sum ( T1.charge_amount ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the codes, names, and descriptions of the different document types?",
        "gold_parse": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types",
        "query": "SELECT T1.Document_Type_Name , T2.Document_Name , T1.Document_Type_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "query": "SELECT FIRST_NAME , LAST_NAME , DEPARTMENT_ID , DEPARTMENT_ID FROM employees",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "What are the names of customers who do not have any policies?",
        "gold_parse": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "query": "SELECT Customer_ID FROM Customers EXCEPT SELECT Customer_Details FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "news_report",
        "query": "SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1",
        "question": "What is the nationality of the journalist with the largest number of years working?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1"
    },
    {
        "db_id": "conference",
        "query": "SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1",
        "question": "Show the institution name and location of institution that is most recently founded.",
        "correctness": 1,
        "gold_parse": "SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1"
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < ( SELECT Min ( date_assigned_to ) FROM Staff_Department_Assignments )",
        "correctness": 0
    },
    {
        "db_id": "coffee_shop",
        "query": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1",
        "question": "Which month has the most happy hours?",
        "correctness": 1,
        "gold_parse": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC",
        "question": "Show the crime rates of counties in ascending order of number of police officers.",
        "correctness": 1,
        "gold_parse": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner",
        "question": "Find the manager and sponsor for each team and order them by the car owner.",
        "correctness": 1,
        "gold_parse": "SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the actual delivery dates of orders with quantity 1?",
        "gold_parse": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1",
        "query": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN Invoices AS T2 ON T1.Order_ID = T2.Order_ID JOIN Invoice_Items AS T3 ON T2.Invoice_ID = T3.Invoice_ID WHERE T3.Order_Quantity = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Find the number of apartments that have no facility.",
        "gold_parse": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)",
        "query": "SELECT Count ( * ) FROM Apartments AS T1 WHERE T1.apt_id NOT IN ( SELECT T2.apt_id FROM Apartment_Bookings AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "query": "SELECT title, year FROM paper WHERE year > 2010 ORDER BY year DESC;",
        "question": "What are the titles of papers published after 2010, ordered by year in descending order?",
        "correctness": 1,
        "gold_parse": "SELECT title, year FROM paper WHERE year > 2010 ORDER BY year DESC;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Population FROM city;",
        "question": "List the names of cities and their populations.",
        "correctness": 1,
        "gold_parse": "SELECT Name, Population FROM city;"
    },
    {
        "db_id": "hr_1",
        "question": "Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?",
        "gold_parse": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "query": "SELECT DISTINCT DEPARTMENT_ID FROM job_history GROUP BY DEPARTMENT_ID HAVING Count ( DISTINCT EMPLOYEE_ID ) > = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT COUNT(DISTINCT course_id) FROM Student_Enrolment_Courses;",
        "question": "How many distinct courses are students enrolled in?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT course_id) FROM Student_Enrolment_Courses;"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) FROM Invoices",
        "question": "Count the number of invoices.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Invoices"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
        "question": "Show all majors and major ranks for the university with name Augustana College.",
        "correctness": 1,
        "gold_parse": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'"
    },
    {
        "db_id": "sakila_1",
        "question": "Count the number of cities in Australia.",
        "gold_parse": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
        "query": "SELECT Count ( * ) FROM country WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"",
        "gold_parse": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"",
        "query": "SELECT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = value AND T2.Accreditation_type = value",
        "correctness": 0
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood",
        "question": "How many stores are there in each neighborhood?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
        "question": "Find the name of the artist who made the album \"Balls to the Wall\".",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\""
    },
    {
        "db_id": "e_learning",
        "question": "What is the name of each course and the corresponding number of student enrollment?",
        "gold_parse": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
        "query": "SELECT T1.course_name , Count ( * ) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find courses that ran in Fall 2009 but not in Spring 2010.",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query": "SELECT T1.semester FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year ! = value",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "query": "SELECT AVG(Age) FROM conductor;",
        "question": "What is the average age of conductors?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(Age) FROM conductor;"
    },
    {
        "db_id": "world_1",
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "gold_parse": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "query": "select avg ( GNP ) , sum ( Population ) from country",
        "correctness": 0
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which policy type appears most frequently in the available policies?",
        "correctness": 1,
        "gold_parse": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "video_game",
        "query": "SELECT DISTINCT Franchise FROM game",
        "question": "Show all distinct franchises of games.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Franchise FROM game"
    },
    {
        "db_id": "club_1",
        "question": "Count the total number of clubs.",
        "gold_parse": "SELECT count(*) FROM club",
        "query": "SELECT Count ( * ) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "query": "SELECT venuename, title FROM venue JOIN paper ON venue.venueid = paper.venueid ORDER BY venuename ASC;",
        "question": "What are the venue names and titles of papers ordered by the venue name in ascending order?",
        "correctness": 1,
        "gold_parse": "SELECT venuename, title FROM venue JOIN paper ON venue.venueid = paper.venueid ORDER BY venuename ASC;"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"",
        "question": "Find the number of albums by the artist \"Metallica\".",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1",
        "question": "What are the name, latitude, and city of the station with the lowest latitude?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1"
    },
    {
        "db_id": "movie_2",
        "query": "SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "question": "Find the name of all movies that are not played in Odeon theater.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20",
        "question": "What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = \"Sandwich\";",
        "question": "What is the description of the restaurant type Sandwich?",
        "correctness": 1,
        "gold_parse": "SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = \"Sandwich\";"
    },
    {
        "db_id": "party_host",
        "query": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
        "question": "Which nations have both hosts of age above 45 and hosts of age below 35?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance",
        "question": "What is the sum of checking and savings balances for all customers, ordered by the total balance?",
        "correctness": 1,
        "gold_parse": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'",
        "question": "What are the names of instructors who have taught C Programming courses?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood",
        "question": "find the number of stores in each neighborhood.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood"
    },
    {
        "db_id": "storm_record",
        "question": "Show all storm names affecting region \"Denmark\".",
        "gold_parse": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN region AS T2 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID AND T3.Region_id = T2.Region_id WHERE T2.Region_code = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of courses that have 'Math' in their description?",
        "gold_parse": "",
        "query": "SELECT course_name FROM Courses WHERE course_description LIKE '%Math%';",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?",
        "gold_parse": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",
        "query": "SELECT T1.driverRef , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds < value",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code",
        "question": "For each policy type, return its type code and its count in the record.",
        "correctness": 1,
        "gold_parse": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code"
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of products purchased by at least two different customers?",
        "gold_parse": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2",
        "query": "SELECT DISTINCT product_name FROM Products",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorid FROM author WHERE authorname = 'John Doe';",
        "question": "What is the ID of the author named John Doe?",
        "correctness": 1,
        "gold_parse": "SELECT authorid FROM author WHERE authorname = 'John Doe';"
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the average time span of contact channels in the database?",
        "gold_parse": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels",
        "query": "SELECT Avg ( active_to_date ) FROM Customer_Contact_Channels",
        "correctness": 0
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)",
        "question": "List the names of languages that are not the official language of any countries.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)"
    },
    {
        "db_id": "storm_record",
        "question": "How many regions do we have?",
        "gold_parse": "SELECT count(*) FROM region",
        "query": "SELECT Count ( * ) FROM storm",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum student ID for each section description?",
        "gold_parse": "",
        "query": "SELECT section_description, MAX(student_id) FROM Sections JOIN Students ON Sections.section_id = Students.student_id;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Count the number of properties and the average room count where the property name is equal to the feature name.",
        "gold_parse": "",
        "query": "SELECT COUNT(property_id), AVG(room_count) FROM Properties WHERE property_name = (SELECT feature_name FROM Other_Available_Features);",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "query": "SELECT AVG(Horsepower) FROM cars_data;",
        "question": "What is the average horsepower of cars?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(Horsepower) FROM cars_data;"
    },
    {
        "db_id": "sakila_1",
        "question": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.",
        "gold_parse": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
        "query": "SELECT title FROM film WHERE replacement_cost > value OR replacement_cost < value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_name FROM Courses WHERE course_name LIKE '%Math%';",
        "question": "What are the names of courses that have 'Math' in their name?",
        "correctness": 1,
        "gold_parse": "SELECT course_name FROM Courses WHERE course_name LIKE '%Math%';"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY flavor",
        "question": "Return a list of the id and flavor for Cakes ordered by flavor.",
        "correctness": 1,
        "gold_parse": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY flavor"
    },
    {
        "db_id": "small_bank_1",
        "query": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'",
        "question": "Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'.",
        "correctness": 1,
        "gold_parse": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'"
    },
    {
        "db_id": "flight_2",
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "gold_parse": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "query": "select T2.Abbreviation , T2.Country from flights as T1 join airlines as T2 order by T1.FlightNo limit value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"",
        "question": "Tell me the booking status code for the apartment with number \"Suite 634\".",
        "correctness": 1,
        "gold_parse": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\""
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'New York');",
        "question": "What are the names of airports in New York?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'New York');"
    },
    {
        "db_id": "flight_company",
        "question": "List the id, country, city and name of the airports ordered alphabetically by the name.",
        "gold_parse": "SELECT id ,  country ,  city ,  name FROM airport ORDER BY name",
        "query": "SELECT id , City , name FROM airport ORDER BY name Asc",
        "correctness": 0
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950",
        "question": "Show the provinces that have both institutions founded before 1920 and institutions founded after 1950.",
        "correctness": 1,
        "gold_parse": "SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950"
    },
    {
        "db_id": "network_1",
        "question": "Return the names of friends of the high school student Kyle.",
        "gold_parse": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "query": "select name from Highschooler where grade = value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
        "question": "What are the id of students who registered course 301?",
        "correctness": 1,
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301"
    },
    {
        "db_id": "news_report",
        "query": "SELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality",
        "question": "Show the different nationalities and the number of journalists of each nationality.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show ids for all documents in type CV without expense budgets.",
        "gold_parse": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
        "query": "SELECT T1.Document_ID FROM Documents AS T1 EXCEPT SELECT T3.Document_ID FROM Ref_Document_Types AS T2 JOIN Documents AS T1 ON T2.Document_Type_Code = T1.Document_Type_Code JOIN Documents_with_Expenses AS T3 ON T1.Document_ID = T3.Document_ID WHERE T2.Document_Type_Name = value",
        "correctness": 0
    },
    {
        "db_id": "book_2",
        "query": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC",
        "question": "Show the titles of books in descending order of publication price.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC"
    },
    {
        "db_id": "flight_4",
        "question": "Which countries has the most number of airlines?",
        "gold_parse": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T3.country FROM routes AS T1 JOIN airports AS T2 ON T2.apid = T1.dst_apid JOIN airlines AS T3 ON T1.alid = T3.alid GROUP BY T2.country ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "riding_club",
        "query": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)",
        "question": "List the names of players that do not have coaches.",
        "correctness": 1,
        "gold_parse": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1",
        "question": "What are the names of institutions that have 1 or more championships?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
        "question": "What are the names of pilots who are younger than 35 and have a plane named Piper Cub?",
        "correctness": 1,
        "gold_parse": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'"
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MAX_SALARY LIKE value AND MAX_SALARY < = value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(DISTINCT allergytype) FROM Allergy_type",
        "question": "How many distinct allergies are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT allergytype) FROM Allergy_type"
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "question": "Find the name and budget of departments whose budgets are more than the average budget.",
        "correctness": 1,
        "gold_parse": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)"
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the average age of the dogs who went through treatments.",
        "gold_parse": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "query": "SELECT Avg ( age ) FROM Dogs",
        "correctness": 0
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26",
        "question": "Please list the names of races with drivers aged 26 or older participating.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26"
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT Name FROM club WHERE Manufacturer != \"Nike\"",
        "question": "List the name of clubs whose manufacturer is not \"Nike\"",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM club WHERE Manufacturer != \"Nike\""
    },
    {
        "db_id": "flight_1",
        "question": "What is the count of distinct employees with certificates?",
        "gold_parse": "SELECT count(DISTINCT eid) FROM Certificate",
        "query": "SELECT Count ( * ) FROM flight",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT T1.Famous_Release_date , T3.Date_of_ceremony FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID JOIN music_festival AS T3 ON T2.Volume_ID = T3.Volume",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show names for all aircrafts of which John Williams has certificates.",
        "gold_parse": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "query": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'",
        "question": "Which head's name has the substring 'Ha'? List the id and name.",
        "correctness": 1,
        "gold_parse": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'"
    },
    {
        "db_id": "department_management",
        "question": "In which year were most departments established?",
        "gold_parse": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name FROM department GROUP BY Department_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT name FROM instructor WHERE name LIKE '%dar%'",
        "question": "Find the names of all instructors whose name includes the substring \u201cdar\u201d.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM instructor WHERE name LIKE '%dar%'"
    },
    {
        "db_id": "roller_coaster",
        "question": "What are the speeds of the longest roller coaster?",
        "gold_parse": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1",
        "query": "SELECT Speed FROM roller_coaster ORDER BY Height Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Calculate the average third other feature for properties with more than 10 rooms.",
        "gold_parse": "",
        "query": "SELECT property_address, AVG(oth_feature_3) FROM Properties WHERE room_count > 10;",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the physician who prescribed the highest dose. What is his or her name?",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "query": "SELECT Name FROM Physician GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "planet_1",
        "query": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
        "question": "What is the total weight for all packages that Leo Wong sent?",
        "correctness": 1,
        "gold_parse": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT name FROM Reviewer UNION SELECT title FROM Movie",
        "question": "Return all reviewer names and movie names together in a single list.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Reviewer UNION SELECT title FROM Movie"
    },
    {
        "db_id": "address_1",
        "query": "SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  \"BAL\"",
        "question": "What is the sum of distances between BAL and other cities?",
        "correctness": 1,
        "gold_parse": "SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  \"BAL\""
    },
    {
        "db_id": "college_3",
        "question": "What are the maximum and minumum grade points?",
        "gold_parse": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION",
        "query": "SELECT Max ( gradepoint ) , Min ( lettergrade ) FROM Gradeconversion",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"",
        "question": "Which customers have an insurance policy with the type code \"Deputy\"? Give me the customer details.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\""
    },
    {
        "db_id": "address_1",
        "query": "select distinct state from city",
        "question": "List all different states .",
        "correctness": 1,
        "gold_parse": "select distinct state from city"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";",
        "question": "List the name of all tracks in the playlists of Movies.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";"
    },
    {
        "db_id": "store_product",
        "question": "Which district has the least area?",
        "gold_parse": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1",
        "query": "SELECT Headquartered_City FROM district ORDER BY City_Area Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "What are the nationalities of conductors who are 70 years old?",
        "gold_parse": "",
        "query": "SELECT Nationality FROM conductor WHERE Nationality IN (SELECT Nationality FROM conductor WHERE Age = 70);",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT Name FROM GENRE",
        "question": "List the names of all music genres.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM GENRE"
    },
    {
        "db_id": "region_building",
        "query": "SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
        "question": "Show addresses of buildings and the capitals of regions they are in.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Ref_Service_Types AS T1 JOIN Drama_Workshop_Groups AS T2 JOIN Services AS T3 ON T1.Service_Type_Code = T3.Service_Type_Code AND T3.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Parent_Service_Type_Code = value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investors who have invested in two or more entrepreneurs.",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2",
        "query": "SELECT Company FROM entrepreneur GROUP BY Investor HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "query": "SELECT count(*) FROM company",
        "question": "What is the total number of companies?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM company"
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\"",
        "question": "Show the police force shared by counties with location on the east and west.",
        "correctness": 1,
        "gold_parse": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\""
    },
    {
        "db_id": "wine_1",
        "question": "What are the countries for appelations with at most 3 wines?",
        "gold_parse": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3",
        "query": "SELECT Appelation FROM wine GROUP BY Appelation HAVING Count ( * ) < = value",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "Show the date of the tallest perpetrator.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
    },
    {
        "db_id": "music_2",
        "question": "What information is there on albums from 2010?",
        "gold_parse": "SELECT * FROM Albums WHERE YEAR  =  2010",
        "query": "SELECT * FROM Albums WHERE Year > = value AND Year < = value",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the id of the order made most recently.",
        "gold_parse": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "query": "SELECT T2.order_id FROM Orders AS T1 JOIN Order_Items AS T2 ON T2.order_id = T1.order_id JOIN Shipments AS T3 ON T1.order_id = T3.order_id ORDER BY T3.shipment_date Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the different states that have students trying out?",
        "gold_parse": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName",
        "query": "SELECT DISTINCT state FROM College",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "query": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle",
        "question": "List the names of battles and the ships lost in them.",
        "correctness": 1,
        "gold_parse": "SELECT B.name, S.name FROM battle B JOIN ship S ON B.id = S.lost_in_battle"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
        "question": "What is the total weight of all the packages that customer Leo Wong sent?",
        "correctness": 1,
        "gold_parse": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many departments are there for each student's last name?",
        "gold_parse": "",
        "query": "SELECT last_name, COUNT(department_id) FROM Students JOIN Departments ON Students.student_id = Departments.department_id;",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the facility codes of apartments with more than 4 bedrooms.",
        "gold_parse": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4",
        "query": "SELECT facility_code FROM Apartment_Facilities GROUP BY facility_code HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "query": "SELECT department, COUNT(*) FROM course GROUP BY department;",
        "question": "How many courses are there in each department?",
        "correctness": 1,
        "gold_parse": "SELECT department, COUNT(*) FROM course GROUP BY department;"
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names and number of commercial properties?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(*) FROM Properties WHERE property_type_code = 'COM' GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students are over 18 and do not have allergy to food type or animal type?",
        "gold_parse": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "correctness": 0
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"",
        "question": "Which papers have \"Stephanie Weirich\" as an author?",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\""
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Nationality, COUNT(*) FROM conductor GROUP BY Nationality;",
        "question": "How many conductors are there for each nationality?",
        "correctness": 1,
        "gold_parse": "SELECT Nationality, COUNT(*) FROM conductor GROUP BY Nationality;"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
        "question": "What are the names of regions with two or more storms?",
        "correctness": 1,
        "gold_parse": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "world_1",
        "question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "gold_parse": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "query": "SELECT Avg ( LifeExpectancy ) FROM country WHERE Continent = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Give me the minimum and maximum bathroom count among all the apartments.",
        "gold_parse": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments",
        "query": "SELECT Max ( bathroom_count ) , Max ( bathroom_count ) FROM Apartments",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)",
        "question": "What are the names of all aircrafts that can cover more distances than average?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id > 20;",
        "question": "What are the full names of car makers with IDs greater than 20?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id > 20;"
    },
    {
        "db_id": "gas_company",
        "question": "List the main industry with highest total market value and its number of companies.",
        "gold_parse": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",
        "query": "SELECT Company , Sales_billion FROM company ORDER BY Sales_billion Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "How many stores are there?",
        "gold_parse": "SELECT count(*) FROM store",
        "query": "SELECT Count ( * ) FROM actor",
        "correctness": 0
    },
    {
        "db_id": "company_employee",
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "gold_parse": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
        "query": "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Sales_in_Billion Desc",
        "correctness": 0
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT \tcount(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'",
        "question": "How many pilots whose planes are in Chicago?",
        "correctness": 1,
        "gold_parse": "SELECT \tcount(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30",
        "question": "How many pilots who are older than 40 or younger than 30?",
        "correctness": 1,
        "gold_parse": "SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30"
    },
    {
        "db_id": "geography",
        "question": "What is the smallest average population by country in cities?",
        "gold_parse": "",
        "query": "SELECT country_name, AVG(population) FROM city GROUP BY country_name;",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "question": "How many students are attending English courses?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\""
    },
    {
        "db_id": "farm",
        "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
        "question": "What are the census rankings of cities that do not have the status \"Village\"?",
        "correctness": 1,
        "gold_parse": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\""
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "gold_parse": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "query": "SELECT first_name FROM Students UNION SELECT first_name FROM Students",
        "correctness": 0
    },
    {
        "db_id": "government_shift",
        "query": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" AND t4.services_and_channels_details  =  \"bad\"",
        "question": "Which services are both used by the customer \"Hardy Kutch\" and are rated as \"bad\" in a customer interaction? Give me the service details.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" AND t4.services_and_channels_details  =  \"bad\""
    },
    {
        "db_id": "pets_1",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "gold_parse": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "query": "SELECT PetType , pet_age FROM Pets ORDER BY pet_age Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\"",
        "question": "Show the short names of the buildings managed by \"Emma\".",
        "correctness": 1,
        "gold_parse": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\""
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the payment method that is used most frequently.",
        "correctness": 1,
        "gold_parse": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "wrestler",
        "question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.",
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "query": "SELECT DISTINCT T1.Name FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Team ! = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;",
        "question": "Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.",
        "correctness": 1,
        "gold_parse": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000",
        "question": "Which countries have a population over 50 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000"
    },
    {
        "db_id": "body_builder",
        "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "question": "What is the name of the body builder with the greatest body weight?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1"
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*)  >  3",
        "question": "List the affiliations shared by more than three city channels.",
        "correctness": 1,
        "gold_parse": "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*)  >  3"
    },
    {
        "db_id": "world_1",
        "question": "Sum the population of cities where the language is not official.",
        "gold_parse": "",
        "query": "SELECT Language, SUM(Population) FROM countrylanguage JOIN city ON countrylanguage.CountryCode = city.CountryCode WHERE IsOfficial = 'F';",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?",
        "gold_parse": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",
        "query": "SELECT T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.rating < value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which state has Death Valley as its lowest point?",
        "gold_parse": "",
        "query": "SELECT state_name, highest_point FROM highlow WHERE lowest_point = 'Death Valley';",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "What is the average and minimum age of all artists from United States.",
        "gold_parse": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'",
        "query": "SELECT Avg ( Age ) , Max ( Age ) FROM artist WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "What is the average name of singers?",
        "gold_parse": "",
        "query": "SELECT AVG(Name) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "question": "What are the id of students who registered courses or attended courses?",
        "correctness": 1,
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance"
    },
    {
        "db_id": "loan_1",
        "question": "What is the total account balance for customers with a credit score of above 100 for the different states?",
        "gold_parse": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state",
        "query": "SELECT state , Sum ( no_of_loans ) FROM customer WHERE credit_score > value GROUP BY state",
        "correctness": 0
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"",
        "question": "Which papers' first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"? Give me the titles of the papers.",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\""
    },
    {
        "db_id": "restaurant_bills",
        "query": "SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75",
        "question": "Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.",
        "correctness": 1,
        "gold_parse": "SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'",
        "question": "Count the number of B-52 Bombers owned by pilots under 35.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT max(OMIM) FROM enzyme",
        "question": "What is the maximum OMIM value in the database?",
        "correctness": 1,
        "gold_parse": "SELECT max(OMIM) FROM enzyme"
    },
    {
        "db_id": "ship_mission",
        "question": "What are the mission codes, fates, and names of the ships involved?",
        "gold_parse": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID",
        "query": "SELECT T1.Code , T2.Name , T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID",
        "correctness": 0
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;",
        "question": "Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.",
        "correctness": 1,
        "gold_parse": "SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;"
    },
    {
        "db_id": "apartment_rentals",
        "question": "Find the average room count of the apartments that have the \"Studio\" type code.",
        "gold_parse": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"",
        "query": "SELECT Avg ( bathroom_count ) FROM Apartments WHERE apt_type_code = value",
        "correctness": 0
    },
    {
        "db_id": "company_1",
        "query": "SELECT fname ,  lname FROM employee WHERE salary  >  30000",
        "question": "Return the first names and last names of employees who earn more than 30000 in salary.",
        "correctness": 1,
        "gold_parse": "SELECT fname ,  lname FROM employee WHERE salary  >  30000"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Make ,  COUNT(*) FROM driver GROUP BY Make",
        "question": "For each make, return the make and the count of drivers with that make.",
        "correctness": 1,
        "gold_parse": "SELECT Make ,  COUNT(*) FROM driver GROUP BY Make"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000",
        "question": "What are the employees's names for those that have salaries between 5000 and 10000?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MAX(jid) FROM journal);",
        "question": "What are the names of journals with the highest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MAX(jid) FROM journal);"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the invoice number and invoice date for the invoice with most number of transactions?",
        "correctness": 1,
        "gold_parse": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "geography",
        "question": "What are the states with a population density greater than 200 people per square kilometer?",
        "gold_parse": "",
        "query": "SELECT state_name, population FROM state WHERE density > 200;",
        "correctness": 0
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT count(DISTINCT staff_id) FROM Staff_in_meetings",
        "question": "How many staff have attended a meeting?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT staff_id) FROM Staff_in_meetings"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != \"Bugatti\"",
        "question": "List the names of drivers whose constructor is not \"Bugatti\".",
        "correctness": 1,
        "gold_parse": "SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != \"Bugatti\""
    },
    {
        "db_id": "product_catalog",
        "question": "What are the entry names of catalog with the attribute possessed by most entries.",
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
        "query": "SELECT catalog_name FROM Catalogs GROUP BY catalog_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "query": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000",
        "question": "What are the names of mountains that have a height of over 5000 or a prominence of over 1000?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "List the actual delivery date for all the orders with quantity 1",
        "gold_parse": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1",
        "query": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN Invoices AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT staff_details FROM Staff WHERE staff_id  =  100",
        "question": "What are the details for the staff member with id 100.",
        "correctness": 1,
        "gold_parse": "SELECT staff_details FROM Staff WHERE staff_id  =  100"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'",
        "question": "What are the names and results of battles between 1900 and 1950?",
        "correctness": 1,
        "gold_parse": "SELECT name, result FROM battle WHERE date BETWEEN '1900-01-01' AND '1950-01-01'"
    },
    {
        "db_id": "imdb",
        "question": "What are the titles and release years of TV series with more than 50 episodes?",
        "gold_parse": "",
        "query": "SELECT title, release_year FROM tv_series WHERE num_of_episodes < 50;",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the number of students playing as a goalie?",
        "gold_parse": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'",
        "query": "SELECT Count ( * ) FROM College",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Give the names of countries with English and French as official languages.",
        "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "query": "SELECT Continent FROM country WHERE Code2 = value INTERSECT SELECT Continent FROM country WHERE Code2 = value",
        "correctness": 0
    },
    {
        "db_id": "book_1",
        "query": "SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"Peter Doe\" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"James Smith\"",
        "question": "Show all book isbns which were ordered by both client Peter Doe and client James Smith.",
        "correctness": 1,
        "gold_parse": "SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"Peter Doe\" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"James Smith\""
    },
    {
        "db_id": "world_1",
        "question": "What is the continent name which Anguilla belongs to?",
        "gold_parse": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "query": "SELECT Continent FROM country",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MAX(jid) FROM journal);",
        "question": "What are the names of journals with the highest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MAX(jid) FROM journal);"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "question": "Find the names of customers who have no policies associated.",
        "correctness": 1,
        "gold_parse": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id"
    },
    {
        "db_id": "chinook_1",
        "question": "Find the cities corresponding to employees who help customers with the postal code 70174.",
        "gold_parse": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"",
        "query": "SELECT City FROM Customer WHERE PostalCode = value",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "query": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC",
        "question": "List the themes of parties in ascending order of number of hosts.",
        "correctness": 1,
        "gold_parse": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC"
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41",
        "question": "Return the names of planes owned by the pilot whose name is Smith and is 41 years old.",
        "correctness": 1,
        "gold_parse": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41"
    },
    {
        "db_id": "store_1",
        "question": "What is the the phone number of Nancy Edwards?",
        "gold_parse": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "query": "SELECT phone FROM customers WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the grapes and appelations of each wine?",
        "gold_parse": "SELECT Grape ,  Appelation FROM WINE",
        "query": "SELECT Winery , Name FROM wine",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT document_name ,  document_description FROM Documents",
        "question": "Show the names and descriptions for all documents.",
        "correctness": 1,
        "gold_parse": "SELECT document_name ,  document_description FROM Documents"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance",
        "question": "List the id of students who attended  statistics courses in the order of attendance date.",
        "correctness": 1,
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance"
    },
    {
        "db_id": "world_1",
        "question": "Give the language that is spoken in the most countries.",
        "gold_parse": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name FROM country GROUP BY Continent ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"",
        "gold_parse": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"",
        "query": "SELECT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.chip_model = value AND T1.Type = value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "gold_parse": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "query": "SELECT T1.School_name , T2.Budgeted , T2.total_budget_percent_budgeted FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > = value",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Which program is broadcast most frequently? Give me the program name.",
        "gold_parse": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT Name FROM channel GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
        "question": "Find the average and maximum value for each different content.",
        "correctness": 1,
        "gold_parse": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS"
    },
    {
        "db_id": "real_estate_properties",
        "question": "Show the property types and the number of properties in each, ordered by the number of properties in ascending order.",
        "gold_parse": "",
        "query": "SELECT property_type_code, COUNT(*) FROM Ref_Property_Types GROUP BY property_type_code ORDER BY COUNT(*) ASC;",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value AND MIN_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?",
        "gold_parse": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of all instructors in the Comp. Sci. department?",
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'",
        "query": "SELECT name FROM instructor",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "query": "SELECT count(*) FROM wrestler",
        "question": "How many wrestlers are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM wrestler"
    },
    {
        "db_id": "book_1",
        "query": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\" ORDER BY T1.saleprice LIMIT 1",
        "question": "What is the title of the book written by George Orwell that has the lowest sale price?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\" ORDER BY T1.saleprice LIMIT 1"
    },
    {
        "db_id": "election",
        "query": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1",
        "question": "Which county has the largest population? Give me the name of the county.",
        "correctness": 1,
        "gold_parse": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION",
        "question": "What are the numbers of paintings created before 1900 in different places?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION"
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id",
        "question": "Show the guest first names, start dates, and end dates of all the apartment bookings.",
        "correctness": 1,
        "gold_parse": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id"
    },
    {
        "db_id": "dorm_1",
        "question": "Find the first name of students living in city PHL whose age is between 20 and 25.",
        "gold_parse": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "query": "SELECT Fname FROM Student WHERE Age > = value AND Age < = value",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name of all the people who are older than at least one engineer? Order them by age.",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name GROUP BY T2.friend HAVING Sum ( T1.age ) > value",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "query": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2",
        "question": "What are the investors that have invested in at least two entrepreneurs?",
        "correctness": 1,
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID",
        "question": "For each student answer, find the first name of the student and the date of the answer.",
        "correctness": 1,
        "gold_parse": "SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE room_count > (SELECT Avg(room_count) FROM Properties);",
        "question": "What are the names of properties that have more rooms than the average?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE room_count > (SELECT Avg(room_count) FROM Properties);"
    },
    {
        "db_id": "world_1",
        "question": "What is the number of nations that use English and Dutch?",
        "gold_parse": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "query": "select count ( * ) from countrylanguage where Language = value intersect select T1.Continent from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.Language = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the top 5 genres by number of tracks. List genres name and total tracks.",
        "gold_parse": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5",
        "query": "SELECT name , Count ( * ) FROM genres GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id",
        "question": "What are the names and ids of the different categories, and how many films are in each?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id"
    },
    {
        "db_id": "movie_1",
        "question": "In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently?",
        "gold_parse": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year",
        "query": "SELECT T1.year FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars < = value ORDER BY T1.year Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What is the film title and inventory id of the item in the inventory which was rented most frequently?",
        "gold_parse": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.title , T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T2.inventory_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Reign ,  Days_held FROM wrestler",
        "question": "What are the reigns and days held of all wrestlers?",
        "correctness": 1,
        "gold_parse": "SELECT Reign ,  Days_held FROM wrestler"
    },
    {
        "db_id": "geography",
        "question": "Which states have a population less than 1,000,000?",
        "gold_parse": "",
        "query": "SELECT state_name, country_name FROM state WHERE population < 1000000;",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What is the name of the tourist attraction that is associated with the photo \"game1\"?",
        "gold_parse": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name , name FROM airport GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)",
        "question": "Retrieve the title of the paper that has the largest number of authors.",
        "correctness": 1,
        "gold_parse": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade = 12;",
        "question": "What are the names of highschoolers in grade 12?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE grade = 12;"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id",
        "question": "Which students have gone through any event? List the students' biographical data and event date.",
        "correctness": 1,
        "gold_parse": "SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_id ,  receipt_date FROM Documents;",
        "question": "List all document ids and receipt dates of documents.",
        "correctness": 1,
        "gold_parse": "SELECT document_id ,  receipt_date FROM Documents;"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC",
        "question": "Sort the student answer texts in descending order of their frequency of occurrence.",
        "correctness": 1,
        "gold_parse": "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC"
    },
    {
        "db_id": "ship_mission",
        "question": "Show codes and fates of missions, and names of ships involved.",
        "gold_parse": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID",
        "query": "SELECT T1.Code , T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "query": "SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100",
        "question": "What is the average attendance of stadiums with capacity percentage higher than 100%?",
        "correctness": 1,
        "gold_parse": "SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100"
    },
    {
        "db_id": "store_1",
        "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
        "question": "What is the name of all tracks in the album named Balls to the Wall?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles",
        "question": "What are the minimum, maximum, and average annual fuel costs across all vehicles?",
        "correctness": 1,
        "gold_parse": "SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)",
        "question": "Which paper has the most authors? Give me the paper title.",
        "correctness": 1,
        "gold_parse": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room",
        "question": "Return the name and number of reservations made for each of the rooms.",
        "correctness": 1,
        "gold_parse": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room"
    },
    {
        "db_id": "book_1",
        "query": "SELECT title FROM book EXCEPT SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
        "question": "Show all book titles for books that have no orders.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM book EXCEPT SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name, last_name, date_left FROM Students WHERE date_left IS NOT NULL;",
        "question": "What are the first and last names, and departure dates of students who have left?",
        "correctness": 1,
        "gold_parse": "SELECT first_name, last_name, date_left FROM Students WHERE date_left IS NOT NULL;"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the movie that is rated by most of times?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "query": "SELECT FIRST_NAME , LAST_NAME , MANAGER_ID , SALARY FROM employees",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "query": "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "How many invoices do we have?",
        "gold_parse": "SELECT count(*) FROM Invoices",
        "query": "SELECT Count ( * ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?",
        "gold_parse": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "query": "SELECT DISTINCT artist_name FROM song EXCEPT SELECT artist_name FROM song WHERE rating > value",
        "correctness": 0
    },
    {
        "db_id": "coffee_shop",
        "question": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.",
        "gold_parse": "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase",
        "query": "SELECT Membership_card , Age , Address FROM member ORDER BY Time_of_purchase Asc",
        "correctness": 0
    },
    {
        "db_id": "boat_1",
        "query": "SELECT AVG(age) FROM Sailors WHERE rating  =  7",
        "question": "What is average age of all sailors who have a rating of 7?",
        "correctness": 1,
        "gold_parse": "SELECT AVG(age) FROM Sailors WHERE rating  =  7"
    },
    {
        "db_id": "advising",
        "query": "SELECT name FROM course WHERE num_enrolled < 30;",
        "question": "What are the names of courses with less than 30 students enrolled?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM course WHERE num_enrolled < 30;"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'",
        "question": "Find the name and salary of the instructors who are advisors of any student from History department?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name, last_name FROM Students WHERE email_address IS NOT NULL;",
        "question": "What are the first and last names of students who have an email address?",
        "correctness": 1,
        "gold_parse": "SELECT first_name, last_name FROM Students WHERE email_address IS NOT NULL;"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, Title FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position = 1;",
        "question": "What are the names of singers and the titles of their songs that reached the highest position?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Title FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Highest_Position = 1;"
    },
    {
        "db_id": "match_season",
        "question": "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.",
        "gold_parse": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = value",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "list the card number of all members whose hometown address includes word \"Kentucky\".",
        "gold_parse": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
        "query": "SELECT Count ( * ) FROM member WHERE Hometown LIKE value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Show the names of airlines and their abbreviations for those with abbreviation greater than 'AA'.",
        "gold_parse": "",
        "query": "SELECT T1.Airline, T2.Abbreviation FROM airlines AS T1 JOIN airlines AS T2 ON T1.uid = T2.uid WHERE T2.Abbreviation > 'AA';",
        "correctness": 0
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT T1.age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id ORDER BY T2.search_datetime LIMIT 1;",
        "question": "Return the age category for the user who made the earliest search.",
        "correctness": 1,
        "gold_parse": "SELECT T1.age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id ORDER BY T2.search_datetime LIMIT 1;"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname, COUNT(*) FROM author JOIN writes ON author.authorid = writes.authorid GROUP BY authorname;",
        "question": "How many papers has each author written?",
        "correctness": 1,
        "gold_parse": "SELECT authorname, COUNT(*) FROM author JOIN writes ON author.authorid = writes.authorid GROUP BY authorname;"
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT name FROM store ORDER BY date_opened",
        "question": "Sort all store names by store open date.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM store ORDER BY date_opened"
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many assets does each third party company supply? List the count and the company id.",
        "gold_parse": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id",
        "query": "SELECT Count ( * ) , company_id FROM Third_Party_Companies GROUP BY company_id",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What is the average number of gold medals for clubs?",
        "gold_parse": "SELECT avg(Gold) FROM club_rank",
        "query": "SELECT Avg ( Gold ) , Avg ( Gold ) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Which employees have either destroyed a document or made an authorization to do so? Return their employee ids.",
        "gold_parse": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "query": "SELECT T1.Employee_ID FROM Employees AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Employee_ID = T2.Destroyed_by_Employee_ID GROUP BY T2.Destroyed_by_Employee_ID HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the total order quantities of photo products?",
        "gold_parse": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"",
        "query": "SELECT Sum ( Product_Price ) FROM Products",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;",
        "question": "How many times the number of adults and kids staying in a room reached the maximum capacity of the room?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;"
    },
    {
        "db_id": "hr_1",
        "question": "display the country ID and number of cities for each country.",
        "gold_parse": "SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id",
        "query": "SELECT COUNTRY_ID , Count ( * ) FROM countries GROUP BY COUNTRY_ID",
        "correctness": 0
    },
    {
        "db_id": "network_1",
        "question": "How many likes correspond to each student id?",
        "gold_parse": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "query": "SELECT student_id , Count ( * ) FROM Friend GROUP BY student_id",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the countries where either English or Dutch is the official language?",
        "gold_parse": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "query": "select T1.Continent from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where T2.IsOfficial = value or T2.IsOfficial = value",
        "correctness": 0
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT count(DISTINCT Province) FROM institution",
        "question": "How many distinct provinces are the institutions in?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT Province) FROM institution"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013",
        "question": "What are the types of powertrains that have vehicles that were made in both 2013 and 2014?",
        "correctness": 1,
        "gold_parse": "SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013"
    },
    {
        "db_id": "government_shift",
        "query": "SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services",
        "question": "Count the total number of available customers and services details.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services"
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name , IATA FROM airport GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "riding_club",
        "query": "SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation",
        "question": "Show different occupations along with the number of players in each occupation.",
        "correctness": 1,
        "gold_parse": "SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, Birth_Year FROM singer WHERE Birth_Year IS NOT NULL;",
        "question": "What are the names and birth years of singers who have a recorded birth year?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Birth_Year FROM singer WHERE Birth_Year IS NOT NULL;"
    },
    {
        "db_id": "formula_1",
        "question": "Give me a list of names and years of races that had any driver whose forename is Lewis?",
        "gold_parse": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
        "query": "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
        "correctness": 0
    },
    {
        "db_id": "election",
        "query": "SELECT max(Population) ,  min(Population) FROM county",
        "question": "Return the maximum and minimum population among all counties.",
        "correctness": 1,
        "gold_parse": "SELECT max(Population) ,  min(Population) FROM county"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT count(DISTINCT CONTENTS) ,  warehouse FROM boxes GROUP BY warehouse",
        "question": "How many different types of contents are stored in each warehouse?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT CONTENTS) ,  warehouse FROM boxes GROUP BY warehouse"
    },
    {
        "db_id": "network_2",
        "question": "What is the name of all the people who are older than at least one engineer? Order them by age.",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name GROUP BY T2.friend HAVING Sum ( T1.age ) > = value",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the number of medications prescribed for each brand.",
        "gold_parse": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand",
        "query": "SELECT Count ( * ) , Brand FROM Medication GROUP BY Brand",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "query": "SELECT DISTINCT POSITION FROM match_season",
        "question": "What are the different positions for match season?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT POSITION FROM match_season"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which tourist attractions are related to royal family? Tell me their details and how we can get there.",
        "gold_parse": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID",
        "query": "SELECT T3.Market_Details , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Street_Markets AS T3 ON T2.Tourist_Attraction_ID = T3.Market_ID WHERE T1.Address = value",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "query": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10",
        "question": "Which singers have songs that reached top 10 positions?",
        "correctness": 1,
        "gold_parse": "SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Highest_Position < 10"
    },
    {
        "db_id": "soccer_2",
        "question": "What is the name of every college in alphabetical order that has more than 18000 students enrolled?",
        "gold_parse": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T1.enr > value GROUP BY T2.cName ORDER BY Count ( * ) Desc",
        "correctness": 0
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT sum(population) ,  avg(population) FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district)",
        "question": "Find the total and average population of the districts which have some spokesman.",
        "correctness": 1,
        "gold_parse": "SELECT sum(population) ,  avg(population) FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district)"
    },
    {
        "db_id": "e_learning",
        "question": "What are the personal names used both by some course authors and some students?",
        "gold_parse": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students",
        "query": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Course_Authors_and_Tutors",
        "correctness": 0
    },
    {
        "db_id": "headphone_store",
        "query": "SELECT count(DISTINCT neighborhood) FROM store",
        "question": "How many different neighborhoods are there for all stores?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT neighborhood) FROM store"
    },
    {
        "db_id": "world_1",
        "question": "Find the maximum population of countries where the language is not official.",
        "gold_parse": "",
        "query": "SELECT Language, MAX(Population) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'F';",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the number of students that have at least one grade \"B\".",
        "gold_parse": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Major = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";",
        "question": "List all tracks bought by customer Daan Peeters.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";"
    },
    {
        "db_id": "network_1",
        "question": "What are the different names of highschoolers?",
        "gold_parse": "",
        "query": "SELECT DISTINCT name FROM Highschooler;",
        "correctness": 0
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
        "question": "Which institution is the author \"Matthias Blume\" belong to? Give me the name of the institution.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\""
    },
    {
        "db_id": "formula_1",
        "question": "How many drivers participated in the race Australian Grand Prix held in 2009?",
        "gold_parse": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009",
        "query": "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND circuitRef = value",
        "correctness": 0
    },
    {
        "db_id": "university_rank",
        "query": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.reputation_point",
        "question": "List all university names in ascending order of their reputation points.",
        "correctness": 1,
        "gold_parse": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.reputation_point"
    },
    {
        "db_id": "journal_committee",
        "question": "What is the name of the youngest editor?",
        "gold_parse": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1",
        "query": "SELECT Name FROM editor ORDER BY Age Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "query": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500",
        "question": "Find the official names of cities with population bigger than 1500 or smaller than 500.",
        "correctness": 1,
        "gold_parse": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500"
    },
    {
        "db_id": "flight_1",
        "question": "What are the names of the aircraft that the least people are certified to fly?",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "query": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150",
        "question": "Which rooms cost between 120 and 150? Give me the room names.",
        "correctness": 1,
        "gold_parse": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150"
    },
    {
        "db_id": "geography",
        "question": "How many mountains are there outside of Canada?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM mountain WHERE country_name = 'CAN';",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "query": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2",
        "question": "Show all storm names except for those with at least two affected regions.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT fname FROM authors WHERE lname  =  \"Ueno\"",
        "question": "Which authors have last name \"Ueno\"? List their first names.",
        "correctness": 1,
        "gold_parse": "SELECT fname FROM authors WHERE lname  =  \"Ueno\""
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;",
        "question": "List the manger's name and number of shipments under his management.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;"
    },
    {
        "db_id": "farm",
        "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
        "question": "Please show the different statuses, ordered by the number of cities that have each.",
        "correctness": 1,
        "gold_parse": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1",
        "question": "Who is the author of paper 1?",
        "correctness": 1,
        "gold_parse": "SELECT authorname FROM author JOIN writes ON author.authorid = writes.authorid WHERE writes.paperid = 1"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the film title and inventory id of the item in the inventory which was rented most frequently?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "music_1",
        "question": "How many songs have 4 minute duration?",
        "gold_parse": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "query": "SELECT Count ( * ) FROM genre",
        "correctness": 0
    },
    {
        "db_id": "region_building",
        "query": "SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1",
        "question": "Which regions have more than one building? Give me the names of the regions.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "game_injury",
        "query": "SELECT count(*) FROM game WHERE season  >  2007",
        "question": "How many games are held after season 2007?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM game WHERE season  >  2007"
    },
    {
        "db_id": "chinook_1",
        "question": "What are the last names of employees who serve at most 20 customers?",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "query": "SELECT T2.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING Count ( * ) < = value",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What is the average birth year of singers with a net worth less than 10 million?",
        "gold_parse": "",
        "query": "SELECT Singer_ID, AVG(Birth_Year) FROM singer WHERE Net_Worth_Millions < 10;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT COUNT(DISTINCT feature_type_code) FROM Other_Available_Features;",
        "question": "How many distinct feature types are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT feature_type_code) FROM Other_Available_Features;"
    },
    {
        "db_id": "party_host",
        "query": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID",
        "question": "Show the themes of parties and the names of the party hosts.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID"
    },
    {
        "db_id": "farm",
        "query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "correctness": 1,
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000"
    },
    {
        "db_id": "scholar",
        "query": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015",
        "question": "What journals published papers after the year 2015?",
        "correctness": 1,
        "gold_parse": "SELECT journalname FROM journal JOIN paper ON journal.journalid = paper.journalid WHERE paper.year > 2015"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT Driver FROM driver ORDER BY Points DESC",
        "question": "List all the driver names in descending order of points.",
        "correctness": 1,
        "gold_parse": "SELECT Driver FROM driver ORDER BY Points DESC"
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "query": "SELECT FIRST_NAME , LAST_NAME , SALARY , DEPARTMENT_ID FROM employees WHERE FIRST_NAME ! = value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Give the average number of working horses on farms with more than 5000 total horses.",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "query": "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Total_Horses > value",
        "correctness": 0
    },
    {
        "db_id": "address_1",
        "query": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000",
        "question": "Show me the city code of two cities with a distance less than 1000.",
        "correctness": 1,
        "gold_parse": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year",
        "question": "What is the average fastest lap speed for races held after 2004, for each race, ordered by year?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "List students whose first and last names are different.",
        "gold_parse": "",
        "query": "SELECT first_name, last_name FROM Students WHERE first_name = last_name;",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100",
        "question": "Which singers have a net worth greater than 100 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT datetime_detention_start FROM Detention",
        "question": "When did all the detentions start?",
        "correctness": 1,
        "gold_parse": "SELECT datetime_detention_start FROM Detention"
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "query": "SELECT * FROM jobs WHERE JOB_TITLE = value AND MIN_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_phone FROM available_policies",
        "question": "Find all the phone numbers.",
        "correctness": 1,
        "gold_parse": "SELECT customer_phone FROM available_policies"
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex",
        "question": "For each sex, what is the name and sex of the candidate with the oppose rate for their sex?",
        "correctness": 1,
        "gold_parse": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex"
    },
    {
        "db_id": "flight_2",
        "question": "Return the number of  airports.",
        "gold_parse": "SELECT count(*) FROM AIRPORTS",
        "query": "SELECT Count ( * ) FROM airlines",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"",
        "question": "Show the addresses and phones of all the buildings managed by \"Brenden\".",
        "correctness": 1,
        "gold_parse": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\""
    },
    {
        "db_id": "music_2",
        "question": "How many instruments does the song \"Le Pop\" use?",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(*) FROM Customers",
        "question": "Count the number of customers.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers"
    },
    {
        "db_id": "flight_2",
        "question": "What are the names of airlines with the minimum country?",
        "gold_parse": "",
        "query": "SELECT Airline FROM airlines WHERE Airline = (SELECT MIN(Country) FROM airlines);",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the name of albums that are released by aritist whose name has 'Led'",
        "gold_parse": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'",
        "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id WHERE T2.name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.",
        "gold_parse": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"",
        "query": "SELECT College FROM match_season WHERE Position = value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name",
        "question": "What are the names of all female candidates in alphabetical order (sex is F)?",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name"
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the agency id and details for the agency with the greatest number of clients.",
        "correctness": 1,
        "gold_parse": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "company_office",
        "question": "How many companies are there?",
        "gold_parse": "SELECT count(*) FROM Companies",
        "query": "SELECT Count ( * ) FROM buildings",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that have the feature with ID 5?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE property_id IN (SELECT property_id FROM Other_Property_Features WHERE feature_id = 5);",
        "correctness": 0
    },
    {
        "db_id": "country_language",
        "query": "SELECT T1.Name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the name of the country that has the greatest number of official languages.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'",
        "question": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'"
    },
    {
        "db_id": "debate",
        "query": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC",
        "question": "List the venues of debates in ascending order of the number of audience.",
        "correctness": 1,
        "gold_parse": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC"
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.mean_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "query": "SELECT id FROM trip ORDER BY duration LIMIT 1",
        "question": "What is the id of the shortest trip?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM trip ORDER BY duration LIMIT 1"
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value AND MAX_SALARY < value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "query": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "question": "What are the draft pick numbers and draft classes for players who play the Defender position?",
        "correctness": 1,
        "gold_parse": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\""
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, LifeExpectancy FROM country WHERE LifeExpectancy > (SELECT Avg(LifeExpectancy) FROM country);",
        "question": "What are the names and life expectancies of countries that have a life expectancy above the average?",
        "correctness": 1,
        "gold_parse": "SELECT Name, LifeExpectancy FROM country WHERE LifeExpectancy > (SELECT Avg(LifeExpectancy) FROM country);"
    },
    {
        "db_id": "student_assessment",
        "question": "Find id of candidates whose assessment code is \"Pass\"?",
        "gold_parse": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
        "query": "SELECT candidate_id FROM Candidate_Assessments WHERE qualification = value",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "What is the apartment number of the apartment with the most beds?",
        "gold_parse": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1",
        "query": "SELECT apt_number FROM Apartments GROUP BY apt_number ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find all the songs performed by artist with last name \"Heilo\"",
        "gold_parse": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\"",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T2.Lastname = value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "How much does the most expensive charge type costs?",
        "gold_parse": "SELECT max(charge_amount) FROM Charges",
        "query": "select charge_amount from Charges order by charge_amount desc limit value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Workflow",
        "query": "SELECT process_outcome_code ,  process_outcome_description FROM Process_outcomes",
        "question": "List the codes and descriptions for all process outcomes.",
        "correctness": 1,
        "gold_parse": "SELECT process_outcome_code ,  process_outcome_description FROM Process_outcomes"
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "What are all the distinct participant ids who attended any events?",
        "gold_parse": "SELECT count(DISTINCT participant_id) FROM participants_in_Events",
        "query": "SELECT DISTINCT Participant_ID FROM Participants_in_Events",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "query": "SELECT state_name FROM state WHERE population = 0;",
        "question": "Which states have a population of zero?",
        "correctness": 1,
        "gold_parse": "SELECT state_name FROM state WHERE population = 0;"
    },
    {
        "db_id": "college_3",
        "question": "Find the full names of faculties who are members of department with department number 520.",
        "gold_parse": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520",
        "query": "SELECT T1.Fname , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.DName = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_visibility_miles ) < value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Name the rivers that are shorter than 1000 kilometers.",
        "gold_parse": "",
        "query": "SELECT DISTINCT river_name FROM river WHERE length >= 1000;",
        "correctness": 0
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15",
        "question": "Which date corresponds to when a customer purchased a good costing over 15 dollars?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3",
        "question": "Show the types of questions that have at least three questions.",
        "correctness": 1,
        "gold_parse": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT avg(value) FROM boxes",
        "question": "Select the average value of all the boxes.",
        "correctness": 1,
        "gold_parse": "SELECT avg(value) FROM boxes"
    },
    {
        "db_id": "flight_4",
        "question": "How many routes end in a Canadian airport?",
        "gold_parse": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?",
        "gold_parse": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "query": "SELECT id FROM trip WHERE duration > ( SELECT Avg ( duration ) FROM trip WHERE subscription_type = value )",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "query": "SELECT Name FROM actor WHERE Age != 20",
        "question": "List the name of actors whose age is not 20.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM actor WHERE Age != 20"
    },
    {
        "db_id": "region_building",
        "query": "SELECT DISTINCT Address FROM building",
        "question": "Show the distinct addresses of buildings.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Address FROM building"
    },
    {
        "db_id": "car_1",
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "gold_parse": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent",
        "query": "select T1.Continent , count ( * ) from continents as T1 join countries as T2 on T1.ContId = T2.Continent group by T2.Continent",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "What are the country names, area and population which has both roller coasters with speed higher",
        "gold_parse": "SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  <  55",
        "query": "SELECT T2.Name , T2.Area , T2.Population FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID WHERE T1.Speed > value INTERSECT SELECT T2.Name , T2.Area , T2.Population FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID WHERE T1.Speed = value",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Engineering');",
        "question": "What are the names of journals that have the same name as 'Journal of Engineering'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Engineering');"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the number of documents with document type code CV or BK.",
        "gold_parse": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"",
        "query": "SELECT Count ( * ) FROM All_Documents WHERE Document_Type_Code = value",
        "correctness": 0
    },
    {
        "db_id": "art_1",
        "query": "SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  \"oil\" ORDER BY YEAR",
        "question": "List the painting id, location and title of the medium oil paintings ordered by year.",
        "correctness": 1,
        "gold_parse": "SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  \"oil\" ORDER BY YEAR"
    },
    {
        "db_id": "vehicle_rent",
        "query": "SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain",
        "question": "Find the average city and highway fuel rates for cars with different powertrain types.",
        "correctness": 1,
        "gold_parse": "SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain"
    },
    {
        "db_id": "college_2",
        "question": "How many students have advisors?",
        "gold_parse": "SELECT count(DISTINCT s_id) FROM advisor",
        "query": "SELECT Count ( * ) FROM classroom",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"",
        "question": "Count the number of tracks that are of the media type \"AAC audio file\".",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\""
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MAX_SALARY LIKE value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5",
        "question": "What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.",
        "correctness": 1,
        "gold_parse": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5"
    },
    {
        "db_id": "advising",
        "question": "Find the IDs of semesters that do not have any courses?",
        "gold_parse": "",
        "query": "SELECT semester_id FROM semester EXCEPT SELECT course_id FROM course_prerequisite;",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the maximum property feature description for each property address where the vendor requested price is equal to the maximum buyer offered price?",
        "gold_parse": "",
        "query": "SELECT property_address, MAX(property_feature_description) FROM Properties JOIN Other_Property_Features ON Properties.property_id = Other_Property_Features.property_id WHERE vendor_requested_price = (SELECT MAX(buyer_offered_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "battle_death",
        "question": "How many ships ended up being 'Captured'?",
        "gold_parse": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
        "query": "SELECT Count ( * ) FROM battle WHERE result = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which transportation method is used the most often to get to tourist attractions?",
        "gold_parse": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT T1.Location_Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "online_exams",
        "query": "SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC",
        "question": "For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC"
    },
    {
        "db_id": "hr_1",
        "question": "Give the first name and job id for all employees in the Finance department.",
        "gold_parse": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'",
        "query": "SELECT T2.FIRST_NAME , T2.SALARY FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the name and phone for customers with a mailshot with outcome code 'No Response'.",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'",
        "query": "SELECT T1.customer_name , T1.customer_phone FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name",
        "question": "Show all product names and the total quantity ordered for each product name.",
        "correctness": 1,
        "gold_parse": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT paper_id FROM Paper WHERE title LIKE \"%translation%\"",
        "question": "What are the ids for papers with titles containing 'translation'?",
        "correctness": 1,
        "gold_parse": "SELECT paper_id FROM Paper WHERE title LIKE \"%translation%\""
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of products.",
        "gold_parse": "SELECT count(*) FROM products",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "query": "SELECT T2.Sex , T1.Consider_rate , T1.Oppose_rate FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Unsure_rate Asc",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that are apartments?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE property_type_code = 'APT';",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Building = value AND T1.Building = value",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);",
        "question": "What are the names of the shortest poker players?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height = (SELECT MIN(Height) FROM people);"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";",
        "question": "What is the decor of room Recluse and defiance?",
        "correctness": 1,
        "gold_parse": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";"
    },
    {
        "db_id": "scholar",
        "question": "Count the number of keyphrase IDs for each paper title.",
        "gold_parse": "",
        "query": "SELECT title, COUNT(keyphraseid) FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid WHERE keyphraseid IS NOT NULL GROUP BY title;",
        "correctness": 0
    },
    {
        "db_id": "club_leader",
        "query": "SELECT Name FROM member ORDER BY Age ASC",
        "question": "List the names of members in ascending order of age.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM member ORDER BY Age ASC"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.teacher_details ,  T1.teacher_id FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1",
        "question": "List the detail and id of the teacher who teaches the most courses.",
        "correctness": 1,
        "gold_parse": "SELECT T1.teacher_details ,  T1.teacher_id FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "imdb",
        "question": "Which movies do not have a recorded budget?",
        "gold_parse": "",
        "query": "SELECT title FROM movie WHERE budget IS NOT NULL;",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id = (SELECT MIN(Id) FROM car_makers);",
        "question": "What are the full names of car makers with the lowest car maker ID?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id = (SELECT MIN(Id) FROM car_makers);"
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who registered for some courses but had the least number of courses for all students?",
        "gold_parse": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1",
        "query": "SELECT student_id FROM Student_Course_Attendance GROUP BY student_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "video_game",
        "query": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)",
        "question": "List the name of players that do not play any game.",
        "correctness": 1,
        "gold_parse": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)"
    },
    {
        "db_id": "protein_institute",
        "query": "SELECT name ,  street_address ,  floors FROM building ORDER BY floors",
        "question": "Show the name, street address, and number of floors for all buildings ordered by the number of floors.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  street_address ,  floors FROM building ORDER BY floors"
    },
    {
        "db_id": "book_press",
        "query": "SELECT title FROM book ORDER BY release_date DESC",
        "question": "List all book titles in the order of their release date from the most recent to the past.",
        "correctness": 1,
        "gold_parse": "SELECT title FROM book ORDER BY release_date DESC"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)",
        "question": "Cound the number of artists who have not released an album.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)"
    },
    {
        "db_id": "party_people",
        "query": "SELECT count(DISTINCT party_name) FROM party",
        "question": "Count the number of different parties.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT party_name) FROM party"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT Fname ,  Lname FROM Student",
        "question": "Show first name and last name for all students.",
        "correctness": 1,
        "gold_parse": "SELECT Fname ,  Lname FROM Student"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director",
        "question": "For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "question": "Count the number of customers who have an account.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Accounts"
    },
    {
        "db_id": "entrepreneur",
        "question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
        "gold_parse": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000",
        "query": "SELECT Company FROM entrepreneur WHERE Money_Requested > value INTERSECT SELECT Company FROM entrepreneur WHERE Money_Requested < value",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "query": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'",
        "question": "Show the company name and the main industry for all companies whose headquarters are not from USA.",
        "correctness": 1,
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
        "question": "Give me the start station and end station for the trips with the three oldest id.",
        "correctness": 1,
        "gold_parse": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3"
    },
    {
        "db_id": "bike_1",
        "question": "What is the zip code in which the average mean sea level pressure is the lowest?",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
        "query": "SELECT Avg ( min_sea_level_pressure_inches ) FROM weather",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the states where both owners and professionals live.",
        "gold_parse": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "query": "select state from Professionals intersect select state from Professionals",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
        "question": "What are the numbers of the shortest flights?",
        "correctness": 1,
        "gold_parse": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3"
    },
    {
        "db_id": "college_2",
        "query": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title",
        "question": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.",
        "correctness": 1,
        "gold_parse": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200",
        "question": "Show all artist names with an average exhibition attendance over 200.",
        "correctness": 1,
        "gold_parse": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200"
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "gold_parse": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "query": "SELECT T2.first_name , T2.last_name FROM Charges AS T1 JOIN Professionals AS T2 WHERE T1.charge_amount < ( SELECT Avg ( T1.charge_amount ) FROM Charges AS T1 )",
        "correctness": 0
    },
    {
        "db_id": "book_2",
        "query": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000",
        "question": "What are the distinct publishers of publications with price higher than 5000000?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000"
    },
    {
        "db_id": "government_shift",
        "query": "SELECT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t1.customer_details  =  \"Hardy Kutch\"",
        "question": "Find all the services that has been used by the customer with details \"Hardy Kutch\".",
        "correctness": 1,
        "gold_parse": "SELECT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t1.customer_details  =  \"Hardy Kutch\""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "gold_parse": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "query": "SELECT Document_Name , Document_ID FROM Documents WHERE Document_Description LIKE value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "query": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director",
        "question": "For each director, what are the titles and ratings for all the movies they reviewed?",
        "correctness": 1,
        "gold_parse": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"",
        "question": "Find the papers which have \"Olin Shivers\" as an author.",
        "correctness": 1,
        "gold_parse": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\""
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT count(*) FROM authors",
        "question": "How many authors are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM authors"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id",
        "question": "What is the average latitude and longitude of the starting points of all trips?",
        "correctness": 1,
        "gold_parse": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id"
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the ids, names, and prices of all products that are ordered most frequently?",
        "correctness": 1,
        "gold_parse": "SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_road_race",
        "query": "SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC",
        "question": "List the winning drivers and winning teams of races in ascending alphabetical order of winning team.",
        "correctness": 1,
        "gold_parse": "SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC"
    },
    {
        "db_id": "activity_1",
        "question": "Count the number of Professors who have office in building NEB.",
        "gold_parse": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"",
        "query": "SELECT Count ( * ) FROM Faculty WHERE Building = value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Find the property address with the highest agreed selling price where the first apartment feature is not null.",
        "gold_parse": "",
        "query": "SELECT property_address, MAX(agreed_selling_price) FROM Properties WHERE apt_feature_1 IS NOT NULL;",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many customers does Steve Johnson support?",
        "gold_parse": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\"",
        "query": "SELECT Count ( * ) FROM employees WHERE first_name = value AND last_name = value",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines made from red grapes?",
        "gold_parse": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"",
        "query": "SELECT Name FROM wine WHERE Grape = value",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the number of citations for each author.",
        "gold_parse": "",
        "query": "SELECT authorname, SUM(numcitedby) FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid GROUP BY authorname;",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
        "question": "What is the duration of the oldest actor?",
        "correctness": 1,
        "gold_parse": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1"
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Give the ids for documents that have the budget description 'Government'.",
        "gold_parse": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"",
        "query": "SELECT Document_ID FROM Documents WHERE Document_Description = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Return the number of customers who have at least one order with \"Cancelled\" status.",
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"",
        "query": "SELECT Count ( * ) FROM Customer_Orders WHERE order_status = value",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "query": "SELECT county ,  count(*) ,  sum(enrollment) FROM school GROUP BY county",
        "question": "Show each county along with the number of schools and total enrollment in each county.",
        "correctness": 1,
        "gold_parse": "SELECT county ,  count(*) ,  sum(enrollment) FROM school GROUP BY county"
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT text FROM tweets ORDER BY createdate",
        "question": "List the text of all tweets in the order of date.",
        "correctness": 1,
        "gold_parse": "SELECT text FROM tweets ORDER BY createdate"
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of singers who are the same age as the oldest singer?",
        "gold_parse": "",
        "query": "SELECT Name FROM singer WHERE Age = (SELECT MAX(Name) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
        "question": "How many drivers did not participate in the races held in 2009?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )"
    },
    {
        "db_id": "railway",
        "question": "Show the countries that have managers of age above 50 or below 46.",
        "gold_parse": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46",
        "query": "SELECT Country FROM manager WHERE Age > value OR Age > value",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Find the author for each submission and list them in ascending order of submission score.",
        "gold_parse": "SELECT Author FROM submission ORDER BY Scores ASC",
        "query": "SELECT Author , Author FROM submission ORDER BY Scores Asc",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "What is the name of the customer who has made the largest amount of claim in a single claim?",
        "gold_parse": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)",
        "query": "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID GROUP BY T1.Customer_ID ORDER BY Sum ( T3.Amount_Claimed ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "query": "SELECT * FROM match_season WHERE Draft_Class LIKE value",
        "correctness": 0
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1",
        "question": "Which author has written the most papers? Find his or her last name.",
        "correctness": 1,
        "gold_parse": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "world_1",
        "question": "What is the language that is used by the largest number of Asian nations?",
        "gold_parse": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "query": "SELECT Name FROM country WHERE Continent = value ORDER BY Population Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What are the names of the scientists, and how many projects are each of them working on?",
        "gold_parse": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name",
        "query": "SELECT Name , Count ( * ) FROM Scientists GROUP BY Name",
        "correctness": 0
    },
    {
        "db_id": "phone_market",
        "question": "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.",
        "gold_parse": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC",
        "query": "SELECT T1.Name FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID = T2.Phone_ID WHERE T2.Num_of_stock > value ORDER BY T1.Name Desc",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
        "question": "What are the ids of all employees that don't have certificates?",
        "correctness": 1,
        "gold_parse": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate"
    },
    {
        "db_id": "yelp",
        "question": "What are the names of businesses with the highest name in users?",
        "gold_parse": "",
        "query": "SELECT name FROM business WHERE name = (SELECT MAX(name) FROM user);",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);",
        "question": "What are the names of conductors with the highest conductor ID?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID = (SELECT MAX(Conductor_ID) FROM conductor);"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many zip postcodes are there for each department?",
        "gold_parse": "",
        "query": "SELECT department_name, COUNT(zip_postcode) FROM Departments JOIN Addresses ON Departments.department_id = Addresses.address_id;",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Count ( * ) FROM weather WHERE min_sea_level_pressure_inches > value INTERSECT SELECT max_sea_level_pressure_inches FROM weather WHERE max_sea_level_pressure_inches < value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000",
        "question": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000"
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the ids of the problems which are reported before 1978-06-26?",
        "gold_parse": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"",
        "query": "SELECT problem_id FROM Problem_Log WHERE log_entry_date < value",
        "correctness": 0
    },
    {
        "db_id": "boat_1",
        "query": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'",
        "question": "What are the names of sailors who reserved a boat with the name Melon?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'"
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < = value ORDER BY T1.MIN_SALARY Desc",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "question": "What is the title of the course that is a prerequisite for Mobile Computing?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT POSITION FROM Employee WHERE Name  =  \"Amy Wong\";",
        "question": "What position does Amy Wong have?",
        "correctness": 1,
        "gold_parse": "SELECT POSITION FROM Employee WHERE Name  =  \"Amy Wong\";"
    },
    {
        "db_id": "network_2",
        "question": "Find the name of persons who are friends with Bob.",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'",
        "query": "SELECT name FROM PersonFriend WHERE friend = value",
        "correctness": 0
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the most popular payment method?",
        "correctness": 1,
        "gold_parse": "SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "college_2",
        "query": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "question": "What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";",
        "question": "Return the decor of the room named \"Recluse and defiance\".",
        "correctness": 1,
        "gold_parse": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)",
        "question": "How many rooms have not had any reservation yet?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)"
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MIN_SALARY < = value ORDER BY T2.SALARY Desc",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "query": "SELECT count(*) FROM farm",
        "question": "How many farms are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM farm"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
        "question": "How many students have a food allergy?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1",
        "question": "What is the id and family name of the driver who has the longest laptime?",
        "correctness": 1,
        "gold_parse": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MAX(Height) FROM people);",
        "question": "What are the names of the tallest poker players?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height = (SELECT MAX(Height) FROM people);"
    },
    {
        "db_id": "aan_1",
        "query": "SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)",
        "question": "Find the id and title of the papers that are never cited by others.",
        "correctness": 1,
        "gold_parse": "SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)"
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM musical",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates with a maximum temperature higher than 85?",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "query": "SELECT date FROM weather WHERE min_temperature_f > value",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "query": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'",
        "question": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the name of the course with the most students enrolled?",
        "gold_parse": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT course_name FROM Courses GROUP BY course_name ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "insurance_fnol",
        "query": "SELECT customer_phone FROM available_policies",
        "question": "What are all the phone numbers?",
        "correctness": 1,
        "gold_parse": "SELECT customer_phone FROM available_policies"
    },
    {
        "db_id": "bike_1",
        "question": "List all the cities in a decreasing order of each city's stations' highest latitude.",
        "gold_parse": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
        "query": "SELECT city FROM station ORDER BY long Desc",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many people in total can stay in the modern rooms of this inn?",
        "gold_parse": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern'",
        "query": "SELECT Sum ( T2.Adults ) FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.bedType = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Give the city and country for the Alton airport.",
        "gold_parse": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "query": "SELECT City , Country FROM airports WHERE AirportName = value AND CountryAbbrev = value",
        "correctness": 0
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)",
        "question": "Find the unique contents of all boxes whose value is higher than the average value of all boxes.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)"
    },
    {
        "db_id": "flight_2",
        "question": "Show the names of airlines and their abbreviations for those with abbreviation 'UA'.",
        "gold_parse": "",
        "query": "SELECT T1.Airline, T2.Abbreviation FROM airlines AS T1 JOIN airlines AS T2 ON T1.uid = T2.uid WHERE T2.Abbreviation = 'UA';",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the titles of courses that are offered in more than one department?",
        "gold_parse": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1",
        "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "car_1",
        "question": "How many car makers are there in france?",
        "gold_parse": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'",
        "query": "SELECT Count ( * ) FROM car_makers WHERE Country = value",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT ResName FROM Restaurant;",
        "question": "Show me all the restaurants.",
        "correctness": 1,
        "gold_parse": "SELECT ResName FROM Restaurant;"
    },
    {
        "db_id": "store_1",
        "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;",
        "question": "List the state in the US with the most invoices.",
        "correctness": 1,
        "gold_parse": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "db_id": "e_learning",
        "question": "List all the information about course authors and tutors in alphabetical order of the personal name.",
        "gold_parse": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "query": "SELECT T2.course_description , T1.personal_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id ORDER BY T1.personal_name Asc",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",
        "question": "What are the durations of the longest and the shortest tracks in milliseconds?",
        "correctness": 1,
        "gold_parse": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK"
    },
    {
        "db_id": "election",
        "query": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"",
        "question": "Find the distinct years when the governor was named \"Eliot Spitzer\".",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\""
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"",
        "question": "What is the id of the candidate whose email is stanley.monahan@example.org?",
        "correctness": 1,
        "gold_parse": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\""
    },
    {
        "db_id": "scholar",
        "question": "Sum the keyphrase IDs for each journal.",
        "gold_parse": "",
        "query": "SELECT journalname, SUM(keyphraseid) FROM journal JOIN paper ON journal.journalid = paper.journalid JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid GROUP BY journalname;",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
        "question": "Find the different first names and cities of the students who have allergy to milk or cat.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\""
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the total number of other property details for each property?",
        "gold_parse": "",
        "query": "SELECT property_name, SUM(other_property_details) FROM Properties JOIN Other_Property_Features ON Properties.property_id = Other_Property_Features.feature_id;",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , max_temperature_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names and budgets of departments with budgets greater than the average?",
        "gold_parse": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "query": "SELECT T1.dept_name , T2.dept_name FROM department AS T1 JOIN instructor AS T2 ON T1.dept_name = T2.dept_name WHERE T1.budget > ( SELECT Avg ( T1.budget ) FROM department AS T1 )",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the average age and how many male students are there in each city?",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "query": "SELECT Avg ( Age ) , city_code FROM Student GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT sum(amount) FROM payment",
        "question": "Return the sum of all payment amounts.",
        "correctness": 1,
        "gold_parse": "SELECT sum(amount) FROM payment"
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "query": "SELECT product_name , typical_buying_price , typical_buying_price FROM Products WHERE product_description = value",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "query": "SELECT count(DISTINCT payment_method) FROM customers",
        "question": "How many different payment methods are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT payment_method) FROM customers"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT name FROM Sailors WHERE name LIKE '%e%'",
        "question": "What is the name of sailors whose names contain letter e?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Sailors WHERE name LIKE '%e%'"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100",
        "question": "On which day did the bakery sell more than 100 dollars in total.",
        "correctness": 1,
        "gold_parse": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100"
    },
    {
        "db_id": "car_1",
        "question": "Show the country names and their continent IDs.",
        "gold_parse": "",
        "query": "SELECT T1.CountryName, T2.Continent FROM countries AS T1 JOIN continents AS T2 ON T1.Continent = T2.ContId;",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "query": "SELECT rID FROM Rating WHERE stars != 4",
        "question": "What are the ids of all reviewers who have not given 4 stars at least once?",
        "correctness": 1,
        "gold_parse": "SELECT rID FROM Rating WHERE stars != 4"
    },
    {
        "db_id": "scholar",
        "question": "Show papers from 2020.",
        "gold_parse": "",
        "query": "SELECT title FROM paper WHERE year = 'Two Thousand Twenty'",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "Count the number of singers and find their average net worth.",
        "gold_parse": "",
        "query": "SELECT COUNT(Name), AVG(Net_Worth_Millions) FROM singer;",
        "correctness": 0
    },
    {
        "db_id": "bike_racing",
        "query": "SELECT cyclist_id ,  count(*) FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id",
        "question": "How many bikes does each cyclist own? Order by cyclist id.",
        "correctness": 1,
        "gold_parse": "SELECT cyclist_id ,  count(*) FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Environmental Science');",
        "question": "What are the names of journals that have the same name as 'Journal of Environmental Science'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of Environmental Science');"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have authorized destruction.",
        "gold_parse": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "query": "SELECT Employee_ID FROM Employees WHERE Role_Code = value",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "What is the customer last name, id and phone number with most number of orders?",
        "gold_parse": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT customer_last_name , customer_id , phone_number FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "question": "What are the average ages for male and female students?",
        "correctness": 1,
        "gold_parse": "SELECT avg(age) ,  sex FROM Student GROUP BY sex"
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of singers who are younger than the oldest singer?",
        "gold_parse": "",
        "query": "SELECT Name FROM singer WHERE Age < (SELECT MAX(Age) FROM singer);",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT count(*) FROM Student",
        "question": "How many students are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Student"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT S.name, COUNT(D.id) AS death_count FROM ship S LEFT JOIN death D ON S.id = D.caused_by_ship_id GROUP BY S.name",
        "question": "How many deaths were caused by each ship?",
        "correctness": 1,
        "gold_parse": "SELECT S.name, COUNT(D.id) AS death_count FROM ship S LEFT JOIN death D ON S.id = D.caused_by_ship_id GROUP BY S.name"
    },
    {
        "db_id": "geography",
        "question": "What is the shortest river?",
        "gold_parse": "",
        "query": "SELECT river_name FROM river ORDER BY length DESC;",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Count the number of students the teacher LORIA ONDERSMA teaches.",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"",
        "query": "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the department name, city, and state province for each department.",
        "gold_parse": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id",
        "query": "SELECT T1.DEPARTMENT_NAME , T2.CITY , T2.STATE_PROVINCE , T2.STATE_PROVINCE FROM departments AS T1 JOIN locations AS T2",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names and number of houses?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(*) FROM Properties WHERE property_type_code = 'HSE' GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)",
        "question": "What is the title of the newest movie?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)"
    },
    {
        "db_id": "imdb",
        "query": "SELECT name, birth_city FROM actor WHERE nationality = 'British';",
        "question": "What are the names and birth cities of British actors?",
        "correctness": 1,
        "gold_parse": "SELECT name, birth_city FROM actor WHERE nationality = 'British';"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
        "question": "Show all origins and the number of flights from each origin.",
        "correctness": 1,
        "gold_parse": "SELECT origin ,  count(*) FROM Flight GROUP BY origin"
    },
    {
        "db_id": "musical",
        "query": "SELECT Character ,  Duration FROM actor",
        "question": "What are the characters and duration of actors?",
        "correctness": 1,
        "gold_parse": "SELECT Character ,  Duration FROM actor"
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.PackageNumber ,  max(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE \"John\";",
        "question": "What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight.",
        "correctness": 1,
        "gold_parse": "SELECT T1.PackageNumber ,  max(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE \"John\";"
    },
    {
        "db_id": "apartment_rentals",
        "question": "What is the average room count of the apartments whose booking status code is \"Provisional\"?",
        "gold_parse": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"",
        "query": "SELECT Avg ( T1.bathroom_count ) FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = value",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1",
        "question": "Show the official names of the cities that have hosted more than one competition.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Final_Table_Made, COUNT(*) FROM poker_player GROUP BY Final_Table_Made;",
        "question": "How many poker players have made it to the final table?",
        "correctness": 1,
        "gold_parse": "SELECT Final_Table_Made, COUNT(*) FROM poker_player GROUP BY Final_Table_Made;"
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query": "SELECT Fname , LName FROM Student WHERE Advisor = value",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "question": "What are the names of the singers that have more than one songs?",
        "gold_parse": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "query": "select Name from singer group by Name having count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the dataset names associated with papers?",
        "gold_parse": "",
        "query": "SELECT datasetname FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid WHERE datasetname = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "Which city is the most frequent source airport?",
        "gold_parse": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "query": "select City from airports group by City order by count ( * ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "phone_1",
        "query": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;",
        "question": "List the name of the phone model launched in year 2002 and with the highest RAM size.",
        "correctness": 1,
        "gold_parse": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)",
        "question": "Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code",
        "question": "Return the distinct descriptions of all the detentions that have happened.",
        "correctness": 1,
        "gold_parse": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code"
    },
    {
        "db_id": "book_press",
        "query": "SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender",
        "question": "find the number of authors who are older than 30 for each gender.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender"
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_sea_level_pressure_inches > value",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show the name, location, and number of platforms for all stations.",
        "gold_parse": "SELECT name ,  LOCATION ,  number_of_platforms FROM station",
        "query": "SELECT T1.Name , T1.Location , Count ( * ) FROM station AS T1 JOIN train_station AS T2 ON T1.Station_ID = T2.Station_ID GROUP BY T2.Station_ID",
        "correctness": 0
    },
    {
        "db_id": "orchestra",
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "gold_parse": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "query": "SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING Count ( * ) > value",
        "correctness": 0
    },
    {
        "db_id": "e_commerce",
        "query": "select t1.order_id ,  sum(t2.product_price) from order_items as t1 join products as t2 on t1.product_id  =  t2.product_id group by t1.order_id order by sum(t2.product_price) asc limit 1",
        "question": "What is the order that total cost the least , and how much is the total cost ?",
        "correctness": 1,
        "gold_parse": "select t1.order_id ,  sum(t2.product_price) from order_items as t1 join products as t2 on t1.product_id  =  t2.product_id group by t1.order_id order by sum(t2.product_price) asc limit 1"
    },
    {
        "db_id": "riding_club",
        "query": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC",
        "question": "Show the names of players and names of their coaches in descending order of the votes of players.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC"
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes from the United States to Canada.",
        "gold_parse": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "correctness": 0
    },
    {
        "db_id": "district_spokesman",
        "query": "SELECT t3.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID JOIN district AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  1 INTERSECT SELECT t3.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID JOIN district AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  2",
        "question": "Find the names of the districts which have had both spokesman with rank position 1 and 2.",
        "correctness": 1,
        "gold_parse": "SELECT t3.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID JOIN district AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  1 INTERSECT SELECT t3.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID JOIN district AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  2"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Height = (SELECT MAX(Height) FROM people);",
        "question": "What are the names of the tallest poker players?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM people WHERE Height = (SELECT MAX(Height) FROM people);"
    },
    {
        "db_id": "driving_school",
        "question": "Which last names are both used by customers and by staff?",
        "gold_parse": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
        "query": "SELECT T3.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T2.staff_address_id = T1.address_id JOIN Customers AS T3 ON T1.address_id = T3.customer_address_id WHERE T2.last_name = value INTERSECT SELECT T3.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T2.staff_address_id = T1.address_id JOIN Customers AS T3 ON T1.address_id = T3.customer_address_id WHERE T2.last_name = value",
        "correctness": 0
    },
    {
        "db_id": "cinema",
        "query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
        "question": "Count the number of films whose title contains the word 'Dummy'.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\""
    },
    {
        "db_id": "election",
        "question": "What are the distinct districts for elections?",
        "gold_parse": "SELECT DISTINCT District FROM election",
        "query": "SELECT DISTINCT Committee FROM election",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "give me names of all compatible browsers and accelerators in the descending order of compatible year",
        "gold_parse": "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC",
        "query": "SELECT T1.Connection , T1.name FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.accelerator_id ORDER BY T2.compatible_since_year Desc",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What are the cities of businesses with a rating of 3?",
        "gold_parse": "",
        "query": "SELECT city FROM business WHERE city IN (SELECT city FROM review WHERE rating = 3);",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value AND MAX_SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "question": "Find the id of courses which are registered or attended by student whose id is 121?",
        "correctness": 1,
        "gold_parse": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121"
    },
    {
        "db_id": "allergy_1",
        "question": "Show all allergy type with number of students affected.",
        "gold_parse": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
        "query": "SELECT AllergyType , Count ( * ) FROM Allergy_Type GROUP BY AllergyType",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT count(*) FROM artist",
        "question": "Count the number of artists.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM artist"
    },
    {
        "db_id": "art_1",
        "query": "SELECT deathYear - birthYear FROM artists ORDER BY deathYear - birthYear LIMIT 1",
        "question": "What is the age of the artist who had the shortest life?",
        "correctness": 1,
        "gold_parse": "SELECT deathYear - birthYear FROM artists ORDER BY deathYear - birthYear LIMIT 1"
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"",
        "question": "What are the papers published under the institution \"Indiana University\"?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\""
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'",
        "question": "List all singers from the USA along with their birth years.",
        "correctness": 1,
        "gold_parse": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id = (SELECT MIN(Id) FROM car_makers);",
        "question": "What are the full names of car makers with the lowest car maker ID?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id = (SELECT MIN(Id) FROM car_makers);"
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the details of all the markets that are accessible by walk or bus.",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "query": "SELECT Market_Details FROM Street_Markets GROUP BY Market_Details HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date",
        "question": "How many cusomters visited on each date?",
        "correctness": 1,
        "gold_parse": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date"
    },
    {
        "db_id": "swimming",
        "question": "How many events are there?",
        "gold_parse": "SELECT count(*) FROM event",
        "query": "SELECT Count ( * ) FROM swimmer",
        "correctness": 0
    },
    {
        "db_id": "soccer_3",
        "query": "SELECT COUNT (DISTINCT Country) FROM player",
        "question": "What is the number of distinct countries of all players?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT (DISTINCT Country) FROM player"
    },
    {
        "db_id": "game_injury",
        "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?",
        "gold_parse": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'",
        "query": "SELECT * , Player , Source FROM injury_accident WHERE Injury ! = value",
        "correctness": 0
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\"",
        "question": "Who has written a paper that has the word \"Functional\" in its title? Return the first names of the authors.",
        "correctness": 1,
        "gold_parse": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\""
    },
    {
        "db_id": "bike_1",
        "query": "SELECT name FROM station WHERE lat  <  37.5",
        "question": "What are the names of stations that have latitude lower than 37.5?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM station WHERE lat  <  37.5"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1",
        "question": "What is the capital of the country where the driver with the most points is from?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1"
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the names and revenues of the companies with the highest revenues in each headquarter city?",
        "gold_parse": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter",
        "query": "SELECT Name , Revenue FROM Manufacturers GROUP BY Headquarter ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What are the main industries of the companies without gas stations and what are the companies?",
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "query": "SELECT T1.Main_Industry FROM company AS T1 WHERE T1.Company_ID NOT IN ( SELECT T2.Company_ID FROM station_company AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the login names and family names of course author and tutors?",
        "gold_parse": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",
        "query": "SELECT T1.login_name , T1.personal_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "On what day was the order with invoice number 10 placed?",
        "gold_parse": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10",
        "query": "SELECT invoice_date FROM Invoices WHERE invoice_number < value",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "query": "SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check'",
        "question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'",
        "correctness": 1,
        "gold_parse": "SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check'"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "question": "What are the departure and arrival dates of all flights from LA to Honolulu?",
        "correctness": 1,
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\""
    },
    {
        "db_id": "aan_1",
        "query": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t3.name = \"columbia university\"",
        "question": "What are the venues and years where Columbia University had papers ?",
        "correctness": 1,
        "gold_parse": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t3.name = \"columbia university\""
    },
    {
        "db_id": "video_game",
        "query": "SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3",
        "question": "How many players have rank of the year smaller than 3?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3"
    },
    {
        "db_id": "college_3",
        "question": "Find the first names of students whose first names contain letter \"a\".",
        "gold_parse": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
        "query": "SELECT DISTINCT Fname FROM Student WHERE LName LIKE value",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "How many records are there for each business city?",
        "gold_parse": "",
        "query": "SELECT city, COUNT(*) FROM business GROUP BY business_id;",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the team that has the most number of technicians.",
        "correctness": 1,
        "gold_parse": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "singer",
        "question": "What songs have many sales?",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Sales = 'many'",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "query": "SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium",
        "question": "What are the maximum, minimum and average home games each stadium held?",
        "correctness": 1,
        "gold_parse": "SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium"
    },
    {
        "db_id": "e_learning",
        "question": "On what dates did the student whose personal name is \"Karson\" enroll in and complete the courses?",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\"",
        "query": "SELECT T1.date_of_latest_logon , T2.course_name FROM Students AS T1 JOIN Courses AS T2 JOIN Student_Course_Enrolment AS T3 ON T1.student_id = T3.student_id AND T3.course_id = T2.course_id WHERE T1.personal_name = value AND T2.course_name = value",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find all the female members of club \"Bootup Baltimore\". Show the first name and last name.",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID AND T1.StuID = T3.StuID WHERE T2.ClubName = value AND T3.Position = value",
        "correctness": 0
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT CONTENTS FROM boxes WHERE Value  >  150",
        "question": "Select contents of all boxes with a value larger than $150.",
        "correctness": 1,
        "gold_parse": "SELECT CONTENTS FROM boxes WHERE Value  >  150"
    },
    {
        "db_id": "book_press",
        "query": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id ORDER BY t2.sale_amount DESC LIMIT 1",
        "question": "Who wrote the best selling book? Give me the author name.",
        "correctness": 1,
        "gold_parse": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id ORDER BY t2.sale_amount DESC LIMIT 1"
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the checking balance of the account whose owner\u2019s name contains the substring \u2018ee\u2019?",
        "gold_parse": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'",
        "query": "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",
        "question": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'"
    },
    {
        "db_id": "customer_complaints",
        "question": "Which products has been complained by the customer who has filed least amount of complaints?",
        "gold_parse": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1",
        "query": "SELECT T1.product_name FROM Products AS T1 JOIN Complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY Count ( * ) Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "query": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4",
        "question": "find the ids of reviewers who did not give 4 star.",
        "correctness": 1,
        "gold_parse": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4"
    },
    {
        "db_id": "music_2",
        "question": "Find the number of vocal types used in song \"Demon Kitty Rag\"?",
        "gold_parse": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"",
        "query": "SELECT Count ( * ) FROM Vocals WHERE Type = value",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "query": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1",
        "question": "What is the name and date of the race that occurred most recently?",
        "correctness": 1,
        "gold_parse": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1"
    },
    {
        "db_id": "climbing",
        "query": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"",
        "question": "Show the times used by climbers to climb mountains in Country Uganda.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\""
    },
    {
        "db_id": "geography",
        "question": "What is the smallest average lake area per state?",
        "gold_parse": "",
        "query": "SELECT state_name, AVG(area) FROM lake GROUP BY state_name;",
        "correctness": 0
    },
    {
        "db_id": "cinema",
        "query": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)",
        "question": "Show the cinema name and location for cinemas with capacity above average.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade = (SELECT MIN(grade) FROM Highschooler);",
        "question": "What are the names of highschoolers who are in the lowest grade?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Highschooler WHERE grade = (SELECT MIN(grade) FROM Highschooler);"
    },
    {
        "db_id": "country_language",
        "query": "SELECT count(DISTINCT language_id) FROM official_languages",
        "question": "Count the number of different official languages.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT language_id) FROM official_languages"
    },
    {
        "db_id": "school_finance",
        "question": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000",
        "gold_parse": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "query": "SELECT Count ( * ) FROM budget WHERE total_budget_percent_budgeted > value OR Year < value",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Compute the average profits companies make.",
        "gold_parse": "SELECT avg(Profits_billion) FROM Companies",
        "query": "SELECT Avg ( Sales_billion ) FROM Companies",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
        "gold_parse": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "query": "SELECT cust_name , acc_bal FROM customer WHERE no_of_loans > value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1",
        "question": "What campus has the most faculties in 2003?",
        "correctness": 1,
        "gold_parse": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1"
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of companies that do not make DVD drive.",
        "gold_parse": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'",
        "query": "SELECT T1.Name FROM Products AS T1 EXCEPT SELECT T2.Name FROM Manufacturers AS T2",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the total number of courses offered.",
        "gold_parse": "SELECT count(*) FROM COURSES",
        "query": "SELECT Count ( * ) FROM Course_Authors_and_Tutors",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
        "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'.",
        "correctness": 1,
        "gold_parse": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\""
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE name LIKE 'B%';",
        "question": "List the names of businesses that start with 'B'.",
        "correctness": 1,
        "gold_parse": "SELECT name FROM business WHERE name LIKE 'B%';"
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What are the id and details of the customers who have at least 3 events?",
        "gold_parse": "SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3",
        "query": "SELECT customer_id , customer_details FROM Customers GROUP BY customer_id HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
        "question": "List the race class with at least two races.",
        "correctness": 1,
        "gold_parse": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2"
    },
    {
        "db_id": "store_1",
        "question": "What are the names of all the tracks that are in both the Movies and music playlists?",
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value INTERSECT SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;",
        "question": "Which document has the most draft copies? List its document id and number of draft copies.",
        "correctness": 1,
        "gold_parse": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
        "question": "What are teh names of the different products, as well as the number of customers who have ordered each product.",
        "correctness": 1,
        "gold_parse": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name"
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.id , T1.name , T2.Vehicle_Flight_number FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "query": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2",
        "question": "List the locations that are shared by more than two wrestlers.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Continent, COUNT(*) FROM countries GROUP BY Continent;",
        "question": "How many countries are there in each continent?",
        "correctness": 1,
        "gold_parse": "SELECT Continent, COUNT(*) FROM countries GROUP BY Continent;"
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "query": "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT name FROM enzyme )",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Return the primary conference of the school with the lowest acc percentage score.",
        "gold_parse": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1",
        "query": "SELECT Primary_conference FROM university ORDER BY Enrollment Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"",
        "question": "Give the full name and phone of the customer who has the account name 162.",
        "correctness": 1,
        "gold_parse": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
        "question": "How many drivers did not race in 2009?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )"
    },
    {
        "db_id": "car_1",
        "question": "What is the count of the car models produced in the United States?",
        "gold_parse": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'",
        "query": "select count ( * ) from countries where CountryName = value",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE numciting > (SELECT Avg(numciting) FROM paper);",
        "question": "What are the titles of papers that have been cited more than the average number of times?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE numciting > (SELECT Avg(numciting) FROM paper);"
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid = (SELECT MAX(jid) FROM journal);",
        "question": "What are the names of journals with the highest journal ID?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid = (SELECT MAX(jid) FROM journal);"
    },
    {
        "db_id": "farm",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "query": "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Pigs > value",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "query": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200",
        "question": "What are the countries that have both mountains that are higher than 5600 and lower than 5200?",
        "correctness": 1,
        "gold_parse": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200"
    },
    {
        "db_id": "city_record",
        "question": "What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"?",
        "gold_parse": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\"",
        "query": "SELECT Venue FROM match WHERE Competition = value AND Competition = value",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "What are the paper IDs associated with fields?",
        "gold_parse": "",
        "query": "SELECT paperid FROM paperfield WHERE paperid = 'unknown';",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "query": "SELECT title FROM paper WHERE year = 2021",
        "question": "What papers were published in the year 2021?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM paper WHERE year = 2021"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student",
        "question": "Show the minimum, average, and maximum age of all students.",
        "correctness": 1,
        "gold_parse": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")",
        "question": "What is the names of movies whose created year is after all movies directed by Steven Spielberg?",
        "correctness": 1,
        "gold_parse": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")"
    },
    {
        "db_id": "loan_1",
        "question": "How many customers are there?",
        "gold_parse": "SELECT sum(no_of_customers) FROM bank",
        "query": "SELECT Count ( * ) FROM bank",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of departments where some physicians are primarily affiliated with.",
        "gold_parse": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1",
        "query": "SELECT DISTINCT Name FROM Nurse",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT count(*) FROM customer WHERE active = '1'",
        "question": "How many customers have an active value of 1?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customer WHERE active = '1'"
    },
    {
        "db_id": "geography",
        "query": "SELECT city_name FROM city WHERE state_name = 'Texas';",
        "question": "Which cities are located in the state of Texas?",
        "correctness": 1,
        "gold_parse": "SELECT city_name FROM city WHERE state_name = 'Texas';"
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
        "question": "What are the first and last names of people who payed more than the rooms' base prices?",
        "correctness": 1,
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0"
    },
    {
        "db_id": "imdb",
        "query": "SELECT P.name FROM producer AS P JOIN made_by AS M ON P.pid = M.pid GROUP BY P.name HAVING COUNT(M.msid) > 5;",
        "question": "Find the names of all producers who have produced more than 5 movies.",
        "correctness": 1,
        "gold_parse": "SELECT P.name FROM producer AS P JOIN made_by AS M ON P.pid = M.pid GROUP BY P.name HAVING COUNT(M.msid) > 5;"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
        "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\""
    },
    {
        "db_id": "planet_1",
        "query": "SELECT T1.PackageNumber ,  max(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE \"John\";",
        "question": "What is the package number and weight of the heaviest package that was sent by a client named John or something similar?",
        "correctness": 1,
        "gold_parse": "SELECT T1.PackageNumber ,  max(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE \"John\";"
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the apartment numbers of apartments with unit status availability of both 0 and 1.",
        "gold_parse": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1",
        "query": "SELECT T1.apt_number FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = value INTERSECT SELECT T3.building_manager FROM Apartment_Buildings AS T3 JOIN Apartments AS T1 ON T3.building_id = T1.building_id JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = value",
        "correctness": 0
    },
    {
        "db_id": "icfp_1",
        "query": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"",
        "question": "List the titles of the papers whose authors are from the institution \"Indiana University\".",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\""
    },
    {
        "db_id": "shop_membership",
        "question": "Show all city with a branch opened in 2001 and a branch with more than 100 membership.",
        "gold_parse": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100",
        "query": "SELECT City FROM branch WHERE Open_year = value INTERSECT SELECT City FROM branch WHERE membership_amount > value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "Which mountains have an altitude of no more than 2500 meters?",
        "gold_parse": "",
        "query": "SELECT mountain_name FROM mountain WHERE mountain_altitude > 2500;",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1",
        "question": "What is the starting year for the oldest technician?",
        "correctness": 1,
        "gold_parse": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",
        "question": "Find the ids and names of stations from which at least 200 trips started.",
        "correctness": 1,
        "gold_parse": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200"
    },
    {
        "db_id": "cre_Students_Information_Systems",
        "query": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
        "question": "Give me the type code and description of the least common detention type.",
        "correctness": 1,
        "gold_parse": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "db_id": "student_1",
        "question": "Find the number of teachers who teach the student called CHRISSY NABOZNY.",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"",
        "query": "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "concert_singer",
        "question": "Show the names of singers who are 20 years old.",
        "gold_parse": "",
        "query": "SELECT T1.Name, T2.Age FROM singer AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Age = 20;",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the name of the race that occurred most recently?",
        "gold_parse": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "query": "SELECT country FROM circuits ORDER BY lat Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "question": "Sum the number of citations for each author for papers published after 2015.",
        "gold_parse": "",
        "query": "SELECT authorname, SUM(numcitedby) FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid WHERE year > 2015 GROUP BY authorname;",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "query": "SELECT director FROM Movie WHERE title  = 'Avatar'",
        "question": "Who directed Avatar?",
        "correctness": 1,
        "gold_parse": "SELECT director FROM Movie WHERE title  = 'Avatar'"
    },
    {
        "db_id": "loan_1",
        "question": "What is the total number of customers across banks?",
        "gold_parse": "SELECT sum(no_of_customers) FROM bank",
        "query": "SELECT Count ( * ) FROM bank",
        "correctness": 0
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT count(DISTINCT order_item_status_code) FROM Order_items",
        "question": "How many item states are there in the orders?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT order_item_status_code) FROM Order_items"
    },
    {
        "db_id": "soccer_2",
        "question": "How many students got accepted after the tryout?",
        "gold_parse": "SELECT count(*) FROM tryout WHERE decision  =  'yes'",
        "query": "SELECT Count ( * ) FROM College WHERE enr > value",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "How many distinct names are associated with all the photos?",
        "gold_parse": "SELECT count(DISTINCT Name) FROM PHOTOS",
        "query": "SELECT Count ( DISTINCT Name ) FROM Tourist_Attractions",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the average lengths of rivers in the USA that are longer than their actual measurements?",
        "gold_parse": "",
        "query": "SELECT river_name, AVG(length) FROM river WHERE country_name = 'USA' GROUP BY river_name;",
        "correctness": 0
    },
    {
        "db_id": "tv_shows",
        "query": "SELECT Station_name FROM city_channel WHERE Affiliation != \"ABC\"",
        "question": "List the station names of city channels whose affiliation is not \"ABC\".",
        "correctness": 1,
        "gold_parse": "SELECT Station_name FROM city_channel WHERE Affiliation != \"ABC\""
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "question": "How many cards does customer Art Turcotte have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\""
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Conductor_ID < 7;",
        "question": "What are the names of conductors with IDs less than 7?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM conductor WHERE Conductor_ID < 7;"
    },
    {
        "db_id": "car_1",
        "question": "What is the car wmodel with the highest mpg?",
        "gold_parse": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1",
        "query": "select MPG from cars_data order by MPG desc limit value",
        "correctness": 0
    },
    {
        "db_id": "imdb",
        "query": "SELECT DISTINCT nationality FROM actor;",
        "question": "What are the different nationalities of actors?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT nationality FROM actor;"
    },
    {
        "db_id": "dorm_1",
        "question": "How many female students live in Smith Hall?",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'",
        "query": "SELECT Count ( * ) FROM Student AS T1 JOIN Dorm AS T2 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid AND T3.dormid = T2.dormid WHERE T1.Sex = value AND T2.gender = value",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "When did the first payment happen?",
        "gold_parse": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1",
        "query": "SELECT payment_date FROM payment",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me the temperature of Shanghai in January.",
        "gold_parse": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\"",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T1.City = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "csu_1",
        "question": "What is the average fee for a CSU campus in the year of 1996?",
        "gold_parse": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
        "query": "SELECT Avg ( T2.CampusFee ) FROM Campuses AS T1 JOIN csu_fees AS T2 ON T2.Campus = T1.Id JOIN faculty AS T3 ON T1.Id = T3.Campus WHERE T3.Year = value AND T2.Year = value",
        "correctness": 0
    },
    {
        "db_id": "pilot_1",
        "query": "SELECT count(DISTINCT LOCATION) FROM hangar",
        "question": "Count the number of different locations of hangars.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT LOCATION) FROM hangar"
    },
    {
        "db_id": "network_1",
        "question": "What are the names of highschoolers who are liked by Frank?",
        "gold_parse": "",
        "query": "SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes WHERE student_id = (SELECT grade FROM Highschooler WHERE name = 'Frank'));",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "query": "SELECT COUNT(DISTINCT AirportName) FROM airports;",
        "question": "How many different airport names are there?",
        "correctness": 1,
        "gold_parse": "SELECT COUNT(DISTINCT AirportName) FROM airports;"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"",
        "question": "Find the names of customers who either have an deputy policy or uniformed policy.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\""
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the sum of course IDs for each student's last name?",
        "gold_parse": "",
        "query": "SELECT last_name, SUM(course_id) FROM Students JOIN Courses ON Students.student_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Actor_ID NOT IN ( SELECT Musical_ID FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "query": "SELECT count(*) FROM school",
        "question": "How many schools are there?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM school"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2",
        "question": "Find the team with two or more drivers and return the the manager and car owner of the team.",
        "correctness": 1,
        "gold_parse": "SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7",
        "question": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?",
        "correctness": 1,
        "gold_parse": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7"
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "question": "Show the unique first names, last names, and phone numbers for all customers with any account.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id"
    },
    {
        "db_id": "online_exams",
        "query": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\"",
        "question": "What are the distinct student answer texts that received comments \"Normal\"?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\""
    },
    {
        "db_id": "e_learning",
        "question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "query": "SELECT T2.date_of_enrolment , T2.date_of_enrolment FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;",
        "question": "List all employees in the circulation history of the document with id 1. List the employee's name.",
        "correctness": 1,
        "gold_parse": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;"
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds > value",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "List all countries with lakes larger than 100 square kilometers.",
        "gold_parse": "",
        "query": "SELECT DISTINCT country_name FROM lake WHERE area < 100;",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
        "question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.",
        "correctness": 1,
        "gold_parse": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation"
    },
    {
        "db_id": "soccer_1",
        "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3",
        "question": "Who are the top 3 players in terms of overall rating?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3"
    },
    {
        "db_id": "product_catalog",
        "question": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.",
        "gold_parse": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",
        "query": "SELECT attribute_name , attribute_id FROM Attribute_Definitions",
        "correctness": 0
    },
    {
        "db_id": "wedding",
        "query": "SELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840",
        "question": "Show the organizer and name for churches that opened between 1830 and 1840.",
        "correctness": 1,
        "gold_parse": "SELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840"
    },
    {
        "db_id": "formula_1",
        "question": "What is the first and last name of all the German drivers?",
        "gold_parse": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"",
        "query": "SELECT T2.positionText , T1.url FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "question": "Show the number of accounts.",
        "gold_parse": "SELECT count(*) FROM Accounts",
        "query": "SELECT Count ( * ) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the names of nations speak both English and French?",
        "gold_parse": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value INTERSECT SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = \"Best for 2000\";",
        "question": "What is the detail of document subset with name 'Best for 2000'?",
        "correctness": 1,
        "gold_parse": "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = \"Best for 2000\";"
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.name ,  count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id",
        "question": "For each user, find their name and the number of reviews written by them.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name ,  count(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name, COUNT(*) FROM Properties GROUP BY property_type_code;",
        "question": "List the names of properties and the number of properties in each type.",
        "correctness": 1,
        "gold_parse": "SELECT property_name, COUNT(*) FROM Properties GROUP BY property_type_code;"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum course ID for each degree summary description?",
        "gold_parse": "",
        "query": "SELECT degree_summary_description, MAX(course_id) FROM Degree_Programs JOIN Courses ON Degree_Programs.degree_program_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "book_2",
        "query": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"",
        "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"",
        "correctness": 1,
        "gold_parse": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\""
    },
    {
        "db_id": "country_language",
        "query": "SELECT name FROM languages WHERE name LIKE \"%ish%\"",
        "question": "What are the names of languages that contain the word \"ish\"?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM languages WHERE name LIKE \"%ish%\""
    },
    {
        "db_id": "university_rank",
        "query": "SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000",
        "question": "What are the home conferences that have an average university enrollment above 2000?",
        "correctness": 1,
        "gold_parse": "SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT count(*) FROM driver WHERE Points  <  150",
        "question": "Count the number of drivers whose points are below 150.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM driver WHERE Points  <  150"
    },
    {
        "db_id": "machine_repair",
        "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank",
        "question": "Show names of technicians in ascending order of quality rank of the machine they are assigned.",
        "correctness": 1,
        "gold_parse": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank"
    },
    {
        "db_id": "storm_record",
        "query": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)",
        "question": "What are the names of storms that did not affect any regions?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)"
    },
    {
        "db_id": "hr_1",
        "question": "What are the department ids, full names, and salaries for employees who make the most in their departments?",
        "gold_parse": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id",
        "query": "SELECT EMPLOYEE_ID , FIRST_NAME , LAST_NAME FROM employees GROUP BY EMPLOYEE_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "region_building",
        "query": "SELECT Name FROM building ORDER BY Number_of_Stories ASC",
        "question": "What is the list of building names, sorted by the number of stories of each building in ascending order?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM building ORDER BY Number_of_Stories ASC"
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "gold_parse": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "query": "select T1.date_arrived , T2.date_of_treatment from Dogs as T1 join Treatments as T2 on T1.dog_id = T2.dog_id",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What is the phone number of the customer who has filed the most recent complaint?",
        "gold_parse": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
        "query": "SELECT T1.phone_number FROM Customers AS T1 JOIN Complaints AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "university_rank",
        "query": "SELECT major_name ,  major_code FROM Major ORDER BY major_code",
        "question": "List all major name and major code in the order of their major code",
        "correctness": 1,
        "gold_parse": "SELECT major_name ,  major_code FROM Major ORDER BY major_code"
    },
    {
        "db_id": "behavior_monitoring",
        "question": "List all cities of addresses in alphabetical order.",
        "gold_parse": "SELECT city FROM Addresses ORDER BY city",
        "query": "SELECT city FROM Addresses GROUP BY city ORDER BY Count ( * ) Asc",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "query": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2",
        "question": "Find the booking start date and end date for the apartments that have more than two bedrooms.",
        "correctness": 1,
        "gold_parse": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2"
    },
    {
        "db_id": "institution_sports",
        "query": "SELECT City ,  Province FROM institution",
        "question": "What are the cities and provinces of institutions?",
        "correctness": 1,
        "gold_parse": "SELECT City ,  Province FROM institution"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What's the name of the course with most number of enrollments?",
        "gold_parse": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "query": "select course_name from Courses group by course_name order by count ( * ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many different card types are there?",
        "gold_parse": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
        "query": "SELECT Count ( DISTINCT transaction_type ) FROM Financial_Transactions",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name and position of physicians who prescribe some medication whose brand is X?",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"",
        "query": "SELECT T1.Name , T1.Position FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "What is the produdction code and channel of the most recent cartoon?",
        "gold_parse": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
        "query": "select Production_code , Channel from Cartoon order by Original_air_date desc limit value",
        "correctness": 0
    },
    {
        "db_id": "dog_kennels",
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "gold_parse": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "query": "select T1.name , T2.date_of_treatment from Dogs as T1 join Treatments as T2 on T1.dog_id = T2.dog_id order by T1.date_departed limit value",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
        "question": "What are the names of musicals who have at 3 or more actors?",
        "correctness": 1,
        "gold_parse": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "question": "What are the numbers of all flights coming from Los Angeles?",
        "correctness": 1,
        "gold_parse": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\""
    },
    {
        "db_id": "course_teach",
        "question": "What is the most commmon hometowns for teachers?",
        "gold_parse": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "select Hometown from teacher where Name = value group by Hometown order by count ( * ) desc limit value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM city WHERE Population < (SELECT Avg(Population) FROM city);",
        "question": "What are the names of cities that have a population below the average?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM city WHERE Population < (SELECT Avg(Population) FROM city);"
    },
    {
        "db_id": "music_1",
        "question": "What are the ids of all songs that have higher resolution of the average resolution in the modern genre?",
        "gold_parse": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")",
        "query": "SELECT f_id FROM song WHERE resolution > ( SELECT Avg ( resolution ) FROM song )",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "query": "SELECT T1.Name, COUNT(*) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name;",
        "question": "Show the names of singers and the number of songs they have sung.",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name, COUNT(*) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name;"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.FirstName ,  T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.CustomerId ORDER BY T2.date LIMIT 1",
        "question": "Find the first name and last name of a customer who visited on the earliest date.",
        "correctness": 1,
        "gold_parse": "SELECT T1.FirstName ,  T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.CustomerId ORDER BY T2.date LIMIT 1"
    },
    {
        "db_id": "world_1",
        "question": "Which country has the highest percentage of Spanish speakers?",
        "gold_parse": "",
        "query": "SELECT CountryCode, MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish';",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "Which cmi cross reference id is not related to any parking taxes?",
        "gold_parse": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines",
        "query": "SELECT T1.cmi_cross_ref_id FROM CMI_Cross_References AS T1 EXCEPT SELECT T2.cmi_cross_ref_id FROM Rent_Arrears AS T2",
        "correctness": 0
    },
    {
        "db_id": "yelp",
        "question": "What are the cities of businesses with the user name 'John Doe'?",
        "gold_parse": "",
        "query": "SELECT city FROM business WHERE city IN (SELECT city FROM user WHERE name = 'John Doe');",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "List the id of students who attended some courses?",
        "gold_parse": "SELECT student_id FROM student_course_attendance",
        "query": "SELECT student_id FROM Student_Course_Registrations",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "How many products are there for each manufacturer?",
        "gold_parse": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
        "query": "SELECT Count ( * ) , Manufacturer FROM Products GROUP BY Manufacturer",
        "correctness": 0
    },
    {
        "db_id": "address_1",
        "query": "SELECT DISTINCT state FROM City",
        "question": "What are all the distinct states?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT state FROM City"
    },
    {
        "db_id": "university_basketball",
        "query": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
        "question": "Return the name of the team and the acc during the regular season for the school that was founded the earliest.",
        "correctness": 1,
        "gold_parse": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1"
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "query": "SELECT T1.Issue_Date , T2.Music_Festival FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT count(DISTINCT s_id) FROM advisor",
        "question": "Count the number of students who have advisors.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT s_id) FROM advisor"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of documents.",
        "gold_parse": "SELECT count(*) FROM Documents",
        "query": "SELECT Count ( * ) FROM Ref_Template_Types",
        "correctness": 0
    },
    {
        "db_id": "journal_committee",
        "query": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1",
        "question": "What is the name of the youngest editor?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Orlando');",
        "question": "What are the names of airports in Orlando?",
        "correctness": 1,
        "gold_parse": "SELECT AirportName FROM airports WHERE AirportCode IN (SELECT AirportCode FROM airports WHERE City = 'Orlando');"
    },
    {
        "db_id": "activity_1",
        "question": "Show first name and last name for all the students advised by Michael Goodrich.",
        "gold_parse": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"",
        "query": "SELECT Fname , LName FROM Student WHERE Advisor = value",
        "correctness": 0
    },
    {
        "db_id": "video_game",
        "query": "SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Oklahoma\" INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
        "question": "What are the titles of games that are played by players from Oklahoma college or Auburn college?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Oklahoma\" INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\""
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT Avg(room_count) FROM Properties;",
        "question": "What is the average room count for all properties?",
        "correctness": 1,
        "gold_parse": "SELECT Avg(room_count) FROM Properties;"
    },
    {
        "db_id": "sakila_1",
        "query": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the title and id of the film that has the greatest number of copies in inventory?",
        "correctness": 1,
        "gold_parse": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "boat_1",
        "query": "SELECT name FROM Sailors WHERE name LIKE '%e%'",
        "question": "What is the name of every sailor whose name contains the letter e?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM Sailors WHERE name LIKE '%e%'"
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171",
        "question": "How many courses does the student with id 171 actually attend?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171"
    },
    {
        "db_id": "allergy_1",
        "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)",
        "question": "Provide the last name of the youngest student.",
        "correctness": 1,
        "gold_parse": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)"
    },
    {
        "db_id": "game_injury",
        "question": "What are the id and name of the stadium where the most injury accidents happened?",
        "gold_parse": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT id , name FROM stadium GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.",
        "gold_parse": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)",
        "query": "SELECT T2.product_id FROM Products AS T1 JOIN Product_Suppliers AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id HAVING Avg ( T1.product_price ) > value",
        "correctness": 0
    },
    {
        "db_id": "epinions_1",
        "query": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1",
        "question": "Find the name of the target user with the lowest trust score.",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1"
    },
    {
        "db_id": "art_1",
        "query": "SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION",
        "question": "How many paintings were created before 1900 in different locations?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION"
    },
    {
        "db_id": "climbing",
        "query": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which range contains the most mountains?",
        "correctness": 1,
        "gold_parse": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "address_1",
        "query": "SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" AND T3.city_name  =  \"Newark\"",
        "question": "Show me the distance between Boston and Newark.",
        "correctness": 1,
        "gold_parse": "SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" AND T3.city_name  =  \"Newark\""
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names and selling prices of properties that have the highest selling price?",
        "gold_parse": "",
        "query": "SELECT property_name, agreed_selling_price FROM Properties WHERE agreed_selling_price > (SELECT Max(agreed_selling_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "aan_1",
        "query": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\"",
        "question": "How many papers does Columbia University have in or before 2009 ?",
        "correctness": 1,
        "gold_parse": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\""
    },
    {
        "db_id": "manufactory_1",
        "question": "Find number of products which Sony does not make.",
        "gold_parse": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')",
        "query": "SELECT Count ( * ) FROM Manufacturers AS T1 WHERE T1.Code NOT IN ( SELECT T2.Manufacturer FROM Products AS T2 )",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"",
        "question": "What is the first name, last name, and phone of the customer with card 4560596484842.",
        "correctness": 1,
        "gold_parse": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\""
    },
    {
        "db_id": "allergy_1",
        "question": "What are all the different food allergies?",
        "gold_parse": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"",
        "query": "SELECT DISTINCT AllergyType FROM Allergy_Type",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Which college have both players with position midfielder and players with position defender?",
        "gold_parse": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"",
        "query": "SELECT T2.College FROM team AS T1 JOIN match_season AS T2 ON T2.Team = T1.Team_id JOIN player AS T3 ON T1.Team_id = T3.Team WHERE T3.Player = value INTERSECT SELECT T2.College FROM team AS T1 JOIN match_season AS T2 ON T2.Team = T1.Team_id JOIN player AS T3 ON T1.Team_id = T3.Team WHERE T3.Player = value",
        "correctness": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many degree programs are there for each city?",
        "gold_parse": "",
        "query": "SELECT city, COUNT(degree_program_id) FROM Addresses JOIN Degree_Programs ON Addresses.address_id = Degree_Programs.degree_program_id;",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "question": "What are the longest rivers in each state?",
        "gold_parse": "",
        "query": "SELECT river_name, MIN(length) FROM river GROUP BY river_name;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "gold_parse": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "query": "SELECT T1.Code FROM country AS T1 WHERE T1.Continent = ( SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = value ) EXCEPT SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = value",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids, names, and descriptions for all documents?",
        "gold_parse": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "query": "SELECT T3.Document_ID , T3.Document_Name , T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;",
        "question": "Which major has least number of students? List the major and the number of students.",
        "correctness": 1,
        "gold_parse": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;"
    },
    {
        "db_id": "warehouse_1",
        "query": "SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION",
        "question": "For each location, what are the total, average, and maximum capacities of warehouses?",
        "correctness": 1,
        "gold_parse": "SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus",
        "question": "What is the total number of degrees granted after 2000 for each Orange county campus?",
        "correctness": 1,
        "gold_parse": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus"
    },
    {
        "db_id": "region_building",
        "query": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)",
        "question": "List the names of regions that do not have any buildings.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)"
    },
    {
        "db_id": "scholar",
        "question": "What are the venue names and titles of papers ordered by the venue name in descending order?",
        "gold_parse": "",
        "query": "SELECT venuename, title FROM venue JOIN paper ON venue.venueid = paper.venueid ORDER BY venuename DESC;",
        "correctness": 0
    },
    {
        "db_id": "e_commerce",
        "query": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code",
        "question": "How many products does each gender buy?",
        "correctness": 1,
        "gold_parse": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code"
    },
    {
        "db_id": "sing_contest",
        "query": "SELECT DISTINCT T2.stage_presence FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id WHERE T1.language  =  'English'",
        "question": "What are the distinct stage presence scores for all the songs that are in language 'English' ?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T2.stage_presence FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id WHERE T1.language  =  'English'"
    },
    {
        "db_id": "city_record",
        "question": "Find the match ids of the cities that hosted competition \"1994 FIFA World Cup qualification\"?",
        "gold_parse": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"",
        "query": "SELECT T1.City FROM city AS T1 JOIN match AS T2 JOIN hosting_city AS T3 ON T1.City_ID = T3.Host_City AND T3.Match_ID = T2.Match_ID WHERE T2.Competition = value AND T2.Competition = value",
        "correctness": 0
    },
    {
        "db_id": "online_exams",
        "query": "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC",
        "question": "List all the student answer texts in descending order of count.",
        "correctness": 1,
        "gold_parse": "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT Name FROM singer WHERE Age < 20;",
        "question": "What are the names of singers who are younger than 20?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM singer WHERE Age < 20;"
    },
    {
        "db_id": "singer",
        "question": "Find the minimum sales of songs for each singer.",
        "gold_parse": "",
        "query": "SELECT Name, MIN(Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID;",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "query": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
        "question": "What are the numbers of races for each constructor id?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
        "question": "For each zip code, select all those that have an average mean visiblity below 10.",
        "correctness": 1,
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10"
    },
    {
        "db_id": "car_1",
        "query": "SELECT FullName FROM car_makers WHERE Id = (SELECT MAX(Id) FROM car_makers);",
        "question": "What are the full names of car makers with the highest car maker ID?",
        "correctness": 1,
        "gold_parse": "SELECT FullName FROM car_makers WHERE Id = (SELECT MAX(Id) FROM car_makers);"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum address ID for each student's first name?",
        "gold_parse": "",
        "query": "SELECT first_name, MAX(address_id) FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id;",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "What is the total population of Gelderland district?",
        "gold_parse": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "query": "SELECT Sum ( Population ) FROM country",
        "correctness": 0
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "gold_parse": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
        "query": "SELECT Sum ( T2.bathroom_count ) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.apt_number = value AND T1.building_short_name LIKE value",
        "correctness": 0
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT DISTINCT LastName FROM customers ORDER BY LastName",
        "question": "List the last names of all customers in an alphabetical order.",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LastName FROM customers ORDER BY LastName"
    },
    {
        "db_id": "soccer_2",
        "question": "Find the states where have some college students in tryout.",
        "gold_parse": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName",
        "query": "SELECT state FROM College GROUP BY state HAVING Count ( * ) = value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that have 'Office' in their type description?",
        "gold_parse": "",
        "query": "SELECT property_name FROM Properties WHERE property_type_code IN (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description LIKE '%Office%');",
        "correctness": 0
    },
    {
        "db_id": "tvshow",
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "gold_parse": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "query": "SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = value AND T2.Directed_by = value",
        "correctness": 0
    },
    {
        "db_id": "vehicle_driver",
        "query": "SELECT model FROM vehicle WHERE total_production  >  100 OR top_speed  >  150",
        "question": "Which car models have total production larger than 100 or top speed higher than 150?",
        "correctness": 1,
        "gold_parse": "SELECT model FROM vehicle WHERE total_production  >  100 OR top_speed  >  150"
    },
    {
        "db_id": "party_people",
        "query": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of party with most number of members?",
        "correctness": 1,
        "gold_parse": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "car_racing",
        "query": "SELECT sum(Points) ,  avg(Points) FROM driver",
        "question": "What are the total and average points of drivers?",
        "correctness": 1,
        "gold_parse": "SELECT sum(Points) ,  avg(Points) FROM driver"
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT distinct(UnitPrice) FROM TRACK",
        "question": "Find the distinct unit prices for tracks.",
        "correctness": 1,
        "gold_parse": "SELECT distinct(UnitPrice) FROM TRACK"
    },
    {
        "db_id": "formula_1",
        "query": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5",
        "question": "Find the names of Japanese constructors that have once earned more than 5 points?",
        "correctness": 1,
        "gold_parse": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5"
    },
    {
        "db_id": "driving_school",
        "question": "In which city do the most employees live and how many of them live there?",
        "gold_parse": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT city , Count ( * ) FROM Addresses GROUP BY city ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query": "SELECT Avg ( price_in_dollars ) , Max ( price_in_pounds ) FROM Catalog_Contents",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "query": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "question": "Show the first names and last names of customers without any account.",
        "correctness": 1,
        "gold_parse": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id"
    },
    {
        "db_id": "cre_Doc_and_collections",
        "query": "SELECT count(*) ,  T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T2.Document_Object_ID",
        "question": "How many collections does each document belong to? List the count and the document id.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T2.Document_Object_ID"
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
        "question": "Which customer have the most policies? Give me the customer details.",
        "correctness": 1,
        "gold_parse": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "query": "SELECT Name FROM actor WHERE Actor_ID NOT IN ( SELECT Name FROM actor )",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'",
        "question": "What are the headquarters that have both a company in the banking and 'oil and gas' industries?",
        "correctness": 1,
        "gold_parse": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'"
    },
    {
        "db_id": "city_record",
        "question": "Find the city that hosted the most events.",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1",
        "query": "SELECT T1.City FROM city AS T1 JOIN temperature AS T2 ON T1.City_ID = T2.City_ID GROUP BY T2.City_ID ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "pilot_record",
        "query": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)",
        "question": "List the names of pilots that do not have any record.",
        "correctness": 1,
        "gold_parse": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)"
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have authorized destruction.",
        "gold_parse": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "query": "SELECT Employee_ID FROM Employees",
        "correctness": 0
    },
    {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
        "question": "Find the locations that have more than one movie theater with capacity above 300.",
        "correctness": 1,
        "gold_parse": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1"
    },
    {
        "db_id": "geography",
        "query": "SELECT lake_name, area FROM lake WHERE area >= 100",
        "question": "List all lakes with an area of at least 100 square kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT lake_name, area FROM lake WHERE area >= 100"
    },
    {
        "db_id": "real_estate_rentals",
        "query": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
        "question": "Return the description of the feature 'rooftop'.",
        "correctness": 1,
        "gold_parse": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';"
    },
    {
        "db_id": "apartment_rentals",
        "question": "Show the start dates and end dates of all the apartment bookings made by guests with gender code \"Female\".",
        "gold_parse": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\"",
        "query": "SELECT T2.booking_start_date , T2.booking_end_date FROM Guests AS T1 JOIN Apartment_Bookings AS T2 ON T1.guest_id = T2.guest_id WHERE T1.gender_code = value",
        "correctness": 0
    },
    {
        "db_id": "boat_1",
        "query": "SELECT * FROM Sailors WHERE age  >  30",
        "question": "What can you tell me about sailors who are older than age 30?",
        "correctness": 1,
        "gold_parse": "SELECT * FROM Sailors WHERE age  >  30"
    },
    {
        "db_id": "wta_1",
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "gold_parse": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "query": "SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value INTERSECT SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_ioc = value",
        "correctness": 0
    },
    {
        "db_id": "conference",
        "query": "SELECT count(*) FROM conference",
        "question": "What is the total number of conferences?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM conference"
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT title FROM paintings ORDER BY title",
        "question": "What is the name of every distinct painting in alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT title FROM paintings ORDER BY title"
    },
    {
        "db_id": "student_1",
        "question": "Find the first names of all the teachers that teach in classroom 110.",
        "gold_parse": "SELECT firstname FROM teachers WHERE classroom  =  110",
        "query": "SELECT T2.FirstName FROM list AS T1 JOIN teachers AS T2 WHERE T1.Classroom = value",
        "correctness": 0
    },
    {
        "db_id": "poker_player",
        "question": "Return the names of all the poker players.",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "query": "SELECT Name FROM people",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)",
        "question": "What are the distinct salaries of all instructors who earned less than the maximum salary?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)"
    },
    {
        "db_id": "inn_1",
        "question": "List the type of bed and name of all traditional rooms.",
        "gold_parse": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\"",
        "query": "SELECT bedType , roomName FROM Rooms",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details and ways to get to tourist attractions related to royal family?",
        "gold_parse": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID",
        "query": "SELECT T3.Market_Details , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Street_Markets AS T3 ON T2.Tourist_Attraction_ID = T3.Market_ID WHERE T1.Address = value",
        "correctness": 0
    },
    {
        "db_id": "real_estate_properties",
        "question": "Calculate the average first field feature for properties where the vendor requested price is the lowest.",
        "gold_parse": "",
        "query": "SELECT property_id, AVG(fld_feature_1) FROM Properties WHERE vendor_requested_price < (SELECT MIN(vendor_requested_price) FROM Properties);",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students have cat allergies?",
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value",
        "correctness": 0
    },
    {
        "db_id": "art_1",
        "query": "SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
        "question": "What are the average height and width of paintings that are oil medium in the place of gallery 241?",
        "correctness": 1,
        "gold_parse": "SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\""
    },
    {
        "db_id": "county_public_safety",
        "query": "SELECT Name FROM city ORDER BY Name ASC",
        "question": "What are the names of cities in ascending alphabetical order?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM city ORDER BY Name ASC"
    },
    {
        "db_id": "wrestler",
        "query": "SELECT Name FROM wrestler WHERE Days_held  <  100",
        "question": "What are the names of wrestlers days held less than 100?",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM wrestler WHERE Days_held  <  100"
    },
    {
        "db_id": "yelp",
        "question": "Show the names and cities of businesses.",
        "gold_parse": "",
        "query": "SELECT T1.name, T1.city, T2.city FROM business AS T1 JOIN business AS T2 ON T1.bid = T2.bid;",
        "correctness": 0
    },
    {
        "db_id": "advising",
        "question": "How many courses have less than 5 reviews?",
        "gold_parse": "",
        "query": "SELECT COUNT(*) FROM course WHERE num_reviews < 5;",
        "correctness": 0
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT count(DISTINCT customer_id) FROM Customer_orders",
        "question": "Count the number of differnt customers who have made an order.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Customer_orders"
    },
    {
        "db_id": "company_office",
        "question": "Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories.",
        "gold_parse": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC",
        "query": "SELECT name FROM buildings WHERE Status = value ORDER BY name Asc",
        "correctness": 0
    },
    {
        "db_id": "customers_and_invoices",
        "query": "SELECT count(*) ,  account_id FROM Financial_transactions",
        "question": "Count the number of financial transactions that correspond to each account id.",
        "correctness": 1,
        "gold_parse": "SELECT count(*) ,  account_id FROM Financial_transactions"
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query": "SELECT * FROM employees WHERE SALARY > value",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "which gender got the highest average uncertain ratio.",
        "gold_parse": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
        "query": "SELECT Sex FROM people GROUP BY Sex ORDER BY Avg ( Height ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "boat_1",
        "query": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING bid  >  50",
        "question": "Find the number of reservations for each boat with id greater than 50.",
        "correctness": 1,
        "gold_parse": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING bid  >  50"
    },
    {
        "db_id": "movie_1",
        "question": "Find the title and star rating of the movie that got the least rating star for each reviewer.",
        "gold_parse": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID",
        "query": "SELECT T1.name , T2.stars FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID ORDER BY T2.stars Asc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "art_1",
        "query": "SELECT lname ,  fname FROM artists WHERE birthYear  >  1850",
        "question": "What are the full names of artists born after 1850?",
        "correctness": 1,
        "gold_parse": "SELECT lname ,  fname FROM artists WHERE birthYear  >  1850"
    },
    {
        "db_id": "orchestra",
        "question": "What are the nationalities of conductors who are 80 years old?",
        "gold_parse": "",
        "query": "SELECT Nationality FROM conductor WHERE Nationality IN (SELECT Nationality FROM conductor WHERE Age = 80);",
        "correctness": 0
    },
    {
        "db_id": "geography",
        "query": "SELECT mountain_name FROM mountain WHERE state_name = 'Colorado';",
        "question": "Which mountains are located in the state of Colorado?",
        "correctness": 1,
        "gold_parse": "SELECT mountain_name FROM mountain WHERE state_name = 'Colorado';"
    },
    {
        "db_id": "csu_1",
        "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"",
        "question": "How many faculty lines are there in \"San Francisco State University\" in year 2004?",
        "correctness": 1,
        "gold_parse": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\""
    },
    {
        "db_id": "formula_1",
        "query": "SELECT name FROM races WHERE YEAR = 2017",
        "question": "What are the names of all the races that occurred in the year 2017?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017"
    },
    {
        "db_id": "scholar",
        "query": "SELECT authorname, title FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid WHERE paper.year > 2015;",
        "question": "What are the names of authors and the titles of papers they wrote that were published after 2015?",
        "correctness": 1,
        "gold_parse": "SELECT authorname, title FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid WHERE paper.year > 2015;"
    },
    {
        "db_id": "college_2",
        "query": "SELECT name ,  dept_name FROM student ORDER BY tot_cred",
        "question": "Find the name of the students and their department names sorted by their total credits in ascending order.",
        "correctness": 1,
        "gold_parse": "SELECT name ,  dept_name FROM student ORDER BY tot_cred"
    },
    {
        "db_id": "movie_1",
        "query": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1",
        "question": "What are the names of the directors who made exactly one movie excluding director NULL?",
        "correctness": 1,
        "gold_parse": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1"
    },
    {
        "db_id": "singer",
        "query": "SELECT Title FROM song WHERE Sales > 500000 OR Highest_Position < 10;",
        "question": "List the titles of songs that have sales greater than 500,000 or highest position less than 10.",
        "correctness": 1,
        "gold_parse": "SELECT Title FROM song WHERE Sales > 500000 OR Highest_Position < 10;"
    },
    {
        "db_id": "scientist_1",
        "question": "Find the number of projects which each scientist is working on and scientist's name.",
        "gold_parse": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name",
        "query": "SELECT Count ( * ) FROM Scientists",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
        "question": "Find distinct cities of addresses of people?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id"
    },
    {
        "db_id": "flight_2",
        "question": "How many flights depart from City Aberdeen?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "query": "SELECT Count ( * ) FROM airports WHERE City = value",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "query": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000",
        "question": "How many aircrafts have distance between 1000 and 5000?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000"
    },
    {
        "db_id": "address_1",
        "query": "SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" ORDER BY distance DESC LIMIT 1",
        "question": "What is the full name of the student who lives furthest from Linda Smith?",
        "correctness": 1,
        "gold_parse": "SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" ORDER BY distance DESC LIMIT 1"
    },
    {
        "db_id": "scholar",
        "question": "What are the names of venues where papers have been published?",
        "gold_parse": "",
        "query": "SELECT venuename FROM venue WHERE venueid IN (SELECT venueid FROM paper WHERE venuename = 'unknown');",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)",
        "question": "How many artists do not have any album?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)"
    },
    {
        "db_id": "world_1",
        "question": "Sum the Gross National Product of countries where the language is official.",
        "gold_parse": "",
        "query": "SELECT Percentage, SUM(GNP) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T';",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What is all the information about all people?",
        "gold_parse": "SELECT * FROM people",
        "query": "SELECT * FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "singer",
        "query": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'",
        "question": "List all singers from the USA along with their birth years.",
        "correctness": 1,
        "gold_parse": "SELECT Name, Birth_Year FROM singer WHERE Citizenship = 'USA'"
    },
    {
        "db_id": "flight_1",
        "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "question": "What are the names for all aircrafts with at least 2 flights?",
        "correctness": 1,
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2"
    },
    {
        "db_id": "activity_1",
        "question": "Find the first names of the faculty members who are playing Canoeing or Kayaking.",
        "gold_parse": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "query": "SELECT Fname FROM Faculty UNION SELECT Fname FROM Faculty",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "gold_parse": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "query": "select count ( * ) from airports where City = value",
        "correctness": 0
    },
    {
        "db_id": "movie_1",
        "question": "What are the different reviewer names, movie titles, and stars for every rating where the reviewer had the same name as the director?",
        "gold_parse": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
        "query": "SELECT DISTINCT T2.name , T1.title , T1.director FROM Movie AS T1 JOIN Reviewer AS T2 JOIN Rating AS T3 ON T1.mID = T3.mID AND T3.rID = T2.rID",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'",
        "question": "What are the name of rooms booked by customers whose first name has \"ROY\" in part?",
        "correctness": 1,
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT home_conference ,  count(*) FROM University GROUP BY home_conference",
        "question": "Show all home conferences and the number of universities in each conference.",
        "correctness": 1,
        "gold_parse": "SELECT home_conference ,  count(*) FROM University GROUP BY home_conference"
    },
    {
        "db_id": "driving_school",
        "question": "When are the birthdays of customer who are classified as 'Good Customer' status?",
        "gold_parse": "SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'",
        "query": "SELECT date_became_customer FROM Customers WHERE customer_status_code = value",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",
        "question": "Find out 5 customers who most recently purchased something. List customers' first and last name.",
        "correctness": 1,
        "gold_parse": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;"
    },
    {
        "db_id": "geography",
        "query": "SELECT river_name, length FROM river WHERE length > 500",
        "question": "Name all rivers longer than 500 kilometers.",
        "correctness": 1,
        "gold_parse": "SELECT river_name, length FROM river WHERE length > 500"
    },
    {
        "db_id": "imdb",
        "question": "Which actors were born after 1990?",
        "gold_parse": "",
        "query": "SELECT name FROM actor WHERE birth_year < 1980;",
        "correctness": 0
    },
    {
        "db_id": "gymnast",
        "query": "SELECT Name FROM People ORDER BY Name ASC",
        "question": "Return the names of people, ordered alphabetically.",
        "correctness": 1,
        "gold_parse": "SELECT Name FROM People ORDER BY Name ASC"
    },
    {
        "db_id": "network_2",
        "question": "What is the name of all the people who are older than at least one engineer? Order them by age.",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age > value GROUP BY T2.friend HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "In zip code 94107, on which day neither Fog nor Rain was not observed?",
        "gold_parse": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
        "query": "SELECT T2.start_date FROM status AS T1 JOIN trip AS T2 WHERE T2.zip_code = value AND T1.time ! = value",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"",
        "query": "SELECT FirstName , LastName FROM teachers WHERE FirstName = value",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "query": "SELECT date , mean_temperature_f , max_dew_point_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the order details of the products with price higher than 2000?",
        "gold_parse": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000",
        "query": "SELECT Other_Product_Service_Details FROM Products WHERE Product_Price > value",
        "correctness": 0
    },
    {
        "db_id": "pets_1",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "gold_parse": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "query": "select PetType , pet_age from Pets order by pet_age limit value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000",
        "question": "Which countries have a population over 50 million?",
        "correctness": 1,
        "gold_parse": "SELECT Name, Continent, Population FROM country WHERE Population > 50000000"
    },
    {
        "db_id": "singer",
        "question": "What are the titles of songs that reached the highest sales?",
        "gold_parse": "",
        "query": "SELECT Title FROM song WHERE Highest_Position = (SELECT Max(Sales) FROM song);",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is the mail date of the document with id 7?",
        "gold_parse": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7",
        "query": "SELECT T1.receipt_date FROM Documents AS T1 JOIN Documents_Mailed AS T2 ON T1.document_id = T2.document_id WHERE T2.document_id = value",
        "correctness": 0
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Airline, COUNT(*) FROM flights GROUP BY Airline;",
        "question": "How many flights are there for each airline?",
        "correctness": 1,
        "gold_parse": "SELECT Airline, COUNT(*) FROM flights GROUP BY Airline;"
    },
    {
        "db_id": "art_1",
        "query": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930",
        "question": "What locations have works painted before 1885 or after 1930?",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930"
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many features does each property have?",
        "gold_parse": "",
        "query": "SELECT property_name, COUNT(feature_description) FROM Properties JOIN Other_Available_Features ON Properties.property_id = Other_Available_Features.feature_type_code GROUP BY property_name;",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "What is the average high temperature for each day of week?",
        "gold_parse": "SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week",
        "query": "SELECT day_of_week , Avg ( low_temperature ) FROM weekly_weather GROUP BY day_of_week",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "How many patients are not using Procrastin-X as medication?",
        "gold_parse": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
        "query": "SELECT Count ( * ) FROM Patient WHERE SSN NOT IN ( SELECT SSN FROM Patient WHERE Name = value )",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "How many services are there?",
        "gold_parse": "SELECT count(*) FROM services",
        "query": "SELECT Count ( * ) FROM Addresses",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details of the markets that can be accessed by walk or bus?",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "query": "SELECT Market_Details FROM Street_Markets GROUP BY Market_Details HAVING Count ( * ) > = value",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What are the names of each scientist, the names of the projects that they work on, and the hours for each of those projects, listed in alphabetical order by project name, then scientist name.",
        "gold_parse": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name",
        "query": "SELECT T2.Name , T1.Name , T2.Hours FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T1.Name Asc",
        "correctness": 0
    },
    {
        "db_id": "scholar",
        "query": "SELECT datasetname, title FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid JOIN paper ON paperdataset.paperid = paper.paperid ORDER BY datasetname ASC;",
        "question": "What are the dataset names and titles of papers ordered by the dataset name in ascending order?",
        "correctness": 1,
        "gold_parse": "SELECT datasetname, title FROM dataset JOIN paperdataset ON dataset.datasetid = paperdataset.datasetid JOIN paper ON paperdataset.paperid = paper.paperid ORDER BY datasetname ASC;"
    },
    {
        "db_id": "farm",
        "question": "Return the maximum and minimum number of cows across all farms.",
        "gold_parse": "SELECT max(Cows) ,  min(Cows) FROM farm",
        "query": "SELECT Max ( Sheep_and_Goats ) , Min ( Sheep_and_Goats ) FROM farm",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the average salary of employees for each department who gets a commission percentage.",
        "gold_parse": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
        "query": "SELECT T1.JOB_TITLE , Avg ( T1.MIN_SALARY ) FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID GROUP BY T2.DEPARTMENT_ID",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "List all the activities we have.",
        "gold_parse": "SELECT activity_name FROM Activity",
        "query": "SELECT Room FROM Faculty",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID",
        "question": "What are the names of perpetrators?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID"
    },
    {
        "db_id": "restaurant_1",
        "query": "SELECT Fname , Lname FROM Student WHERE Major  =  600;",
        "question": "List all students' first names and last names who majored in 600.",
        "correctness": 1,
        "gold_parse": "SELECT Fname , Lname FROM Student WHERE Major  =  600;"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT count(DISTINCT city) FROM station",
        "question": "What is the number of distinct cities the stations are located at?",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT city) FROM station"
    },
    {
        "db_id": "store_1",
        "query": "SELECT count(*) FROM customers WHERE city = \"Prague\";",
        "question": "How many customers live in the city of Prague?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM customers WHERE city = \"Prague\";"
    },
    {
        "db_id": "bike_1",
        "query": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
        "question": "For each zip code, how many times has the maximum wind speed reached 25 mph?",
        "correctness": 1,
        "gold_parse": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE vendor_requested_price < (SELECT Avg(vendor_requested_price) FROM Properties);",
        "question": "What are the names of properties that have a vendor requested price below the average?",
        "correctness": 1,
        "gold_parse": "SELECT property_name FROM Properties WHERE vendor_requested_price < (SELECT Avg(vendor_requested_price) FROM Properties);"
    },
    {
        "db_id": "election",
        "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\"",
        "question": "Which committees have delegates from both democratic party and liberal party?",
        "correctness": 1,
        "gold_parse": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\""
    },
    {
        "db_id": "body_builder",
        "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common birth place of people?",
        "correctness": 1,
        "gold_parse": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "hospital_1",
        "question": "What is the alphabetically ordered list of all distinct medications?",
        "gold_parse": "SELECT DISTINCT name FROM medication ORDER BY name",
        "query": "SELECT DISTINCT Name FROM Patient ORDER BY Name Asc",
        "correctness": 0
    },
    {
        "db_id": "advertising_agencies",
        "query": "SELECT count(*) FROM Agencies",
        "question": "How many agencies do we have?",
        "correctness": 1,
        "gold_parse": "SELECT count(*) FROM Agencies"
    },
    {
        "db_id": "customers_and_orders",
        "query": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
        "question": "Give the id and name of the cheapest Hardware product.",
        "correctness": 1,
        "gold_parse": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1"
    },
    {
        "db_id": "store_1",
        "query": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "question": "What is the title, phone number and hire date for the employee named Nancy Edwards?",
        "correctness": 1,
        "gold_parse": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";"
    },
    {
        "db_id": "network_1",
        "question": "Show the ID of the high schooler named Kyle.",
        "gold_parse": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "query": "SELECT ID FROM Highschooler WHERE grade = value",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Where is the headquarter of the company founded by James?",
        "gold_parse": "SELECT headquarter FROM manufacturers WHERE founder  =  'James'",
        "query": "SELECT T1.Headquarter FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T2.Name = value",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "For the airline ids with the top 10 most routes operated, what are their names?",
        "gold_parse": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10",
        "query": "SELECT T2.name FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.alid ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "List all program origins in the alphabetical order.",
        "gold_parse": "SELECT origin FROM program ORDER BY origin",
        "query": "SELECT Name FROM channel ORDER BY Name Asc",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "question": "Find the names of the products with length smaller than 3 or height greater than 5.",
        "correctness": 1,
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5"
    },
    {
        "db_id": "university_rank",
        "query": "SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University",
        "question": "What is the maximum, average, and minimum enrollment for all universities?",
        "correctness": 1,
        "gold_parse": "SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum department ID for each student's SSN?",
        "gold_parse": "",
        "query": "SELECT ssn, MAX(department_id) FROM Students JOIN Departments ON Students.student_id = Departments.department_id;",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "query": "SELECT Lifespan FROM representative WHERE State  =  \"New York\" OR State  =  \"Indiana\"",
        "question": "What are the life spans of representatives from New York state or Indiana state?",
        "correctness": 1,
        "gold_parse": "SELECT Lifespan FROM representative WHERE State  =  \"New York\" OR State  =  \"Indiana\""
    },
    {
        "db_id": "match_season",
        "query": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
        "question": "Count the number of different colleges that players who play for Columbus Crew are from.",
        "correctness": 1,
        "gold_parse": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\""
    },
    {
        "db_id": "movie_1",
        "query": "SELECT rID FROM Rating WHERE stars != 4",
        "question": "Find the ids of reviewers who didn't only give 4 star.",
        "correctness": 1,
        "gold_parse": "SELECT rID FROM Rating WHERE stars != 4"
    },
    {
        "db_id": "debate",
        "query": "SELECT Date FROM debate WHERE Num_of_Audience  >  150",
        "question": "List the dates of debates with number of audience bigger than 150",
        "correctness": 1,
        "gold_parse": "SELECT Date FROM debate WHERE Num_of_Audience  >  150"
    },
    {
        "db_id": "address_1",
        "query": "SELECT distance FROM Direct_distance WHERE city1_code  =  \"BAL\" AND city2_code  =  \"CHI\"",
        "question": "What is the distance between BAL and CHI?",
        "correctness": 1,
        "gold_parse": "SELECT distance FROM Direct_distance WHERE city1_code  =  \"BAL\" AND city2_code  =  \"CHI\""
    },
    {
        "db_id": "formula_1",
        "question": "How many drivers were in the Australian Grand Prix held in 2009?",
        "gold_parse": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009",
        "query": "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND circuitRef = value",
        "correctness": 0
    },
    {
        "db_id": "world_1",
        "question": "Find the minimum population of continents with a life expectancy greater than 80.",
        "gold_parse": "",
        "query": "SELECT Continent, MIN(Population) FROM country WHERE LifeExpectancy > 80;",
        "correctness": 0
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of AI');",
        "question": "What are the names of journals that have the same name as 'Journal of AI'?",
        "correctness": 1,
        "gold_parse": "SELECT name FROM journal WHERE jid IN (SELECT jid FROM journal WHERE name = 'Journal of AI');"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "SELECT document_type_code FROM Documents WHERE document_id = 2;",
        "question": "List the document type code for the document with the id 2.",
        "correctness": 1,
        "gold_parse": "SELECT document_type_code FROM Documents WHERE document_id = 2;"
    },
    {
        "db_id": "debate",
        "query": "SELECT DISTINCT Venue FROM debate",
        "question": "Show the distinct venues of debates",
        "correctness": 1,
        "gold_parse": "SELECT DISTINCT Venue FROM debate"
    },
    {
        "db_id": "election",
        "question": "Show the name of the party that has the most delegates.",
        "gold_parse": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
        "query": "SELECT Party FROM party GROUP BY Party ORDER BY Count ( * ) Desc LIMIT value",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC",
        "question": "List the names and buildings of all departments sorted by the budget from large to small.",
        "correctness": 1,
        "gold_parse": "SELECT dept_name ,  building FROM department ORDER BY budget DESC"
    },
    {
        "db_id": "bakery_1",
        "query": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
        "question": "What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?",
        "correctness": 1,
        "gold_parse": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the minimum course ID for each student's mobile number?",
        "gold_parse": "",
        "query": "SELECT cell_mobile_number, MIN(course_id) FROM Students JOIN Courses ON Students.student_id = Courses.course_id;",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the name of all playlist.",
        "gold_parse": "SELECT name FROM playlists",
        "query": "SELECT name FROM tracks",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the id and star rating of each hotel, ordered by its price from low to high.",
        "gold_parse": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC",
        "query": "SELECT T2.hotel_id , T1.star_rating_description , T1.star_rating_description FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc",
        "correctness": 0
    },
    {
        "db_id": "video_game",
        "query": "SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player",
        "question": "What are the maximum and minimum rank of the year of players.",
        "correctness": 1,
        "gold_parse": "SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player"
    },
    {
        "db_id": "theme_gallery",
        "query": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500",
        "question": "Show the theme for exhibitions with both records of an attendance below 100 and above 500.",
        "correctness": 1,
        "gold_parse": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500"
    }
]